---
AWSTemplateFormatVersion: 2010-09-09
Description: 'Cloudformation for provisioning scheduled EC2. 
**WARNING** This template creates EC2,VPC and related resources. You will be billed for the AWS resources used if you create a stack from this template'
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "VPC Configurations"
        Parameters:
          - VpcCIDR
          - PrivateSubnetCIDR
          - PublicSubnetCIDR
      - Label:
          default: "Github configurations"
        Parameters:
          - GithubPersonalAccessToken 
          - GithubRepoName
Parameters:
  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.192.0.0/24
  PrivateSubnetCIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the Availability Zone
    Type: String
    Default: 10.192.0.20/28
  PublicSubnetCIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the Availability Zone
    Type: String
    Default: 10.192.0.60/28
  ImageId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
    Description: The Amazon EC2 Linux instance Amazon Machine Image (AMI), which designates the configuration of the new instance.
  InstanceType:
    Type: String
    Default: t3.2xlarge
    Description: The type of Amazon EC2 Linux instances that will be launched for this project.
  GithubRepoName:
    Type: String 
    Description: the name of the repository to clone code from
  GithubPersonalAccessToken:
    Type: String 
    Description: A personal access token to clone the repository
  

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnetCIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet (AZ1)


  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnetCIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private Subnet (AZ1)


  NatGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet


  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  DefaultPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet

  AllowS3AccessRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      RoleName: AllowS3AccessRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore'
        - 'arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy'
      Policies:
        -
          PolicyName: "allow-ec2-deployment-bucket-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: 
                - "s3:PutObject"
                - "s3:GetObject"
                Resource: 
                - !Sub arn:${AWS::Partition}:s3:::${DeploymentBucket}/*
                - !Sub arn:${AWS::Partition}:s3:::cnam2022/*
  
  AllowEventBridgeToExecuteCommandRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      RoleName: EventBridgeExecuteCommandOnTaggedEc2
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "events.amazonaws.com"
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonSSMAutomationRole'
      Policies:
        -
          PolicyName: "allow-to-list-rules"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: 
                - "events:ListRules"
                Resource: 
                - !Sub arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:rule/*

        - 
          PolicyName: "allow-to-disable-image-processor-rule"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - 
                Effect: "Allow"
                Action:
                - "events:DisableRule"
                Resource: 
                - !Sub arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:rule/*
        -
          PolicyName: "allow-to-describe-instances"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
               Effect: "Allow"
               Action: 
               - "ec2:DescribeInstances"
               Resource: '*'
        -
          PolicyName: "allow-to-stop-image-processor-instance"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
               Effect: "Allow"
               Action: 
               - "ec2:StopInstances"
               Resource: 
               - !Sub arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:instance/*
               Condition:
                  StringEquals:
                    aws:ResourceTag:Purpose: ImageProcessor
                 
  
      

  FTPSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: allow access to FTP server from internet
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 21
        ToPort: 21
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: '-1'
        CidrIp: 0.0.0.0/0  
  DeploymentBucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: AllowS3AccessRole
  EC2Instance:
    Type: AWS::EC2::Instance
    DependsOn: RunScriptOnEC2InstanceRunning
    Properties:
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp2
            VolumeSize: 100
            DeleteOnTermination: true
      EbsOptimized: false
      ImageId:
        Ref: ImageId
      SubnetId:
        Ref: PrivateSubnet
      InstanceType: 
        Ref: InstanceType
      SecurityGroupIds:
        - !GetAtt FTPSecurityGroup.GroupId
      IamInstanceProfile:
        Ref: InstanceProfile
      Tags: 
        - Key: Purpose
          Value: ImageProcessor
      UserData:
        "Fn::Base64":
          !Sub |
              #!/bin/bash
              yum update -y
              yum upgrade -y
              yum install libXext libSM libXrender mesa-libGL.x86_64 git -y
              yum install java-1.8.0-openjdk -y
              yum groupinstall 'Development Tools' -y 
              wget https://www.rarlab.com/rar/rarlinux-x64-6.0.2.tar.gz
              tar -zxvf rarlinux-x64-6.0.2.tar.gz
              cd rar/ && cp -v rar unrar /usr/bin/ && cd ..
              
              
  
  RunScript: 
    Type: AWS::SSM::Document
    Properties:
      Tags: 
        - Key: Purpose
          Value: ImageProcessor
      Content:
        schemaVersion: '0.3'
        description: 'Run a script on a specific Linux instances.'
        parameters:
          AutomationAssumeRole:
            type: String
            description: (Optional) The ARN of the role that allows Automation to perform the actions on your behalf.
            default: !GetAtt AllowEventBridgeToExecuteCommandRole.Arn
          commands:
            type: String
            description: "(Required) The commands to run or the path to an existing script on the instance."
            default: !Sub |
                         #!/bin/bash
                          cd /root/
                          echo "cloning repository ...."
                          git clone https://${GithubPersonalAccessToken}@github.com/infinidatamr/${GithubRepoName}.git
                          echo "cloning done"
                          cd ${GithubRepoName}
                          echo 'set deployment bucket name ....'
                          echo -e "\nDESTINATION_BUCKET_NAME= ${DeploymentBucket}\n" >> .env
                          echo 'set environment to prod ...'
                          sed -i -r 's/localhost/prod/g'  .env
                          echo "creating necessary directories"
                          mkdir -p data/extracted
                          echo "installing dependencies ...."
                          pip3 install --upgrade -r requirements.txt
                          echo "build libsvm for all target ...."
                          cd processimage/libsvm/ && make -B 
                          echo "build libsvm for python ...."
                          cd python && make
                          echo "All successfully done."
        mainSteps:
          - name: sleep
            action: aws:sleep
            description: "wait 2 minutes for dependencies to be installed on the target ec2"
            inputs:
              Duration: PT2M
            nextStep: getInstanceIdFromTheTag
          - name: getInstanceIdFromTheTag
            action: 'aws:executeAwsApi'
            onFailure: Abort
            inputs:
              Service: ec2
              Api: DescribeInstances
              Filters:
                - Name: 'tag:Purpose'
                  Values: 
                  - ImageProcessor
                - Name: 'instance-state-name'
                  Values:
                  - running
            outputs:
              - Name: InstanceId
                Selector: '$.Reservations[0].Instances[0].InstanceId'
                Type: String
            nextStep: cloneCodeAndInstallDependencies
          # - name: assertInstanceStateRunning
          #   action: aws:assertAwsResourceProperty
          #   timeoutSeconds: 300
          #   onFailure: 'step:getRuleFullName'
          #   inputs:
          #     Service: ec2
          #     Api: DescribeInstanceStatus
          #     InstanceIds:
          #     - "{{ getInstanceIdFromTheTag.InstanceId }}"
          #     PropertySelector: "$.InstanceStatuses[0].InstanceState.Name"
          #     DesiredValues:
          #     - running
          #   nextStep: cloneCodeAndInstallDependencies
          - name: cloneCodeAndInstallDependencies
            action: 'aws:runCommand'
            onFailure: 'step:getRuleFullName'
            inputs:
              DocumentName: AWS-RunShellScript
              Parameters:
                commands:
                - "{{ commands }}"
              CloudWatchOutputConfig:
                CloudWatchLogGroupName: ProcessImagesCloudWatchLogGroup
                CloudWatchOutputEnabled: true
              InstanceIds:
                - "{{ getInstanceIdFromTheTag.InstanceId }}"
            nextStep: DownloadExtractDataFromS3
          - name: DownloadExtractDataFromS3
            action: 'aws:runCommand'
            onFailure: 'step:getRuleFullName'
            inputs:
              DocumentName: AWS-RunShellScript
              Parameters:
                executionTimeout: '172800'
                commands:
                - !Sub "cd /root/${GithubRepoName} && python3 main.py 1"
              CloudWatchOutputConfig:
                CloudWatchLogGroupName: ProcessImagesCloudWatchLogGroup
                CloudWatchOutputEnabled: true
              InstanceIds:
                - "{{ getInstanceIdFromTheTag.InstanceId }}"
            nextStep: ConvertXlsxFileToCsv
          - name: ConvertXlsxFileToCsv
            action: 'aws:runCommand'
            onFailure: 'step:getRuleFullName'
            inputs:
              DocumentName: AWS-RunShellScript
              Parameters:
                commands:
                - !Sub "cd /root/${GithubRepoName} && python3 main.py 2"
              CloudWatchOutputConfig:
                CloudWatchLogGroupName: ProcessImagesCloudWatchLogGroup
                CloudWatchOutputEnabled: true
              InstanceIds:
                - "{{ getInstanceIdFromTheTag.InstanceId }}"
            nextStep: ProcessImagesInEachSubBatch
          - name: ProcessImagesInEachSubBatch
            action: 'aws:runCommand'
            onFailure: 'step:getRuleFullName'
            inputs:
              DocumentName: AWS-RunShellScript
              Parameters:
                executionTimeout: '172800'
                commands:
                - !Sub "cd /root/${GithubRepoName} && python3 main.py 3"
              CloudWatchOutputConfig:
                CloudWatchLogGroupName: ProcessImagesCloudWatchLogGroup
                CloudWatchOutputEnabled: true
              InstanceIds:
                - "{{ getInstanceIdFromTheTag.InstanceId }}"
            nextStep: ExecuteDataControlJob
          - name: ExecuteDataControlJob
            action: 'aws:runCommand'
            onFailure: 'step:getRuleFullName'
            inputs:
              DocumentName: AWS-RunShellScript
              Parameters:
                commands:
                - !Sub "cd /root/${GithubRepoName} && python3 main.py 4"
              CloudWatchOutputConfig:
                CloudWatchLogGroupName: ProcessImagesCloudWatchLogGroup
                CloudWatchOutputEnabled: true
              InstanceIds:
                - "{{ getInstanceIdFromTheTag.InstanceId }}"
            nextStep: MoveJobRejectedImages
          
          - name: MoveJobRejectedImages
            action: 'aws:runCommand'
            onFailure: 'step:getRuleFullName'
            inputs:
              DocumentName: AWS-RunShellScript
              Parameters:
                executionTimeout: '18000'
                commands:
                - !Sub "cd /root/${GithubRepoName} && python3 main.py 5"
              CloudWatchOutputConfig:
                CloudWatchLogGroupName: ProcessImagesCloudWatchLogGroup
                CloudWatchOutputEnabled: true
              InstanceIds:
                - "{{ getInstanceIdFromTheTag.InstanceId }}"
            nextStep: MoveAllOutputToRootFolder
          
          - name: MoveAllOutputToRootFolder
            action: 'aws:runCommand'
            onFailure: 'step:getRuleFullName'
            inputs:
              DocumentName: AWS-RunShellScript
              Parameters:
                executionTimeout: '18000'
                commands:
                - !Sub "cd /root/${GithubRepoName} && python3 main.py 6"
              CloudWatchOutputConfig:
                CloudWatchLogGroupName: ProcessImagesCloudWatchLogGroup
                CloudWatchOutputEnabled: true
              InstanceIds:
                - "{{ getInstanceIdFromTheTag.InstanceId }}"
            nextStep: CompressRejectedAndValidatedImages
          
          - name: CompressRejectedAndValidatedImages
            action: 'aws:runCommand'
            onFailure: 'step:getRuleFullName'
            inputs:
              DocumentName: AWS-RunShellScript
              Parameters:
                executionTimeout: '172800'
                commands:
                - !Sub "cd /root/${GithubRepoName} && python3 main.py 7"
              CloudWatchOutputConfig:
                CloudWatchLogGroupName: ProcessImagesCloudWatchLogGroup
                CloudWatchOutputEnabled: true
              InstanceIds:
                - "{{ getInstanceIdFromTheTag.InstanceId }}"
            nextStep: UploadImagesToS3
          
          - name: UploadImagesToS3
            action: 'aws:runCommand'
            onFailure: 'step:getRuleFullName'
            inputs:
              DocumentName: AWS-RunShellScript
              Parameters:
                executionTimeout: '18000'
                commands:
                - !Sub "cd /root/${GithubRepoName} && python3 main.py 8"
              CloudWatchOutputConfig:
                CloudWatchLogGroupName: ProcessImagesCloudWatchLogGroup
                CloudWatchOutputEnabled: true
              InstanceIds:
                - "{{ getInstanceIdFromTheTag.InstanceId }}"
            nextStep: getRuleFullName

          - name: getRuleFullName
            action: 'aws:executeAwsApi'
            timeoutSeconds: 60
            onFailure: 'step:stopInstance'
            inputs:
              Service: events
              Api: ListRules
              NamePrefix: !Sub '${AWS::StackName}-'
            outputs:
              - Name: ruleName
                Selector: '$.Rules[0].Name'
                Type: String
            nextStep: disableEventBridgeRule
          - name: disableEventBridgeRule
            action: 'aws:executeAwsApi'
            timeoutSeconds: 60
            onFailure: Continue
            inputs:
              Service: events
              Api: DisableRule
              Name: "{{ getRuleFullName.ruleName }}"
            nextStep: stopInstance
          - name: stopInstance
            action: 'aws:executeAwsApi'
            timeoutSeconds: 60
            isEnd: true
            inputs:
              Service: ec2
              Api: StopInstances
              InstanceIds:
                - "{{ getInstanceIdFromTheTag.InstanceId }}"


      DocumentFormat: YAML
      TargetType: /AWS::EC2::Instance
      DocumentType: Automation
      Name: 'Execute-Script-RunBook'

  RunScriptOnEC2InstanceRunning: 
    Type: AWS::Events::Rule
    Properties: 
      Description: "execute when the ec2 instance is fully running"
      RoleArn: !GetAtt AllowEventBridgeToExecuteCommandRole.Arn
      EventPattern: 
        source: 
          - "aws.ec2"
          # - "aws.ssm"
        detail-type: 
          - "EC2 Instance State-change Notification"
          # - "AWS API Call via CloudTrail"
        detail: 
          state:
            - running
          # eventSource:
          #   - "ssm.amazonaws.com"
          # eventName: 
          #   - "UpdateInstanceInformation"
      State: "ENABLED"
      Targets: 
        - 
          Id: !Ref RunScript
          Arn: !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:automation-definition/${RunScript}:$DEFAULT
          RoleArn: !GetAtt AllowEventBridgeToExecuteCommandRole.Arn
        
Outputs:

  DeploymentBucket:
    Description: Deployment bucket
    Value: !Ref DeploymentBucket
 
