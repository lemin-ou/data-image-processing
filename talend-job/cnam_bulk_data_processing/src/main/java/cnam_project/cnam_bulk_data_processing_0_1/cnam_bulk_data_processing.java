// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package cnam_project.cnam_bulk_data_processing_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJavaRow_1
	//import java.util.List;

	//the import part of tJavaRow_2
	//import java.util.List;

	//the import part of tJavaRow_3
	//import java.util.List;

	//the import part of tJavaRow_4
	//import java.util.List;

	//the import part of tJavaRow_5
	//import java.util.List;

	//the import part of tJavaRow_6
	//import java.util.List;

	//the import part of tJavaRow_7
	//import java.util.List;

	//the import part of tJavaRow_8
	//import java.util.List;

	//the import part of tJavaRow_9
	//import java.util.List;

	//the import part of tJavaRow_10
	//import java.util.List;

	//the import part of tJavaRow_11
	//import java.util.List;

	//the import part of tJavaRow_12
	//import java.util.List;

	//the import part of tJava_1
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: cnam_bulk_data_processing Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status 
 */
public class cnam_bulk_data_processing implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(IMAGE_BMP_THRESHOLD != null){
				
					this.setProperty("IMAGE_BMP_THRESHOLD", IMAGE_BMP_THRESHOLD.toString());
				
			}
			
			if(default_score != null){
				
					this.setProperty("default_score", default_score.toString());
				
			}
			
			if(csvpath != null){
				
					this.setProperty("csvpath", csvpath.toString());
				
			}
			
			if(IMAGE_GIF_THRESHOLD != null){
				
					this.setProperty("IMAGE_GIF_THRESHOLD", IMAGE_GIF_THRESHOLD.toString());
				
			}
			
			if(IMAGE_JPG_THRESHOLD != null){
				
					this.setProperty("IMAGE_JPG_THRESHOLD", IMAGE_JPG_THRESHOLD.toString());
				
			}
			
			if(IMAGE_PNG_THRESHOLD != null){
				
					this.setProperty("IMAGE_PNG_THRESHOLD", IMAGE_PNG_THRESHOLD.toString());
				
			}
			
			if(rejectcsvpath != null){
				
					this.setProperty("rejectcsvpath", rejectcsvpath.toString());
				
			}
			
			if(rejectexcelpath != null){
				
					this.setProperty("rejectexcelpath", rejectexcelpath.toString());
				
			}
			
			if(validcsvpath != null){
				
					this.setProperty("validcsvpath", validcsvpath.toString());
				
			}
			
			if(validexcelpath != null){
				
					this.setProperty("validexcelpath", validexcelpath.toString());
				
			}
			
		}

public Integer IMAGE_BMP_THRESHOLD;
public Integer getIMAGE_BMP_THRESHOLD(){
	return this.IMAGE_BMP_THRESHOLD;
}
public Integer default_score;
public Integer getDefault_score(){
	return this.default_score;
}
public String csvpath;
public String getCsvpath(){
	return this.csvpath;
}
public Integer IMAGE_GIF_THRESHOLD;
public Integer getIMAGE_GIF_THRESHOLD(){
	return this.IMAGE_GIF_THRESHOLD;
}
public Integer IMAGE_JPG_THRESHOLD;
public Integer getIMAGE_JPG_THRESHOLD(){
	return this.IMAGE_JPG_THRESHOLD;
}
public Integer IMAGE_PNG_THRESHOLD;
public Integer getIMAGE_PNG_THRESHOLD(){
	return this.IMAGE_PNG_THRESHOLD;
}
public String rejectcsvpath;
public String getRejectcsvpath(){
	return this.rejectcsvpath;
}
public String rejectexcelpath;
public String getRejectexcelpath(){
	return this.rejectexcelpath;
}
public String validcsvpath;
public String getValidcsvpath(){
	return this.validcsvpath;
}
public String validexcelpath;
public String getValidexcelpath(){
	return this.validexcelpath;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "cnam_bulk_data_processing";
	private final String projectName = "CNAM_PROJECT";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				cnam_bulk_data_processing.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(cnam_bulk_data_processing.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
				tLogCatcher_1.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				tLogCatcher_1Process(globalMap);
			}
			} catch (TalendException e) {
				// do nothing
			
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tFileInputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUnite_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDie_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDie_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "ERROR", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

				try {
					
						if(this.execStat){
							runStat.updateStatOnConnection("OnSubjobError1", 0, "error");
						}
					
					errorCode = null;
					tDie_1Process(globalMap);
					if (!"failure".equals(status)) {
						status = "end";
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			public void tHashInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "ERROR", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

				try {
					
						if(this.execStat){
							runStat.updateStatOnConnection("OnSubjobError2", 0, "error");
						}
					
					errorCode = null;
					tDie_2Process(globalMap);
					if (!"failure".equals(status)) {
						status = "end";
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			public void tDie_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDie_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tLogCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class row29Struct implements routines.system.IPersistableRow<row29Struct> {
    final static byte[] commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];
    static byte[] commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];

	
			    public String INAM;

				public String getINAM () {
					return this.INAM;
				}
				
			    public String NNI;

				public String getNNI () {
					return this.NNI;
				}
				
			    public String Prenom;

				public String getPrenom () {
					return this.Prenom;
				}
				
			    public String Nom_de_Famille;

				public String getNom_de_Famille () {
					return this.Nom_de_Famille;
				}
				
			    public java.util.Date Date_Naissance;

				public java.util.Date getDate_Naissance () {
					return this.Date_Naissance;
				}
				
			    public String Lieu_Naissance;

				public String getLieu_Naissance () {
					return this.Lieu_Naissance;
				}
				
			    public char Genre = ' ';

				public char getGenre () {
					return this.Genre;
				}
				
			    public String Num_Carte;

				public String getNum_Carte () {
					return this.Num_Carte;
				}
				
			    public java.util.Date Date_Deliv;

				public java.util.Date getDate_Deliv () {
					return this.Date_Deliv;
				}
				
			    public String Num_Serie;

				public String getNum_Serie () {
					return this.Num_Serie;
				}
				
			    public String QR_code;

				public String getQR_code () {
					return this.QR_code;
				}
				
			    public String Photo;

				public String getPhoto () {
					return this.Photo;
				}
				
			    public int score;

				public int getScore () {
					return this.score;
				}
				
			    public Boolean numSerieVerified;

				public Boolean getNumSerieVerified () {
					return this.numSerieVerified;
				}
				
			    public Boolean inamVerified;

				public Boolean getInamVerified () {
					return this.inamVerified;
				}
				
			    public Boolean nniVerified;

				public Boolean getNniVerified () {
					return this.nniVerified;
				}
				
			    public Boolean prenomVerified;

				public Boolean getPrenomVerified () {
					return this.prenomVerified;
				}
				
			    public Boolean nomdefamilleVerified;

				public Boolean getNomdefamilleVerified () {
					return this.nomdefamilleVerified;
				}
				
			    public Boolean genreVerified;

				public Boolean getGenreVerified () {
					return this.genreVerified;
				}
				
			    public Boolean numcarteVerified;

				public Boolean getNumcarteVerified () {
					return this.numcarteVerified;
				}
				
			    public Boolean qrCodeVerified;

				public Boolean getQrCodeVerified () {
					return this.qrCodeVerified;
				}
				
			    public Boolean photoVerified;

				public Boolean getPhotoVerified () {
					return this.photoVerified;
				}
				
			    public Boolean scoreVerified;

				public Boolean getScoreVerified () {
					return this.scoreVerified;
				}
				
			    public Boolean uniqueVerified;

				public Boolean getUniqueVerified () {
					return this.uniqueVerified;
				}
				
			    public String PhotoPath;

				public String getPhotoPath () {
					return this.PhotoPath;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length) {
				if(length < 1024 && commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length == 0) {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[1024];
				} else {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length);
			strReturn = new String(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing) {

        	try {

        		int length = 0;
		
					this.INAM = readString(dis);
					
					this.NNI = readString(dis);
					
					this.Prenom = readString(dis);
					
					this.Nom_de_Famille = readString(dis);
					
					this.Date_Naissance = readDate(dis);
					
					this.Lieu_Naissance = readString(dis);
					
			        this.Genre = dis.readChar();
					
					this.Num_Carte = readString(dis);
					
					this.Date_Deliv = readDate(dis);
					
					this.Num_Serie = readString(dis);
					
					this.QR_code = readString(dis);
					
					this.Photo = readString(dis);
					
			        this.score = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.numSerieVerified = null;
           				} else {
           			    	this.numSerieVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.inamVerified = null;
           				} else {
           			    	this.inamVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nniVerified = null;
           				} else {
           			    	this.nniVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.prenomVerified = null;
           				} else {
           			    	this.prenomVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nomdefamilleVerified = null;
           				} else {
           			    	this.nomdefamilleVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.genreVerified = null;
           				} else {
           			    	this.genreVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.numcarteVerified = null;
           				} else {
           			    	this.numcarteVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.qrCodeVerified = null;
           				} else {
           			    	this.qrCodeVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.photoVerified = null;
           				} else {
           			    	this.photoVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.scoreVerified = null;
           				} else {
           			    	this.scoreVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.uniqueVerified = null;
           				} else {
           			    	this.uniqueVerified = dis.readBoolean();
           				}
					
					this.PhotoPath = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.INAM,dos);
					
					// String
				
						writeString(this.NNI,dos);
					
					// String
				
						writeString(this.Prenom,dos);
					
					// String
				
						writeString(this.Nom_de_Famille,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Naissance,dos);
					
					// String
				
						writeString(this.Lieu_Naissance,dos);
					
					// char
				
		            	dos.writeChar(this.Genre);
					
					// String
				
						writeString(this.Num_Carte,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Deliv,dos);
					
					// String
				
						writeString(this.Num_Serie,dos);
					
					// String
				
						writeString(this.QR_code,dos);
					
					// String
				
						writeString(this.Photo,dos);
					
					// int
				
		            	dos.writeInt(this.score);
					
					// Boolean
				
						if(this.numSerieVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.numSerieVerified);
		            	}
					
					// Boolean
				
						if(this.inamVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.inamVerified);
		            	}
					
					// Boolean
				
						if(this.nniVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.nniVerified);
		            	}
					
					// Boolean
				
						if(this.prenomVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.prenomVerified);
		            	}
					
					// Boolean
				
						if(this.nomdefamilleVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.nomdefamilleVerified);
		            	}
					
					// Boolean
				
						if(this.genreVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.genreVerified);
		            	}
					
					// Boolean
				
						if(this.numcarteVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.numcarteVerified);
		            	}
					
					// Boolean
				
						if(this.qrCodeVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.qrCodeVerified);
		            	}
					
					// Boolean
				
						if(this.photoVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.photoVerified);
		            	}
					
					// Boolean
				
						if(this.scoreVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.scoreVerified);
		            	}
					
					// Boolean
				
						if(this.uniqueVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.uniqueVerified);
		            	}
					
					// String
				
						writeString(this.PhotoPath,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("INAM="+INAM);
		sb.append(",NNI="+NNI);
		sb.append(",Prenom="+Prenom);
		sb.append(",Nom_de_Famille="+Nom_de_Famille);
		sb.append(",Date_Naissance="+String.valueOf(Date_Naissance));
		sb.append(",Lieu_Naissance="+Lieu_Naissance);
		sb.append(",Genre="+String.valueOf(Genre));
		sb.append(",Num_Carte="+Num_Carte);
		sb.append(",Date_Deliv="+String.valueOf(Date_Deliv));
		sb.append(",Num_Serie="+Num_Serie);
		sb.append(",QR_code="+QR_code);
		sb.append(",Photo="+Photo);
		sb.append(",score="+String.valueOf(score));
		sb.append(",numSerieVerified="+String.valueOf(numSerieVerified));
		sb.append(",inamVerified="+String.valueOf(inamVerified));
		sb.append(",nniVerified="+String.valueOf(nniVerified));
		sb.append(",prenomVerified="+String.valueOf(prenomVerified));
		sb.append(",nomdefamilleVerified="+String.valueOf(nomdefamilleVerified));
		sb.append(",genreVerified="+String.valueOf(genreVerified));
		sb.append(",numcarteVerified="+String.valueOf(numcarteVerified));
		sb.append(",qrCodeVerified="+String.valueOf(qrCodeVerified));
		sb.append(",photoVerified="+String.valueOf(photoVerified));
		sb.append(",scoreVerified="+String.valueOf(scoreVerified));
		sb.append(",uniqueVerified="+String.valueOf(uniqueVerified));
		sb.append(",PhotoPath="+PhotoPath);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row29Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row27Struct implements routines.system.IPersistableRow<row27Struct> {
    final static byte[] commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];
    static byte[] commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];

	
			    public String INAM;

				public String getINAM () {
					return this.INAM;
				}
				
			    public String NNI;

				public String getNNI () {
					return this.NNI;
				}
				
			    public String Prenom;

				public String getPrenom () {
					return this.Prenom;
				}
				
			    public String Nom_de_Famille;

				public String getNom_de_Famille () {
					return this.Nom_de_Famille;
				}
				
			    public java.util.Date Date_Naissance;

				public java.util.Date getDate_Naissance () {
					return this.Date_Naissance;
				}
				
			    public String Lieu_Naissance;

				public String getLieu_Naissance () {
					return this.Lieu_Naissance;
				}
				
			    public char Genre = ' ';

				public char getGenre () {
					return this.Genre;
				}
				
			    public String Num_Carte;

				public String getNum_Carte () {
					return this.Num_Carte;
				}
				
			    public java.util.Date Date_Deliv;

				public java.util.Date getDate_Deliv () {
					return this.Date_Deliv;
				}
				
			    public String Num_Serie;

				public String getNum_Serie () {
					return this.Num_Serie;
				}
				
			    public String QR_code;

				public String getQR_code () {
					return this.QR_code;
				}
				
			    public String Photo;

				public String getPhoto () {
					return this.Photo;
				}
				
			    public int score;

				public int getScore () {
					return this.score;
				}
				
			    public Boolean numSerieVerified;

				public Boolean getNumSerieVerified () {
					return this.numSerieVerified;
				}
				
			    public Boolean inamVerified;

				public Boolean getInamVerified () {
					return this.inamVerified;
				}
				
			    public Boolean nniVerified;

				public Boolean getNniVerified () {
					return this.nniVerified;
				}
				
			    public Boolean prenomVerified;

				public Boolean getPrenomVerified () {
					return this.prenomVerified;
				}
				
			    public Boolean nomdefamilleVerified;

				public Boolean getNomdefamilleVerified () {
					return this.nomdefamilleVerified;
				}
				
			    public Boolean genreVerified;

				public Boolean getGenreVerified () {
					return this.genreVerified;
				}
				
			    public Boolean numcarteVerified;

				public Boolean getNumcarteVerified () {
					return this.numcarteVerified;
				}
				
			    public Boolean qrCodeVerified;

				public Boolean getQrCodeVerified () {
					return this.qrCodeVerified;
				}
				
			    public Boolean photoVerified;

				public Boolean getPhotoVerified () {
					return this.photoVerified;
				}
				
			    public String extension;

				public String getExtension () {
					return this.extension;
				}
				
			    public String PhotoPath;

				public String getPhotoPath () {
					return this.PhotoPath;
				}
				
			    public Boolean scoreVerified;

				public Boolean getScoreVerified () {
					return this.scoreVerified;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length) {
				if(length < 1024 && commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length == 0) {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[1024];
				} else {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length);
			strReturn = new String(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing) {

        	try {

        		int length = 0;
		
					this.INAM = readString(dis);
					
					this.NNI = readString(dis);
					
					this.Prenom = readString(dis);
					
					this.Nom_de_Famille = readString(dis);
					
					this.Date_Naissance = readDate(dis);
					
					this.Lieu_Naissance = readString(dis);
					
			        this.Genre = dis.readChar();
					
					this.Num_Carte = readString(dis);
					
					this.Date_Deliv = readDate(dis);
					
					this.Num_Serie = readString(dis);
					
					this.QR_code = readString(dis);
					
					this.Photo = readString(dis);
					
			        this.score = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.numSerieVerified = null;
           				} else {
           			    	this.numSerieVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.inamVerified = null;
           				} else {
           			    	this.inamVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nniVerified = null;
           				} else {
           			    	this.nniVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.prenomVerified = null;
           				} else {
           			    	this.prenomVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nomdefamilleVerified = null;
           				} else {
           			    	this.nomdefamilleVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.genreVerified = null;
           				} else {
           			    	this.genreVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.numcarteVerified = null;
           				} else {
           			    	this.numcarteVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.qrCodeVerified = null;
           				} else {
           			    	this.qrCodeVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.photoVerified = null;
           				} else {
           			    	this.photoVerified = dis.readBoolean();
           				}
					
					this.extension = readString(dis);
					
					this.PhotoPath = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.scoreVerified = null;
           				} else {
           			    	this.scoreVerified = dis.readBoolean();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.INAM,dos);
					
					// String
				
						writeString(this.NNI,dos);
					
					// String
				
						writeString(this.Prenom,dos);
					
					// String
				
						writeString(this.Nom_de_Famille,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Naissance,dos);
					
					// String
				
						writeString(this.Lieu_Naissance,dos);
					
					// char
				
		            	dos.writeChar(this.Genre);
					
					// String
				
						writeString(this.Num_Carte,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Deliv,dos);
					
					// String
				
						writeString(this.Num_Serie,dos);
					
					// String
				
						writeString(this.QR_code,dos);
					
					// String
				
						writeString(this.Photo,dos);
					
					// int
				
		            	dos.writeInt(this.score);
					
					// Boolean
				
						if(this.numSerieVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.numSerieVerified);
		            	}
					
					// Boolean
				
						if(this.inamVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.inamVerified);
		            	}
					
					// Boolean
				
						if(this.nniVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.nniVerified);
		            	}
					
					// Boolean
				
						if(this.prenomVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.prenomVerified);
		            	}
					
					// Boolean
				
						if(this.nomdefamilleVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.nomdefamilleVerified);
		            	}
					
					// Boolean
				
						if(this.genreVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.genreVerified);
		            	}
					
					// Boolean
				
						if(this.numcarteVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.numcarteVerified);
		            	}
					
					// Boolean
				
						if(this.qrCodeVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.qrCodeVerified);
		            	}
					
					// Boolean
				
						if(this.photoVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.photoVerified);
		            	}
					
					// String
				
						writeString(this.extension,dos);
					
					// String
				
						writeString(this.PhotoPath,dos);
					
					// Boolean
				
						if(this.scoreVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.scoreVerified);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("INAM="+INAM);
		sb.append(",NNI="+NNI);
		sb.append(",Prenom="+Prenom);
		sb.append(",Nom_de_Famille="+Nom_de_Famille);
		sb.append(",Date_Naissance="+String.valueOf(Date_Naissance));
		sb.append(",Lieu_Naissance="+Lieu_Naissance);
		sb.append(",Genre="+String.valueOf(Genre));
		sb.append(",Num_Carte="+Num_Carte);
		sb.append(",Date_Deliv="+String.valueOf(Date_Deliv));
		sb.append(",Num_Serie="+Num_Serie);
		sb.append(",QR_code="+QR_code);
		sb.append(",Photo="+Photo);
		sb.append(",score="+String.valueOf(score));
		sb.append(",numSerieVerified="+String.valueOf(numSerieVerified));
		sb.append(",inamVerified="+String.valueOf(inamVerified));
		sb.append(",nniVerified="+String.valueOf(nniVerified));
		sb.append(",prenomVerified="+String.valueOf(prenomVerified));
		sb.append(",nomdefamilleVerified="+String.valueOf(nomdefamilleVerified));
		sb.append(",genreVerified="+String.valueOf(genreVerified));
		sb.append(",numcarteVerified="+String.valueOf(numcarteVerified));
		sb.append(",qrCodeVerified="+String.valueOf(qrCodeVerified));
		sb.append(",photoVerified="+String.valueOf(photoVerified));
		sb.append(",extension="+extension);
		sb.append(",PhotoPath="+PhotoPath);
		sb.append(",scoreVerified="+String.valueOf(scoreVerified));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row27Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row28Struct implements routines.system.IPersistableRow<row28Struct> {
    final static byte[] commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];
    static byte[] commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];

	
			    public String INAM;

				public String getINAM () {
					return this.INAM;
				}
				
			    public String NNI;

				public String getNNI () {
					return this.NNI;
				}
				
			    public String Prenom;

				public String getPrenom () {
					return this.Prenom;
				}
				
			    public String Nom_de_Famille;

				public String getNom_de_Famille () {
					return this.Nom_de_Famille;
				}
				
			    public java.util.Date Date_Naissance;

				public java.util.Date getDate_Naissance () {
					return this.Date_Naissance;
				}
				
			    public String Lieu_Naissance;

				public String getLieu_Naissance () {
					return this.Lieu_Naissance;
				}
				
			    public char Genre = ' ';

				public char getGenre () {
					return this.Genre;
				}
				
			    public String Num_Carte;

				public String getNum_Carte () {
					return this.Num_Carte;
				}
				
			    public java.util.Date Date_Deliv;

				public java.util.Date getDate_Deliv () {
					return this.Date_Deliv;
				}
				
			    public String Num_Serie;

				public String getNum_Serie () {
					return this.Num_Serie;
				}
				
			    public String QR_code;

				public String getQR_code () {
					return this.QR_code;
				}
				
			    public String Photo;

				public String getPhoto () {
					return this.Photo;
				}
				
			    public int score;

				public int getScore () {
					return this.score;
				}
				
			    public Boolean numSerieVerified;

				public Boolean getNumSerieVerified () {
					return this.numSerieVerified;
				}
				
			    public Boolean inamVerified;

				public Boolean getInamVerified () {
					return this.inamVerified;
				}
				
			    public Boolean nniVerified;

				public Boolean getNniVerified () {
					return this.nniVerified;
				}
				
			    public Boolean prenomVerified;

				public Boolean getPrenomVerified () {
					return this.prenomVerified;
				}
				
			    public Boolean nomdefamilleVerified;

				public Boolean getNomdefamilleVerified () {
					return this.nomdefamilleVerified;
				}
				
			    public Boolean genreVerified;

				public Boolean getGenreVerified () {
					return this.genreVerified;
				}
				
			    public Boolean numcarteVerified;

				public Boolean getNumcarteVerified () {
					return this.numcarteVerified;
				}
				
			    public Boolean qrCodeVerified;

				public Boolean getQrCodeVerified () {
					return this.qrCodeVerified;
				}
				
			    public Boolean photoVerified;

				public Boolean getPhotoVerified () {
					return this.photoVerified;
				}
				
			    public Boolean scoreVerified;

				public Boolean getScoreVerified () {
					return this.scoreVerified;
				}
				
			    public Boolean uniqueVerified;

				public Boolean getUniqueVerified () {
					return this.uniqueVerified;
				}
				
			    public String PhotoPath;

				public String getPhotoPath () {
					return this.PhotoPath;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length) {
				if(length < 1024 && commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length == 0) {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[1024];
				} else {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length);
			strReturn = new String(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing) {

        	try {

        		int length = 0;
		
					this.INAM = readString(dis);
					
					this.NNI = readString(dis);
					
					this.Prenom = readString(dis);
					
					this.Nom_de_Famille = readString(dis);
					
					this.Date_Naissance = readDate(dis);
					
					this.Lieu_Naissance = readString(dis);
					
			        this.Genre = dis.readChar();
					
					this.Num_Carte = readString(dis);
					
					this.Date_Deliv = readDate(dis);
					
					this.Num_Serie = readString(dis);
					
					this.QR_code = readString(dis);
					
					this.Photo = readString(dis);
					
			        this.score = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.numSerieVerified = null;
           				} else {
           			    	this.numSerieVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.inamVerified = null;
           				} else {
           			    	this.inamVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nniVerified = null;
           				} else {
           			    	this.nniVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.prenomVerified = null;
           				} else {
           			    	this.prenomVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nomdefamilleVerified = null;
           				} else {
           			    	this.nomdefamilleVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.genreVerified = null;
           				} else {
           			    	this.genreVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.numcarteVerified = null;
           				} else {
           			    	this.numcarteVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.qrCodeVerified = null;
           				} else {
           			    	this.qrCodeVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.photoVerified = null;
           				} else {
           			    	this.photoVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.scoreVerified = null;
           				} else {
           			    	this.scoreVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.uniqueVerified = null;
           				} else {
           			    	this.uniqueVerified = dis.readBoolean();
           				}
					
					this.PhotoPath = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.INAM,dos);
					
					// String
				
						writeString(this.NNI,dos);
					
					// String
				
						writeString(this.Prenom,dos);
					
					// String
				
						writeString(this.Nom_de_Famille,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Naissance,dos);
					
					// String
				
						writeString(this.Lieu_Naissance,dos);
					
					// char
				
		            	dos.writeChar(this.Genre);
					
					// String
				
						writeString(this.Num_Carte,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Deliv,dos);
					
					// String
				
						writeString(this.Num_Serie,dos);
					
					// String
				
						writeString(this.QR_code,dos);
					
					// String
				
						writeString(this.Photo,dos);
					
					// int
				
		            	dos.writeInt(this.score);
					
					// Boolean
				
						if(this.numSerieVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.numSerieVerified);
		            	}
					
					// Boolean
				
						if(this.inamVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.inamVerified);
		            	}
					
					// Boolean
				
						if(this.nniVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.nniVerified);
		            	}
					
					// Boolean
				
						if(this.prenomVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.prenomVerified);
		            	}
					
					// Boolean
				
						if(this.nomdefamilleVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.nomdefamilleVerified);
		            	}
					
					// Boolean
				
						if(this.genreVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.genreVerified);
		            	}
					
					// Boolean
				
						if(this.numcarteVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.numcarteVerified);
		            	}
					
					// Boolean
				
						if(this.qrCodeVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.qrCodeVerified);
		            	}
					
					// Boolean
				
						if(this.photoVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.photoVerified);
		            	}
					
					// Boolean
				
						if(this.scoreVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.scoreVerified);
		            	}
					
					// Boolean
				
						if(this.uniqueVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.uniqueVerified);
		            	}
					
					// String
				
						writeString(this.PhotoPath,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("INAM="+INAM);
		sb.append(",NNI="+NNI);
		sb.append(",Prenom="+Prenom);
		sb.append(",Nom_de_Famille="+Nom_de_Famille);
		sb.append(",Date_Naissance="+String.valueOf(Date_Naissance));
		sb.append(",Lieu_Naissance="+Lieu_Naissance);
		sb.append(",Genre="+String.valueOf(Genre));
		sb.append(",Num_Carte="+Num_Carte);
		sb.append(",Date_Deliv="+String.valueOf(Date_Deliv));
		sb.append(",Num_Serie="+Num_Serie);
		sb.append(",QR_code="+QR_code);
		sb.append(",Photo="+Photo);
		sb.append(",score="+String.valueOf(score));
		sb.append(",numSerieVerified="+String.valueOf(numSerieVerified));
		sb.append(",inamVerified="+String.valueOf(inamVerified));
		sb.append(",nniVerified="+String.valueOf(nniVerified));
		sb.append(",prenomVerified="+String.valueOf(prenomVerified));
		sb.append(",nomdefamilleVerified="+String.valueOf(nomdefamilleVerified));
		sb.append(",genreVerified="+String.valueOf(genreVerified));
		sb.append(",numcarteVerified="+String.valueOf(numcarteVerified));
		sb.append(",qrCodeVerified="+String.valueOf(qrCodeVerified));
		sb.append(",photoVerified="+String.valueOf(photoVerified));
		sb.append(",scoreVerified="+String.valueOf(scoreVerified));
		sb.append(",uniqueVerified="+String.valueOf(uniqueVerified));
		sb.append(",PhotoPath="+PhotoPath);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row28Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row26Struct implements routines.system.IPersistableRow<row26Struct> {
    final static byte[] commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];
    static byte[] commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];

	
			    public String INAM;

				public String getINAM () {
					return this.INAM;
				}
				
			    public String NNI;

				public String getNNI () {
					return this.NNI;
				}
				
			    public String Prenom;

				public String getPrenom () {
					return this.Prenom;
				}
				
			    public String Nom_de_Famille;

				public String getNom_de_Famille () {
					return this.Nom_de_Famille;
				}
				
			    public java.util.Date Date_Naissance;

				public java.util.Date getDate_Naissance () {
					return this.Date_Naissance;
				}
				
			    public String Lieu_Naissance;

				public String getLieu_Naissance () {
					return this.Lieu_Naissance;
				}
				
			    public char Genre = ' ';

				public char getGenre () {
					return this.Genre;
				}
				
			    public String Num_Carte;

				public String getNum_Carte () {
					return this.Num_Carte;
				}
				
			    public java.util.Date Date_Deliv;

				public java.util.Date getDate_Deliv () {
					return this.Date_Deliv;
				}
				
			    public String Num_Serie;

				public String getNum_Serie () {
					return this.Num_Serie;
				}
				
			    public String QR_code;

				public String getQR_code () {
					return this.QR_code;
				}
				
			    public String Photo;

				public String getPhoto () {
					return this.Photo;
				}
				
			    public int score;

				public int getScore () {
					return this.score;
				}
				
			    public Boolean numSerieVerified;

				public Boolean getNumSerieVerified () {
					return this.numSerieVerified;
				}
				
			    public Boolean inamVerified;

				public Boolean getInamVerified () {
					return this.inamVerified;
				}
				
			    public Boolean nniVerified;

				public Boolean getNniVerified () {
					return this.nniVerified;
				}
				
			    public Boolean prenomVerified;

				public Boolean getPrenomVerified () {
					return this.prenomVerified;
				}
				
			    public Boolean nomdefamilleVerified;

				public Boolean getNomdefamilleVerified () {
					return this.nomdefamilleVerified;
				}
				
			    public Boolean genreVerified;

				public Boolean getGenreVerified () {
					return this.genreVerified;
				}
				
			    public Boolean numcarteVerified;

				public Boolean getNumcarteVerified () {
					return this.numcarteVerified;
				}
				
			    public Boolean qrCodeVerified;

				public Boolean getQrCodeVerified () {
					return this.qrCodeVerified;
				}
				
			    public Boolean photoVerified;

				public Boolean getPhotoVerified () {
					return this.photoVerified;
				}
				
			    public String extension;

				public String getExtension () {
					return this.extension;
				}
				
			    public String PhotoPath;

				public String getPhotoPath () {
					return this.PhotoPath;
				}
				
			    public Boolean scoreVerified;

				public Boolean getScoreVerified () {
					return this.scoreVerified;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length) {
				if(length < 1024 && commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length == 0) {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[1024];
				} else {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length);
			strReturn = new String(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing) {

        	try {

        		int length = 0;
		
					this.INAM = readString(dis);
					
					this.NNI = readString(dis);
					
					this.Prenom = readString(dis);
					
					this.Nom_de_Famille = readString(dis);
					
					this.Date_Naissance = readDate(dis);
					
					this.Lieu_Naissance = readString(dis);
					
			        this.Genre = dis.readChar();
					
					this.Num_Carte = readString(dis);
					
					this.Date_Deliv = readDate(dis);
					
					this.Num_Serie = readString(dis);
					
					this.QR_code = readString(dis);
					
					this.Photo = readString(dis);
					
			        this.score = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.numSerieVerified = null;
           				} else {
           			    	this.numSerieVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.inamVerified = null;
           				} else {
           			    	this.inamVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nniVerified = null;
           				} else {
           			    	this.nniVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.prenomVerified = null;
           				} else {
           			    	this.prenomVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nomdefamilleVerified = null;
           				} else {
           			    	this.nomdefamilleVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.genreVerified = null;
           				} else {
           			    	this.genreVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.numcarteVerified = null;
           				} else {
           			    	this.numcarteVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.qrCodeVerified = null;
           				} else {
           			    	this.qrCodeVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.photoVerified = null;
           				} else {
           			    	this.photoVerified = dis.readBoolean();
           				}
					
					this.extension = readString(dis);
					
					this.PhotoPath = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.scoreVerified = null;
           				} else {
           			    	this.scoreVerified = dis.readBoolean();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.INAM,dos);
					
					// String
				
						writeString(this.NNI,dos);
					
					// String
				
						writeString(this.Prenom,dos);
					
					// String
				
						writeString(this.Nom_de_Famille,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Naissance,dos);
					
					// String
				
						writeString(this.Lieu_Naissance,dos);
					
					// char
				
		            	dos.writeChar(this.Genre);
					
					// String
				
						writeString(this.Num_Carte,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Deliv,dos);
					
					// String
				
						writeString(this.Num_Serie,dos);
					
					// String
				
						writeString(this.QR_code,dos);
					
					// String
				
						writeString(this.Photo,dos);
					
					// int
				
		            	dos.writeInt(this.score);
					
					// Boolean
				
						if(this.numSerieVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.numSerieVerified);
		            	}
					
					// Boolean
				
						if(this.inamVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.inamVerified);
		            	}
					
					// Boolean
				
						if(this.nniVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.nniVerified);
		            	}
					
					// Boolean
				
						if(this.prenomVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.prenomVerified);
		            	}
					
					// Boolean
				
						if(this.nomdefamilleVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.nomdefamilleVerified);
		            	}
					
					// Boolean
				
						if(this.genreVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.genreVerified);
		            	}
					
					// Boolean
				
						if(this.numcarteVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.numcarteVerified);
		            	}
					
					// Boolean
				
						if(this.qrCodeVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.qrCodeVerified);
		            	}
					
					// Boolean
				
						if(this.photoVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.photoVerified);
		            	}
					
					// String
				
						writeString(this.extension,dos);
					
					// String
				
						writeString(this.PhotoPath,dos);
					
					// Boolean
				
						if(this.scoreVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.scoreVerified);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("INAM="+INAM);
		sb.append(",NNI="+NNI);
		sb.append(",Prenom="+Prenom);
		sb.append(",Nom_de_Famille="+Nom_de_Famille);
		sb.append(",Date_Naissance="+String.valueOf(Date_Naissance));
		sb.append(",Lieu_Naissance="+Lieu_Naissance);
		sb.append(",Genre="+String.valueOf(Genre));
		sb.append(",Num_Carte="+Num_Carte);
		sb.append(",Date_Deliv="+String.valueOf(Date_Deliv));
		sb.append(",Num_Serie="+Num_Serie);
		sb.append(",QR_code="+QR_code);
		sb.append(",Photo="+Photo);
		sb.append(",score="+String.valueOf(score));
		sb.append(",numSerieVerified="+String.valueOf(numSerieVerified));
		sb.append(",inamVerified="+String.valueOf(inamVerified));
		sb.append(",nniVerified="+String.valueOf(nniVerified));
		sb.append(",prenomVerified="+String.valueOf(prenomVerified));
		sb.append(",nomdefamilleVerified="+String.valueOf(nomdefamilleVerified));
		sb.append(",genreVerified="+String.valueOf(genreVerified));
		sb.append(",numcarteVerified="+String.valueOf(numcarteVerified));
		sb.append(",qrCodeVerified="+String.valueOf(qrCodeVerified));
		sb.append(",photoVerified="+String.valueOf(photoVerified));
		sb.append(",extension="+extension);
		sb.append(",PhotoPath="+PhotoPath);
		sb.append(",scoreVerified="+String.valueOf(scoreVerified));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row26Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row24Struct implements routines.system.IPersistableRow<row24Struct> {
    final static byte[] commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];
    static byte[] commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];

	
			    public String INAM;

				public String getINAM () {
					return this.INAM;
				}
				
			    public String NNI;

				public String getNNI () {
					return this.NNI;
				}
				
			    public String Prenom;

				public String getPrenom () {
					return this.Prenom;
				}
				
			    public String Nom_de_Famille;

				public String getNom_de_Famille () {
					return this.Nom_de_Famille;
				}
				
			    public java.util.Date Date_Naissance;

				public java.util.Date getDate_Naissance () {
					return this.Date_Naissance;
				}
				
			    public String Lieu_Naissance;

				public String getLieu_Naissance () {
					return this.Lieu_Naissance;
				}
				
			    public char Genre = ' ';

				public char getGenre () {
					return this.Genre;
				}
				
			    public String Num_Carte;

				public String getNum_Carte () {
					return this.Num_Carte;
				}
				
			    public java.util.Date Date_Deliv;

				public java.util.Date getDate_Deliv () {
					return this.Date_Deliv;
				}
				
			    public String Num_Serie;

				public String getNum_Serie () {
					return this.Num_Serie;
				}
				
			    public String QR_code;

				public String getQR_code () {
					return this.QR_code;
				}
				
			    public String Photo;

				public String getPhoto () {
					return this.Photo;
				}
				
			    public int score;

				public int getScore () {
					return this.score;
				}
				
			    public Boolean numSerieVerified;

				public Boolean getNumSerieVerified () {
					return this.numSerieVerified;
				}
				
			    public Boolean inamVerified;

				public Boolean getInamVerified () {
					return this.inamVerified;
				}
				
			    public Boolean nniVerified;

				public Boolean getNniVerified () {
					return this.nniVerified;
				}
				
			    public Boolean prenomVerified;

				public Boolean getPrenomVerified () {
					return this.prenomVerified;
				}
				
			    public Boolean nomdefamilleVerified;

				public Boolean getNomdefamilleVerified () {
					return this.nomdefamilleVerified;
				}
				
			    public Boolean genreVerified;

				public Boolean getGenreVerified () {
					return this.genreVerified;
				}
				
			    public Boolean numcarteVerified;

				public Boolean getNumcarteVerified () {
					return this.numcarteVerified;
				}
				
			    public Boolean qrCodeVerified;

				public Boolean getQrCodeVerified () {
					return this.qrCodeVerified;
				}
				
			    public Boolean photoVerified;

				public Boolean getPhotoVerified () {
					return this.photoVerified;
				}
				
			    public String extension;

				public String getExtension () {
					return this.extension;
				}
				
			    public String PhotoPath;

				public String getPhotoPath () {
					return this.PhotoPath;
				}
				
			    public Boolean scoreVerified;

				public Boolean getScoreVerified () {
					return this.scoreVerified;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length) {
				if(length < 1024 && commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length == 0) {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[1024];
				} else {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length);
			strReturn = new String(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing) {

        	try {

        		int length = 0;
		
					this.INAM = readString(dis);
					
					this.NNI = readString(dis);
					
					this.Prenom = readString(dis);
					
					this.Nom_de_Famille = readString(dis);
					
					this.Date_Naissance = readDate(dis);
					
					this.Lieu_Naissance = readString(dis);
					
			        this.Genre = dis.readChar();
					
					this.Num_Carte = readString(dis);
					
					this.Date_Deliv = readDate(dis);
					
					this.Num_Serie = readString(dis);
					
					this.QR_code = readString(dis);
					
					this.Photo = readString(dis);
					
			        this.score = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.numSerieVerified = null;
           				} else {
           			    	this.numSerieVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.inamVerified = null;
           				} else {
           			    	this.inamVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nniVerified = null;
           				} else {
           			    	this.nniVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.prenomVerified = null;
           				} else {
           			    	this.prenomVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nomdefamilleVerified = null;
           				} else {
           			    	this.nomdefamilleVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.genreVerified = null;
           				} else {
           			    	this.genreVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.numcarteVerified = null;
           				} else {
           			    	this.numcarteVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.qrCodeVerified = null;
           				} else {
           			    	this.qrCodeVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.photoVerified = null;
           				} else {
           			    	this.photoVerified = dis.readBoolean();
           				}
					
					this.extension = readString(dis);
					
					this.PhotoPath = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.scoreVerified = null;
           				} else {
           			    	this.scoreVerified = dis.readBoolean();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.INAM,dos);
					
					// String
				
						writeString(this.NNI,dos);
					
					// String
				
						writeString(this.Prenom,dos);
					
					// String
				
						writeString(this.Nom_de_Famille,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Naissance,dos);
					
					// String
				
						writeString(this.Lieu_Naissance,dos);
					
					// char
				
		            	dos.writeChar(this.Genre);
					
					// String
				
						writeString(this.Num_Carte,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Deliv,dos);
					
					// String
				
						writeString(this.Num_Serie,dos);
					
					// String
				
						writeString(this.QR_code,dos);
					
					// String
				
						writeString(this.Photo,dos);
					
					// int
				
		            	dos.writeInt(this.score);
					
					// Boolean
				
						if(this.numSerieVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.numSerieVerified);
		            	}
					
					// Boolean
				
						if(this.inamVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.inamVerified);
		            	}
					
					// Boolean
				
						if(this.nniVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.nniVerified);
		            	}
					
					// Boolean
				
						if(this.prenomVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.prenomVerified);
		            	}
					
					// Boolean
				
						if(this.nomdefamilleVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.nomdefamilleVerified);
		            	}
					
					// Boolean
				
						if(this.genreVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.genreVerified);
		            	}
					
					// Boolean
				
						if(this.numcarteVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.numcarteVerified);
		            	}
					
					// Boolean
				
						if(this.qrCodeVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.qrCodeVerified);
		            	}
					
					// Boolean
				
						if(this.photoVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.photoVerified);
		            	}
					
					// String
				
						writeString(this.extension,dos);
					
					// String
				
						writeString(this.PhotoPath,dos);
					
					// Boolean
				
						if(this.scoreVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.scoreVerified);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("INAM="+INAM);
		sb.append(",NNI="+NNI);
		sb.append(",Prenom="+Prenom);
		sb.append(",Nom_de_Famille="+Nom_de_Famille);
		sb.append(",Date_Naissance="+String.valueOf(Date_Naissance));
		sb.append(",Lieu_Naissance="+Lieu_Naissance);
		sb.append(",Genre="+String.valueOf(Genre));
		sb.append(",Num_Carte="+Num_Carte);
		sb.append(",Date_Deliv="+String.valueOf(Date_Deliv));
		sb.append(",Num_Serie="+Num_Serie);
		sb.append(",QR_code="+QR_code);
		sb.append(",Photo="+Photo);
		sb.append(",score="+String.valueOf(score));
		sb.append(",numSerieVerified="+String.valueOf(numSerieVerified));
		sb.append(",inamVerified="+String.valueOf(inamVerified));
		sb.append(",nniVerified="+String.valueOf(nniVerified));
		sb.append(",prenomVerified="+String.valueOf(prenomVerified));
		sb.append(",nomdefamilleVerified="+String.valueOf(nomdefamilleVerified));
		sb.append(",genreVerified="+String.valueOf(genreVerified));
		sb.append(",numcarteVerified="+String.valueOf(numcarteVerified));
		sb.append(",qrCodeVerified="+String.valueOf(qrCodeVerified));
		sb.append(",photoVerified="+String.valueOf(photoVerified));
		sb.append(",extension="+extension);
		sb.append(",PhotoPath="+PhotoPath);
		sb.append(",scoreVerified="+String.valueOf(scoreVerified));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row24Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row25Struct implements routines.system.IPersistableRow<row25Struct> {
    final static byte[] commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];
    static byte[] commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];

	
			    public String INAM;

				public String getINAM () {
					return this.INAM;
				}
				
			    public String NNI;

				public String getNNI () {
					return this.NNI;
				}
				
			    public String Prenom;

				public String getPrenom () {
					return this.Prenom;
				}
				
			    public String Nom_de_Famille;

				public String getNom_de_Famille () {
					return this.Nom_de_Famille;
				}
				
			    public java.util.Date Date_Naissance;

				public java.util.Date getDate_Naissance () {
					return this.Date_Naissance;
				}
				
			    public String Lieu_Naissance;

				public String getLieu_Naissance () {
					return this.Lieu_Naissance;
				}
				
			    public char Genre = ' ';

				public char getGenre () {
					return this.Genre;
				}
				
			    public String Num_Carte;

				public String getNum_Carte () {
					return this.Num_Carte;
				}
				
			    public java.util.Date Date_Deliv;

				public java.util.Date getDate_Deliv () {
					return this.Date_Deliv;
				}
				
			    public String Num_Serie;

				public String getNum_Serie () {
					return this.Num_Serie;
				}
				
			    public String QR_code;

				public String getQR_code () {
					return this.QR_code;
				}
				
			    public String Photo;

				public String getPhoto () {
					return this.Photo;
				}
				
			    public int score;

				public int getScore () {
					return this.score;
				}
				
			    public Boolean numSerieVerified;

				public Boolean getNumSerieVerified () {
					return this.numSerieVerified;
				}
				
			    public Boolean inamVerified;

				public Boolean getInamVerified () {
					return this.inamVerified;
				}
				
			    public Boolean nniVerified;

				public Boolean getNniVerified () {
					return this.nniVerified;
				}
				
			    public Boolean prenomVerified;

				public Boolean getPrenomVerified () {
					return this.prenomVerified;
				}
				
			    public Boolean nomdefamilleVerified;

				public Boolean getNomdefamilleVerified () {
					return this.nomdefamilleVerified;
				}
				
			    public Boolean genreVerified;

				public Boolean getGenreVerified () {
					return this.genreVerified;
				}
				
			    public Boolean numcarteVerified;

				public Boolean getNumcarteVerified () {
					return this.numcarteVerified;
				}
				
			    public Boolean qrCodeVerified;

				public Boolean getQrCodeVerified () {
					return this.qrCodeVerified;
				}
				
			    public Boolean photoVerified;

				public Boolean getPhotoVerified () {
					return this.photoVerified;
				}
				
			    public String extension;

				public String getExtension () {
					return this.extension;
				}
				
			    public String PhotoPath;

				public String getPhotoPath () {
					return this.PhotoPath;
				}
				
			    public Boolean scoreVerified;

				public Boolean getScoreVerified () {
					return this.scoreVerified;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length) {
				if(length < 1024 && commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length == 0) {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[1024];
				} else {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length);
			strReturn = new String(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing) {

        	try {

        		int length = 0;
		
					this.INAM = readString(dis);
					
					this.NNI = readString(dis);
					
					this.Prenom = readString(dis);
					
					this.Nom_de_Famille = readString(dis);
					
					this.Date_Naissance = readDate(dis);
					
					this.Lieu_Naissance = readString(dis);
					
			        this.Genre = dis.readChar();
					
					this.Num_Carte = readString(dis);
					
					this.Date_Deliv = readDate(dis);
					
					this.Num_Serie = readString(dis);
					
					this.QR_code = readString(dis);
					
					this.Photo = readString(dis);
					
			        this.score = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.numSerieVerified = null;
           				} else {
           			    	this.numSerieVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.inamVerified = null;
           				} else {
           			    	this.inamVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nniVerified = null;
           				} else {
           			    	this.nniVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.prenomVerified = null;
           				} else {
           			    	this.prenomVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nomdefamilleVerified = null;
           				} else {
           			    	this.nomdefamilleVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.genreVerified = null;
           				} else {
           			    	this.genreVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.numcarteVerified = null;
           				} else {
           			    	this.numcarteVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.qrCodeVerified = null;
           				} else {
           			    	this.qrCodeVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.photoVerified = null;
           				} else {
           			    	this.photoVerified = dis.readBoolean();
           				}
					
					this.extension = readString(dis);
					
					this.PhotoPath = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.scoreVerified = null;
           				} else {
           			    	this.scoreVerified = dis.readBoolean();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.INAM,dos);
					
					// String
				
						writeString(this.NNI,dos);
					
					// String
				
						writeString(this.Prenom,dos);
					
					// String
				
						writeString(this.Nom_de_Famille,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Naissance,dos);
					
					// String
				
						writeString(this.Lieu_Naissance,dos);
					
					// char
				
		            	dos.writeChar(this.Genre);
					
					// String
				
						writeString(this.Num_Carte,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Deliv,dos);
					
					// String
				
						writeString(this.Num_Serie,dos);
					
					// String
				
						writeString(this.QR_code,dos);
					
					// String
				
						writeString(this.Photo,dos);
					
					// int
				
		            	dos.writeInt(this.score);
					
					// Boolean
				
						if(this.numSerieVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.numSerieVerified);
		            	}
					
					// Boolean
				
						if(this.inamVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.inamVerified);
		            	}
					
					// Boolean
				
						if(this.nniVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.nniVerified);
		            	}
					
					// Boolean
				
						if(this.prenomVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.prenomVerified);
		            	}
					
					// Boolean
				
						if(this.nomdefamilleVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.nomdefamilleVerified);
		            	}
					
					// Boolean
				
						if(this.genreVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.genreVerified);
		            	}
					
					// Boolean
				
						if(this.numcarteVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.numcarteVerified);
		            	}
					
					// Boolean
				
						if(this.qrCodeVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.qrCodeVerified);
		            	}
					
					// Boolean
				
						if(this.photoVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.photoVerified);
		            	}
					
					// String
				
						writeString(this.extension,dos);
					
					// String
				
						writeString(this.PhotoPath,dos);
					
					// Boolean
				
						if(this.scoreVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.scoreVerified);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("INAM="+INAM);
		sb.append(",NNI="+NNI);
		sb.append(",Prenom="+Prenom);
		sb.append(",Nom_de_Famille="+Nom_de_Famille);
		sb.append(",Date_Naissance="+String.valueOf(Date_Naissance));
		sb.append(",Lieu_Naissance="+Lieu_Naissance);
		sb.append(",Genre="+String.valueOf(Genre));
		sb.append(",Num_Carte="+Num_Carte);
		sb.append(",Date_Deliv="+String.valueOf(Date_Deliv));
		sb.append(",Num_Serie="+Num_Serie);
		sb.append(",QR_code="+QR_code);
		sb.append(",Photo="+Photo);
		sb.append(",score="+String.valueOf(score));
		sb.append(",numSerieVerified="+String.valueOf(numSerieVerified));
		sb.append(",inamVerified="+String.valueOf(inamVerified));
		sb.append(",nniVerified="+String.valueOf(nniVerified));
		sb.append(",prenomVerified="+String.valueOf(prenomVerified));
		sb.append(",nomdefamilleVerified="+String.valueOf(nomdefamilleVerified));
		sb.append(",genreVerified="+String.valueOf(genreVerified));
		sb.append(",numcarteVerified="+String.valueOf(numcarteVerified));
		sb.append(",qrCodeVerified="+String.valueOf(qrCodeVerified));
		sb.append(",photoVerified="+String.valueOf(photoVerified));
		sb.append(",extension="+extension);
		sb.append(",PhotoPath="+PhotoPath);
		sb.append(",scoreVerified="+String.valueOf(scoreVerified));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row25Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row21Struct implements routines.system.IPersistableRow<row21Struct> {
    final static byte[] commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];
    static byte[] commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];

	
			    public String INAM;

				public String getINAM () {
					return this.INAM;
				}
				
			    public String NNI;

				public String getNNI () {
					return this.NNI;
				}
				
			    public String Prenom;

				public String getPrenom () {
					return this.Prenom;
				}
				
			    public String Nom_de_Famille;

				public String getNom_de_Famille () {
					return this.Nom_de_Famille;
				}
				
			    public java.util.Date Date_Naissance;

				public java.util.Date getDate_Naissance () {
					return this.Date_Naissance;
				}
				
			    public String Lieu_Naissance;

				public String getLieu_Naissance () {
					return this.Lieu_Naissance;
				}
				
			    public char Genre = ' ';

				public char getGenre () {
					return this.Genre;
				}
				
			    public String Num_Carte;

				public String getNum_Carte () {
					return this.Num_Carte;
				}
				
			    public java.util.Date Date_Deliv;

				public java.util.Date getDate_Deliv () {
					return this.Date_Deliv;
				}
				
			    public String Num_Serie;

				public String getNum_Serie () {
					return this.Num_Serie;
				}
				
			    public String QR_code;

				public String getQR_code () {
					return this.QR_code;
				}
				
			    public String Photo;

				public String getPhoto () {
					return this.Photo;
				}
				
			    public int score;

				public int getScore () {
					return this.score;
				}
				
			    public Boolean numSerieVerified;

				public Boolean getNumSerieVerified () {
					return this.numSerieVerified;
				}
				
			    public Boolean inamVerified;

				public Boolean getInamVerified () {
					return this.inamVerified;
				}
				
			    public Boolean nniVerified;

				public Boolean getNniVerified () {
					return this.nniVerified;
				}
				
			    public Boolean prenomVerified;

				public Boolean getPrenomVerified () {
					return this.prenomVerified;
				}
				
			    public Boolean nomdefamilleVerified;

				public Boolean getNomdefamilleVerified () {
					return this.nomdefamilleVerified;
				}
				
			    public Boolean genreVerified;

				public Boolean getGenreVerified () {
					return this.genreVerified;
				}
				
			    public Boolean numcarteVerified;

				public Boolean getNumcarteVerified () {
					return this.numcarteVerified;
				}
				
			    public Boolean qrCodeVerified;

				public Boolean getQrCodeVerified () {
					return this.qrCodeVerified;
				}
				
			    public Boolean photoVerified;

				public Boolean getPhotoVerified () {
					return this.photoVerified;
				}
				
			    public String extension;

				public String getExtension () {
					return this.extension;
				}
				
			    public String PhotoPath;

				public String getPhotoPath () {
					return this.PhotoPath;
				}
				
			    public Boolean scoreVerified;

				public Boolean getScoreVerified () {
					return this.scoreVerified;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length) {
				if(length < 1024 && commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length == 0) {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[1024];
				} else {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length);
			strReturn = new String(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing) {

        	try {

        		int length = 0;
		
					this.INAM = readString(dis);
					
					this.NNI = readString(dis);
					
					this.Prenom = readString(dis);
					
					this.Nom_de_Famille = readString(dis);
					
					this.Date_Naissance = readDate(dis);
					
					this.Lieu_Naissance = readString(dis);
					
			        this.Genre = dis.readChar();
					
					this.Num_Carte = readString(dis);
					
					this.Date_Deliv = readDate(dis);
					
					this.Num_Serie = readString(dis);
					
					this.QR_code = readString(dis);
					
					this.Photo = readString(dis);
					
			        this.score = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.numSerieVerified = null;
           				} else {
           			    	this.numSerieVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.inamVerified = null;
           				} else {
           			    	this.inamVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nniVerified = null;
           				} else {
           			    	this.nniVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.prenomVerified = null;
           				} else {
           			    	this.prenomVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nomdefamilleVerified = null;
           				} else {
           			    	this.nomdefamilleVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.genreVerified = null;
           				} else {
           			    	this.genreVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.numcarteVerified = null;
           				} else {
           			    	this.numcarteVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.qrCodeVerified = null;
           				} else {
           			    	this.qrCodeVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.photoVerified = null;
           				} else {
           			    	this.photoVerified = dis.readBoolean();
           				}
					
					this.extension = readString(dis);
					
					this.PhotoPath = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.scoreVerified = null;
           				} else {
           			    	this.scoreVerified = dis.readBoolean();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.INAM,dos);
					
					// String
				
						writeString(this.NNI,dos);
					
					// String
				
						writeString(this.Prenom,dos);
					
					// String
				
						writeString(this.Nom_de_Famille,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Naissance,dos);
					
					// String
				
						writeString(this.Lieu_Naissance,dos);
					
					// char
				
		            	dos.writeChar(this.Genre);
					
					// String
				
						writeString(this.Num_Carte,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Deliv,dos);
					
					// String
				
						writeString(this.Num_Serie,dos);
					
					// String
				
						writeString(this.QR_code,dos);
					
					// String
				
						writeString(this.Photo,dos);
					
					// int
				
		            	dos.writeInt(this.score);
					
					// Boolean
				
						if(this.numSerieVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.numSerieVerified);
		            	}
					
					// Boolean
				
						if(this.inamVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.inamVerified);
		            	}
					
					// Boolean
				
						if(this.nniVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.nniVerified);
		            	}
					
					// Boolean
				
						if(this.prenomVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.prenomVerified);
		            	}
					
					// Boolean
				
						if(this.nomdefamilleVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.nomdefamilleVerified);
		            	}
					
					// Boolean
				
						if(this.genreVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.genreVerified);
		            	}
					
					// Boolean
				
						if(this.numcarteVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.numcarteVerified);
		            	}
					
					// Boolean
				
						if(this.qrCodeVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.qrCodeVerified);
		            	}
					
					// Boolean
				
						if(this.photoVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.photoVerified);
		            	}
					
					// String
				
						writeString(this.extension,dos);
					
					// String
				
						writeString(this.PhotoPath,dos);
					
					// Boolean
				
						if(this.scoreVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.scoreVerified);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("INAM="+INAM);
		sb.append(",NNI="+NNI);
		sb.append(",Prenom="+Prenom);
		sb.append(",Nom_de_Famille="+Nom_de_Famille);
		sb.append(",Date_Naissance="+String.valueOf(Date_Naissance));
		sb.append(",Lieu_Naissance="+Lieu_Naissance);
		sb.append(",Genre="+String.valueOf(Genre));
		sb.append(",Num_Carte="+Num_Carte);
		sb.append(",Date_Deliv="+String.valueOf(Date_Deliv));
		sb.append(",Num_Serie="+Num_Serie);
		sb.append(",QR_code="+QR_code);
		sb.append(",Photo="+Photo);
		sb.append(",score="+String.valueOf(score));
		sb.append(",numSerieVerified="+String.valueOf(numSerieVerified));
		sb.append(",inamVerified="+String.valueOf(inamVerified));
		sb.append(",nniVerified="+String.valueOf(nniVerified));
		sb.append(",prenomVerified="+String.valueOf(prenomVerified));
		sb.append(",nomdefamilleVerified="+String.valueOf(nomdefamilleVerified));
		sb.append(",genreVerified="+String.valueOf(genreVerified));
		sb.append(",numcarteVerified="+String.valueOf(numcarteVerified));
		sb.append(",qrCodeVerified="+String.valueOf(qrCodeVerified));
		sb.append(",photoVerified="+String.valueOf(photoVerified));
		sb.append(",extension="+extension);
		sb.append(",PhotoPath="+PhotoPath);
		sb.append(",scoreVerified="+String.valueOf(scoreVerified));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row21Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row20Struct implements routines.system.IPersistableRow<row20Struct> {
    final static byte[] commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];
    static byte[] commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];

	
			    public String INAM;

				public String getINAM () {
					return this.INAM;
				}
				
			    public String NNI;

				public String getNNI () {
					return this.NNI;
				}
				
			    public String Prenom;

				public String getPrenom () {
					return this.Prenom;
				}
				
			    public String Nom_de_Famille;

				public String getNom_de_Famille () {
					return this.Nom_de_Famille;
				}
				
			    public java.util.Date Date_Naissance;

				public java.util.Date getDate_Naissance () {
					return this.Date_Naissance;
				}
				
			    public String Lieu_Naissance;

				public String getLieu_Naissance () {
					return this.Lieu_Naissance;
				}
				
			    public char Genre = ' ';

				public char getGenre () {
					return this.Genre;
				}
				
			    public String Num_Carte;

				public String getNum_Carte () {
					return this.Num_Carte;
				}
				
			    public java.util.Date Date_Deliv;

				public java.util.Date getDate_Deliv () {
					return this.Date_Deliv;
				}
				
			    public String Num_Serie;

				public String getNum_Serie () {
					return this.Num_Serie;
				}
				
			    public String QR_code;

				public String getQR_code () {
					return this.QR_code;
				}
				
			    public String Photo;

				public String getPhoto () {
					return this.Photo;
				}
				
			    public int score;

				public int getScore () {
					return this.score;
				}
				
			    public Boolean numSerieVerified;

				public Boolean getNumSerieVerified () {
					return this.numSerieVerified;
				}
				
			    public Boolean inamVerified;

				public Boolean getInamVerified () {
					return this.inamVerified;
				}
				
			    public Boolean nniVerified;

				public Boolean getNniVerified () {
					return this.nniVerified;
				}
				
			    public Boolean prenomVerified;

				public Boolean getPrenomVerified () {
					return this.prenomVerified;
				}
				
			    public Boolean nomdefamilleVerified;

				public Boolean getNomdefamilleVerified () {
					return this.nomdefamilleVerified;
				}
				
			    public Boolean genreVerified;

				public Boolean getGenreVerified () {
					return this.genreVerified;
				}
				
			    public Boolean numcarteVerified;

				public Boolean getNumcarteVerified () {
					return this.numcarteVerified;
				}
				
			    public Boolean qrCodeVerified;

				public Boolean getQrCodeVerified () {
					return this.qrCodeVerified;
				}
				
			    public Boolean photoVerified;

				public Boolean getPhotoVerified () {
					return this.photoVerified;
				}
				
			    public String extension;

				public String getExtension () {
					return this.extension;
				}
				
			    public String PhotoPath;

				public String getPhotoPath () {
					return this.PhotoPath;
				}
				
			    public Boolean scoreVerified;

				public Boolean getScoreVerified () {
					return this.scoreVerified;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length) {
				if(length < 1024 && commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length == 0) {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[1024];
				} else {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length);
			strReturn = new String(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing) {

        	try {

        		int length = 0;
		
					this.INAM = readString(dis);
					
					this.NNI = readString(dis);
					
					this.Prenom = readString(dis);
					
					this.Nom_de_Famille = readString(dis);
					
					this.Date_Naissance = readDate(dis);
					
					this.Lieu_Naissance = readString(dis);
					
			        this.Genre = dis.readChar();
					
					this.Num_Carte = readString(dis);
					
					this.Date_Deliv = readDate(dis);
					
					this.Num_Serie = readString(dis);
					
					this.QR_code = readString(dis);
					
					this.Photo = readString(dis);
					
			        this.score = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.numSerieVerified = null;
           				} else {
           			    	this.numSerieVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.inamVerified = null;
           				} else {
           			    	this.inamVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nniVerified = null;
           				} else {
           			    	this.nniVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.prenomVerified = null;
           				} else {
           			    	this.prenomVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nomdefamilleVerified = null;
           				} else {
           			    	this.nomdefamilleVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.genreVerified = null;
           				} else {
           			    	this.genreVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.numcarteVerified = null;
           				} else {
           			    	this.numcarteVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.qrCodeVerified = null;
           				} else {
           			    	this.qrCodeVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.photoVerified = null;
           				} else {
           			    	this.photoVerified = dis.readBoolean();
           				}
					
					this.extension = readString(dis);
					
					this.PhotoPath = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.scoreVerified = null;
           				} else {
           			    	this.scoreVerified = dis.readBoolean();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.INAM,dos);
					
					// String
				
						writeString(this.NNI,dos);
					
					// String
				
						writeString(this.Prenom,dos);
					
					// String
				
						writeString(this.Nom_de_Famille,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Naissance,dos);
					
					// String
				
						writeString(this.Lieu_Naissance,dos);
					
					// char
				
		            	dos.writeChar(this.Genre);
					
					// String
				
						writeString(this.Num_Carte,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Deliv,dos);
					
					// String
				
						writeString(this.Num_Serie,dos);
					
					// String
				
						writeString(this.QR_code,dos);
					
					// String
				
						writeString(this.Photo,dos);
					
					// int
				
		            	dos.writeInt(this.score);
					
					// Boolean
				
						if(this.numSerieVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.numSerieVerified);
		            	}
					
					// Boolean
				
						if(this.inamVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.inamVerified);
		            	}
					
					// Boolean
				
						if(this.nniVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.nniVerified);
		            	}
					
					// Boolean
				
						if(this.prenomVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.prenomVerified);
		            	}
					
					// Boolean
				
						if(this.nomdefamilleVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.nomdefamilleVerified);
		            	}
					
					// Boolean
				
						if(this.genreVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.genreVerified);
		            	}
					
					// Boolean
				
						if(this.numcarteVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.numcarteVerified);
		            	}
					
					// Boolean
				
						if(this.qrCodeVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.qrCodeVerified);
		            	}
					
					// Boolean
				
						if(this.photoVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.photoVerified);
		            	}
					
					// String
				
						writeString(this.extension,dos);
					
					// String
				
						writeString(this.PhotoPath,dos);
					
					// Boolean
				
						if(this.scoreVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.scoreVerified);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("INAM="+INAM);
		sb.append(",NNI="+NNI);
		sb.append(",Prenom="+Prenom);
		sb.append(",Nom_de_Famille="+Nom_de_Famille);
		sb.append(",Date_Naissance="+String.valueOf(Date_Naissance));
		sb.append(",Lieu_Naissance="+Lieu_Naissance);
		sb.append(",Genre="+String.valueOf(Genre));
		sb.append(",Num_Carte="+Num_Carte);
		sb.append(",Date_Deliv="+String.valueOf(Date_Deliv));
		sb.append(",Num_Serie="+Num_Serie);
		sb.append(",QR_code="+QR_code);
		sb.append(",Photo="+Photo);
		sb.append(",score="+String.valueOf(score));
		sb.append(",numSerieVerified="+String.valueOf(numSerieVerified));
		sb.append(",inamVerified="+String.valueOf(inamVerified));
		sb.append(",nniVerified="+String.valueOf(nniVerified));
		sb.append(",prenomVerified="+String.valueOf(prenomVerified));
		sb.append(",nomdefamilleVerified="+String.valueOf(nomdefamilleVerified));
		sb.append(",genreVerified="+String.valueOf(genreVerified));
		sb.append(",numcarteVerified="+String.valueOf(numcarteVerified));
		sb.append(",qrCodeVerified="+String.valueOf(qrCodeVerified));
		sb.append(",photoVerified="+String.valueOf(photoVerified));
		sb.append(",extension="+extension);
		sb.append(",PhotoPath="+PhotoPath);
		sb.append(",scoreVerified="+String.valueOf(scoreVerified));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row20Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row19Struct implements routines.system.IPersistableRow<row19Struct> {
    final static byte[] commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];
    static byte[] commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];

	
			    public String INAM;

				public String getINAM () {
					return this.INAM;
				}
				
			    public String NNI;

				public String getNNI () {
					return this.NNI;
				}
				
			    public String Prenom;

				public String getPrenom () {
					return this.Prenom;
				}
				
			    public String Nom_de_Famille;

				public String getNom_de_Famille () {
					return this.Nom_de_Famille;
				}
				
			    public java.util.Date Date_Naissance;

				public java.util.Date getDate_Naissance () {
					return this.Date_Naissance;
				}
				
			    public String Lieu_Naissance;

				public String getLieu_Naissance () {
					return this.Lieu_Naissance;
				}
				
			    public char Genre = ' ';

				public char getGenre () {
					return this.Genre;
				}
				
			    public String Num_Carte;

				public String getNum_Carte () {
					return this.Num_Carte;
				}
				
			    public java.util.Date Date_Deliv;

				public java.util.Date getDate_Deliv () {
					return this.Date_Deliv;
				}
				
			    public String Num_Serie;

				public String getNum_Serie () {
					return this.Num_Serie;
				}
				
			    public String QR_code;

				public String getQR_code () {
					return this.QR_code;
				}
				
			    public String Photo;

				public String getPhoto () {
					return this.Photo;
				}
				
			    public int score;

				public int getScore () {
					return this.score;
				}
				
			    public Boolean numSerieVerified;

				public Boolean getNumSerieVerified () {
					return this.numSerieVerified;
				}
				
			    public Boolean inamVerified;

				public Boolean getInamVerified () {
					return this.inamVerified;
				}
				
			    public Boolean nniVerified;

				public Boolean getNniVerified () {
					return this.nniVerified;
				}
				
			    public Boolean prenomVerified;

				public Boolean getPrenomVerified () {
					return this.prenomVerified;
				}
				
			    public Boolean nomdefamilleVerified;

				public Boolean getNomdefamilleVerified () {
					return this.nomdefamilleVerified;
				}
				
			    public Boolean genreVerified;

				public Boolean getGenreVerified () {
					return this.genreVerified;
				}
				
			    public Boolean numcarteVerified;

				public Boolean getNumcarteVerified () {
					return this.numcarteVerified;
				}
				
			    public Boolean qrCodeVerified;

				public Boolean getQrCodeVerified () {
					return this.qrCodeVerified;
				}
				
			    public Boolean photoVerified;

				public Boolean getPhotoVerified () {
					return this.photoVerified;
				}
				
			    public String extension;

				public String getExtension () {
					return this.extension;
				}
				
			    public String PhotoPath;

				public String getPhotoPath () {
					return this.PhotoPath;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length) {
				if(length < 1024 && commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length == 0) {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[1024];
				} else {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length);
			strReturn = new String(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing) {

        	try {

        		int length = 0;
		
					this.INAM = readString(dis);
					
					this.NNI = readString(dis);
					
					this.Prenom = readString(dis);
					
					this.Nom_de_Famille = readString(dis);
					
					this.Date_Naissance = readDate(dis);
					
					this.Lieu_Naissance = readString(dis);
					
			        this.Genre = dis.readChar();
					
					this.Num_Carte = readString(dis);
					
					this.Date_Deliv = readDate(dis);
					
					this.Num_Serie = readString(dis);
					
					this.QR_code = readString(dis);
					
					this.Photo = readString(dis);
					
			        this.score = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.numSerieVerified = null;
           				} else {
           			    	this.numSerieVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.inamVerified = null;
           				} else {
           			    	this.inamVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nniVerified = null;
           				} else {
           			    	this.nniVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.prenomVerified = null;
           				} else {
           			    	this.prenomVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nomdefamilleVerified = null;
           				} else {
           			    	this.nomdefamilleVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.genreVerified = null;
           				} else {
           			    	this.genreVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.numcarteVerified = null;
           				} else {
           			    	this.numcarteVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.qrCodeVerified = null;
           				} else {
           			    	this.qrCodeVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.photoVerified = null;
           				} else {
           			    	this.photoVerified = dis.readBoolean();
           				}
					
					this.extension = readString(dis);
					
					this.PhotoPath = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.INAM,dos);
					
					// String
				
						writeString(this.NNI,dos);
					
					// String
				
						writeString(this.Prenom,dos);
					
					// String
				
						writeString(this.Nom_de_Famille,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Naissance,dos);
					
					// String
				
						writeString(this.Lieu_Naissance,dos);
					
					// char
				
		            	dos.writeChar(this.Genre);
					
					// String
				
						writeString(this.Num_Carte,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Deliv,dos);
					
					// String
				
						writeString(this.Num_Serie,dos);
					
					// String
				
						writeString(this.QR_code,dos);
					
					// String
				
						writeString(this.Photo,dos);
					
					// int
				
		            	dos.writeInt(this.score);
					
					// Boolean
				
						if(this.numSerieVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.numSerieVerified);
		            	}
					
					// Boolean
				
						if(this.inamVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.inamVerified);
		            	}
					
					// Boolean
				
						if(this.nniVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.nniVerified);
		            	}
					
					// Boolean
				
						if(this.prenomVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.prenomVerified);
		            	}
					
					// Boolean
				
						if(this.nomdefamilleVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.nomdefamilleVerified);
		            	}
					
					// Boolean
				
						if(this.genreVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.genreVerified);
		            	}
					
					// Boolean
				
						if(this.numcarteVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.numcarteVerified);
		            	}
					
					// Boolean
				
						if(this.qrCodeVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.qrCodeVerified);
		            	}
					
					// Boolean
				
						if(this.photoVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.photoVerified);
		            	}
					
					// String
				
						writeString(this.extension,dos);
					
					// String
				
						writeString(this.PhotoPath,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("INAM="+INAM);
		sb.append(",NNI="+NNI);
		sb.append(",Prenom="+Prenom);
		sb.append(",Nom_de_Famille="+Nom_de_Famille);
		sb.append(",Date_Naissance="+String.valueOf(Date_Naissance));
		sb.append(",Lieu_Naissance="+Lieu_Naissance);
		sb.append(",Genre="+String.valueOf(Genre));
		sb.append(",Num_Carte="+Num_Carte);
		sb.append(",Date_Deliv="+String.valueOf(Date_Deliv));
		sb.append(",Num_Serie="+Num_Serie);
		sb.append(",QR_code="+QR_code);
		sb.append(",Photo="+Photo);
		sb.append(",score="+String.valueOf(score));
		sb.append(",numSerieVerified="+String.valueOf(numSerieVerified));
		sb.append(",inamVerified="+String.valueOf(inamVerified));
		sb.append(",nniVerified="+String.valueOf(nniVerified));
		sb.append(",prenomVerified="+String.valueOf(prenomVerified));
		sb.append(",nomdefamilleVerified="+String.valueOf(nomdefamilleVerified));
		sb.append(",genreVerified="+String.valueOf(genreVerified));
		sb.append(",numcarteVerified="+String.valueOf(numcarteVerified));
		sb.append(",qrCodeVerified="+String.valueOf(qrCodeVerified));
		sb.append(",photoVerified="+String.valueOf(photoVerified));
		sb.append(",extension="+extension);
		sb.append(",PhotoPath="+PhotoPath);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row19Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row18Struct implements routines.system.IPersistableRow<row18Struct> {
    final static byte[] commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];
    static byte[] commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];

	
			    public String INAM;

				public String getINAM () {
					return this.INAM;
				}
				
			    public String NNI;

				public String getNNI () {
					return this.NNI;
				}
				
			    public String Prenom;

				public String getPrenom () {
					return this.Prenom;
				}
				
			    public String Nom_de_Famille;

				public String getNom_de_Famille () {
					return this.Nom_de_Famille;
				}
				
			    public java.util.Date Date_Naissance;

				public java.util.Date getDate_Naissance () {
					return this.Date_Naissance;
				}
				
			    public String Lieu_Naissance;

				public String getLieu_Naissance () {
					return this.Lieu_Naissance;
				}
				
			    public char Genre = ' ';

				public char getGenre () {
					return this.Genre;
				}
				
			    public String Num_Carte;

				public String getNum_Carte () {
					return this.Num_Carte;
				}
				
			    public java.util.Date Date_Deliv;

				public java.util.Date getDate_Deliv () {
					return this.Date_Deliv;
				}
				
			    public String Num_Serie;

				public String getNum_Serie () {
					return this.Num_Serie;
				}
				
			    public String QR_code;

				public String getQR_code () {
					return this.QR_code;
				}
				
			    public String Photo;

				public String getPhoto () {
					return this.Photo;
				}
				
			    public int score;

				public int getScore () {
					return this.score;
				}
				
			    public Boolean numSerieVerified;

				public Boolean getNumSerieVerified () {
					return this.numSerieVerified;
				}
				
			    public Boolean inamVerified;

				public Boolean getInamVerified () {
					return this.inamVerified;
				}
				
			    public Boolean nniVerified;

				public Boolean getNniVerified () {
					return this.nniVerified;
				}
				
			    public Boolean prenomVerified;

				public Boolean getPrenomVerified () {
					return this.prenomVerified;
				}
				
			    public Boolean nomdefamilleVerified;

				public Boolean getNomdefamilleVerified () {
					return this.nomdefamilleVerified;
				}
				
			    public Boolean genreVerified;

				public Boolean getGenreVerified () {
					return this.genreVerified;
				}
				
			    public Boolean numcarteVerified;

				public Boolean getNumcarteVerified () {
					return this.numcarteVerified;
				}
				
			    public Boolean qrCodeVerified;

				public Boolean getQrCodeVerified () {
					return this.qrCodeVerified;
				}
				
			    public Boolean photoVerified;

				public Boolean getPhotoVerified () {
					return this.photoVerified;
				}
				
			    public String extension;

				public String getExtension () {
					return this.extension;
				}
				
			    public String PhotoPath;

				public String getPhotoPath () {
					return this.PhotoPath;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length) {
				if(length < 1024 && commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length == 0) {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[1024];
				} else {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length);
			strReturn = new String(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing) {

        	try {

        		int length = 0;
		
					this.INAM = readString(dis);
					
					this.NNI = readString(dis);
					
					this.Prenom = readString(dis);
					
					this.Nom_de_Famille = readString(dis);
					
					this.Date_Naissance = readDate(dis);
					
					this.Lieu_Naissance = readString(dis);
					
			        this.Genre = dis.readChar();
					
					this.Num_Carte = readString(dis);
					
					this.Date_Deliv = readDate(dis);
					
					this.Num_Serie = readString(dis);
					
					this.QR_code = readString(dis);
					
					this.Photo = readString(dis);
					
			        this.score = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.numSerieVerified = null;
           				} else {
           			    	this.numSerieVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.inamVerified = null;
           				} else {
           			    	this.inamVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nniVerified = null;
           				} else {
           			    	this.nniVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.prenomVerified = null;
           				} else {
           			    	this.prenomVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nomdefamilleVerified = null;
           				} else {
           			    	this.nomdefamilleVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.genreVerified = null;
           				} else {
           			    	this.genreVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.numcarteVerified = null;
           				} else {
           			    	this.numcarteVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.qrCodeVerified = null;
           				} else {
           			    	this.qrCodeVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.photoVerified = null;
           				} else {
           			    	this.photoVerified = dis.readBoolean();
           				}
					
					this.extension = readString(dis);
					
					this.PhotoPath = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.INAM,dos);
					
					// String
				
						writeString(this.NNI,dos);
					
					// String
				
						writeString(this.Prenom,dos);
					
					// String
				
						writeString(this.Nom_de_Famille,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Naissance,dos);
					
					// String
				
						writeString(this.Lieu_Naissance,dos);
					
					// char
				
		            	dos.writeChar(this.Genre);
					
					// String
				
						writeString(this.Num_Carte,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Deliv,dos);
					
					// String
				
						writeString(this.Num_Serie,dos);
					
					// String
				
						writeString(this.QR_code,dos);
					
					// String
				
						writeString(this.Photo,dos);
					
					// int
				
		            	dos.writeInt(this.score);
					
					// Boolean
				
						if(this.numSerieVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.numSerieVerified);
		            	}
					
					// Boolean
				
						if(this.inamVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.inamVerified);
		            	}
					
					// Boolean
				
						if(this.nniVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.nniVerified);
		            	}
					
					// Boolean
				
						if(this.prenomVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.prenomVerified);
		            	}
					
					// Boolean
				
						if(this.nomdefamilleVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.nomdefamilleVerified);
		            	}
					
					// Boolean
				
						if(this.genreVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.genreVerified);
		            	}
					
					// Boolean
				
						if(this.numcarteVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.numcarteVerified);
		            	}
					
					// Boolean
				
						if(this.qrCodeVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.qrCodeVerified);
		            	}
					
					// Boolean
				
						if(this.photoVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.photoVerified);
		            	}
					
					// String
				
						writeString(this.extension,dos);
					
					// String
				
						writeString(this.PhotoPath,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("INAM="+INAM);
		sb.append(",NNI="+NNI);
		sb.append(",Prenom="+Prenom);
		sb.append(",Nom_de_Famille="+Nom_de_Famille);
		sb.append(",Date_Naissance="+String.valueOf(Date_Naissance));
		sb.append(",Lieu_Naissance="+Lieu_Naissance);
		sb.append(",Genre="+String.valueOf(Genre));
		sb.append(",Num_Carte="+Num_Carte);
		sb.append(",Date_Deliv="+String.valueOf(Date_Deliv));
		sb.append(",Num_Serie="+Num_Serie);
		sb.append(",QR_code="+QR_code);
		sb.append(",Photo="+Photo);
		sb.append(",score="+String.valueOf(score));
		sb.append(",numSerieVerified="+String.valueOf(numSerieVerified));
		sb.append(",inamVerified="+String.valueOf(inamVerified));
		sb.append(",nniVerified="+String.valueOf(nniVerified));
		sb.append(",prenomVerified="+String.valueOf(prenomVerified));
		sb.append(",nomdefamilleVerified="+String.valueOf(nomdefamilleVerified));
		sb.append(",genreVerified="+String.valueOf(genreVerified));
		sb.append(",numcarteVerified="+String.valueOf(numcarteVerified));
		sb.append(",qrCodeVerified="+String.valueOf(qrCodeVerified));
		sb.append(",photoVerified="+String.valueOf(photoVerified));
		sb.append(",extension="+extension);
		sb.append(",PhotoPath="+PhotoPath);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row18Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row17Struct implements routines.system.IPersistableRow<row17Struct> {
    final static byte[] commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];
    static byte[] commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];

	
			    public String INAM;

				public String getINAM () {
					return this.INAM;
				}
				
			    public String NNI;

				public String getNNI () {
					return this.NNI;
				}
				
			    public String Prenom;

				public String getPrenom () {
					return this.Prenom;
				}
				
			    public String Nom_de_Famille;

				public String getNom_de_Famille () {
					return this.Nom_de_Famille;
				}
				
			    public java.util.Date Date_Naissance;

				public java.util.Date getDate_Naissance () {
					return this.Date_Naissance;
				}
				
			    public String Lieu_Naissance;

				public String getLieu_Naissance () {
					return this.Lieu_Naissance;
				}
				
			    public char Genre = ' ';

				public char getGenre () {
					return this.Genre;
				}
				
			    public String Num_Carte;

				public String getNum_Carte () {
					return this.Num_Carte;
				}
				
			    public java.util.Date Date_Deliv;

				public java.util.Date getDate_Deliv () {
					return this.Date_Deliv;
				}
				
			    public String Num_Serie;

				public String getNum_Serie () {
					return this.Num_Serie;
				}
				
			    public String QR_code;

				public String getQR_code () {
					return this.QR_code;
				}
				
			    public String Photo;

				public String getPhoto () {
					return this.Photo;
				}
				
			    public int score;

				public int getScore () {
					return this.score;
				}
				
			    public Boolean numSerieVerified;

				public Boolean getNumSerieVerified () {
					return this.numSerieVerified;
				}
				
			    public Boolean inamVerified;

				public Boolean getInamVerified () {
					return this.inamVerified;
				}
				
			    public Boolean nniVerified;

				public Boolean getNniVerified () {
					return this.nniVerified;
				}
				
			    public Boolean prenomVerified;

				public Boolean getPrenomVerified () {
					return this.prenomVerified;
				}
				
			    public Boolean nomdefamilleVerified;

				public Boolean getNomdefamilleVerified () {
					return this.nomdefamilleVerified;
				}
				
			    public Boolean genreVerified;

				public Boolean getGenreVerified () {
					return this.genreVerified;
				}
				
			    public Boolean numcarteVerified;

				public Boolean getNumcarteVerified () {
					return this.numcarteVerified;
				}
				
			    public Boolean qrCodeVerified;

				public Boolean getQrCodeVerified () {
					return this.qrCodeVerified;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length) {
				if(length < 1024 && commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length == 0) {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[1024];
				} else {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length);
			strReturn = new String(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing) {

        	try {

        		int length = 0;
		
					this.INAM = readString(dis);
					
					this.NNI = readString(dis);
					
					this.Prenom = readString(dis);
					
					this.Nom_de_Famille = readString(dis);
					
					this.Date_Naissance = readDate(dis);
					
					this.Lieu_Naissance = readString(dis);
					
			        this.Genre = dis.readChar();
					
					this.Num_Carte = readString(dis);
					
					this.Date_Deliv = readDate(dis);
					
					this.Num_Serie = readString(dis);
					
					this.QR_code = readString(dis);
					
					this.Photo = readString(dis);
					
			        this.score = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.numSerieVerified = null;
           				} else {
           			    	this.numSerieVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.inamVerified = null;
           				} else {
           			    	this.inamVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nniVerified = null;
           				} else {
           			    	this.nniVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.prenomVerified = null;
           				} else {
           			    	this.prenomVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nomdefamilleVerified = null;
           				} else {
           			    	this.nomdefamilleVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.genreVerified = null;
           				} else {
           			    	this.genreVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.numcarteVerified = null;
           				} else {
           			    	this.numcarteVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.qrCodeVerified = null;
           				} else {
           			    	this.qrCodeVerified = dis.readBoolean();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.INAM,dos);
					
					// String
				
						writeString(this.NNI,dos);
					
					// String
				
						writeString(this.Prenom,dos);
					
					// String
				
						writeString(this.Nom_de_Famille,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Naissance,dos);
					
					// String
				
						writeString(this.Lieu_Naissance,dos);
					
					// char
				
		            	dos.writeChar(this.Genre);
					
					// String
				
						writeString(this.Num_Carte,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Deliv,dos);
					
					// String
				
						writeString(this.Num_Serie,dos);
					
					// String
				
						writeString(this.QR_code,dos);
					
					// String
				
						writeString(this.Photo,dos);
					
					// int
				
		            	dos.writeInt(this.score);
					
					// Boolean
				
						if(this.numSerieVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.numSerieVerified);
		            	}
					
					// Boolean
				
						if(this.inamVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.inamVerified);
		            	}
					
					// Boolean
				
						if(this.nniVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.nniVerified);
		            	}
					
					// Boolean
				
						if(this.prenomVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.prenomVerified);
		            	}
					
					// Boolean
				
						if(this.nomdefamilleVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.nomdefamilleVerified);
		            	}
					
					// Boolean
				
						if(this.genreVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.genreVerified);
		            	}
					
					// Boolean
				
						if(this.numcarteVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.numcarteVerified);
		            	}
					
					// Boolean
				
						if(this.qrCodeVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.qrCodeVerified);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("INAM="+INAM);
		sb.append(",NNI="+NNI);
		sb.append(",Prenom="+Prenom);
		sb.append(",Nom_de_Famille="+Nom_de_Famille);
		sb.append(",Date_Naissance="+String.valueOf(Date_Naissance));
		sb.append(",Lieu_Naissance="+Lieu_Naissance);
		sb.append(",Genre="+String.valueOf(Genre));
		sb.append(",Num_Carte="+Num_Carte);
		sb.append(",Date_Deliv="+String.valueOf(Date_Deliv));
		sb.append(",Num_Serie="+Num_Serie);
		sb.append(",QR_code="+QR_code);
		sb.append(",Photo="+Photo);
		sb.append(",score="+String.valueOf(score));
		sb.append(",numSerieVerified="+String.valueOf(numSerieVerified));
		sb.append(",inamVerified="+String.valueOf(inamVerified));
		sb.append(",nniVerified="+String.valueOf(nniVerified));
		sb.append(",prenomVerified="+String.valueOf(prenomVerified));
		sb.append(",nomdefamilleVerified="+String.valueOf(nomdefamilleVerified));
		sb.append(",genreVerified="+String.valueOf(genreVerified));
		sb.append(",numcarteVerified="+String.valueOf(numcarteVerified));
		sb.append(",qrCodeVerified="+String.valueOf(qrCodeVerified));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row17Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row16Struct implements routines.system.IPersistableRow<row16Struct> {
    final static byte[] commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];
    static byte[] commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];

	
			    public String INAM;

				public String getINAM () {
					return this.INAM;
				}
				
			    public String NNI;

				public String getNNI () {
					return this.NNI;
				}
				
			    public String Prenom;

				public String getPrenom () {
					return this.Prenom;
				}
				
			    public String Nom_de_Famille;

				public String getNom_de_Famille () {
					return this.Nom_de_Famille;
				}
				
			    public java.util.Date Date_Naissance;

				public java.util.Date getDate_Naissance () {
					return this.Date_Naissance;
				}
				
			    public String Lieu_Naissance;

				public String getLieu_Naissance () {
					return this.Lieu_Naissance;
				}
				
			    public char Genre = ' ';

				public char getGenre () {
					return this.Genre;
				}
				
			    public String Num_Carte;

				public String getNum_Carte () {
					return this.Num_Carte;
				}
				
			    public java.util.Date Date_Deliv;

				public java.util.Date getDate_Deliv () {
					return this.Date_Deliv;
				}
				
			    public String Num_Serie;

				public String getNum_Serie () {
					return this.Num_Serie;
				}
				
			    public String QR_code;

				public String getQR_code () {
					return this.QR_code;
				}
				
			    public String Photo;

				public String getPhoto () {
					return this.Photo;
				}
				
			    public int score;

				public int getScore () {
					return this.score;
				}
				
			    public Boolean numSerieVerified;

				public Boolean getNumSerieVerified () {
					return this.numSerieVerified;
				}
				
			    public Boolean inamVerified;

				public Boolean getInamVerified () {
					return this.inamVerified;
				}
				
			    public Boolean nniVerified;

				public Boolean getNniVerified () {
					return this.nniVerified;
				}
				
			    public Boolean prenomVerified;

				public Boolean getPrenomVerified () {
					return this.prenomVerified;
				}
				
			    public Boolean nomdefamilleVerified;

				public Boolean getNomdefamilleVerified () {
					return this.nomdefamilleVerified;
				}
				
			    public Boolean genreVerified;

				public Boolean getGenreVerified () {
					return this.genreVerified;
				}
				
			    public Boolean numcarteVerified;

				public Boolean getNumcarteVerified () {
					return this.numcarteVerified;
				}
				
			    public Boolean qrCodeVerified;

				public Boolean getQrCodeVerified () {
					return this.qrCodeVerified;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length) {
				if(length < 1024 && commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length == 0) {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[1024];
				} else {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length);
			strReturn = new String(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing) {

        	try {

        		int length = 0;
		
					this.INAM = readString(dis);
					
					this.NNI = readString(dis);
					
					this.Prenom = readString(dis);
					
					this.Nom_de_Famille = readString(dis);
					
					this.Date_Naissance = readDate(dis);
					
					this.Lieu_Naissance = readString(dis);
					
			        this.Genre = dis.readChar();
					
					this.Num_Carte = readString(dis);
					
					this.Date_Deliv = readDate(dis);
					
					this.Num_Serie = readString(dis);
					
					this.QR_code = readString(dis);
					
					this.Photo = readString(dis);
					
			        this.score = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.numSerieVerified = null;
           				} else {
           			    	this.numSerieVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.inamVerified = null;
           				} else {
           			    	this.inamVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nniVerified = null;
           				} else {
           			    	this.nniVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.prenomVerified = null;
           				} else {
           			    	this.prenomVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nomdefamilleVerified = null;
           				} else {
           			    	this.nomdefamilleVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.genreVerified = null;
           				} else {
           			    	this.genreVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.numcarteVerified = null;
           				} else {
           			    	this.numcarteVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.qrCodeVerified = null;
           				} else {
           			    	this.qrCodeVerified = dis.readBoolean();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.INAM,dos);
					
					// String
				
						writeString(this.NNI,dos);
					
					// String
				
						writeString(this.Prenom,dos);
					
					// String
				
						writeString(this.Nom_de_Famille,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Naissance,dos);
					
					// String
				
						writeString(this.Lieu_Naissance,dos);
					
					// char
				
		            	dos.writeChar(this.Genre);
					
					// String
				
						writeString(this.Num_Carte,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Deliv,dos);
					
					// String
				
						writeString(this.Num_Serie,dos);
					
					// String
				
						writeString(this.QR_code,dos);
					
					// String
				
						writeString(this.Photo,dos);
					
					// int
				
		            	dos.writeInt(this.score);
					
					// Boolean
				
						if(this.numSerieVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.numSerieVerified);
		            	}
					
					// Boolean
				
						if(this.inamVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.inamVerified);
		            	}
					
					// Boolean
				
						if(this.nniVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.nniVerified);
		            	}
					
					// Boolean
				
						if(this.prenomVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.prenomVerified);
		            	}
					
					// Boolean
				
						if(this.nomdefamilleVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.nomdefamilleVerified);
		            	}
					
					// Boolean
				
						if(this.genreVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.genreVerified);
		            	}
					
					// Boolean
				
						if(this.numcarteVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.numcarteVerified);
		            	}
					
					// Boolean
				
						if(this.qrCodeVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.qrCodeVerified);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("INAM="+INAM);
		sb.append(",NNI="+NNI);
		sb.append(",Prenom="+Prenom);
		sb.append(",Nom_de_Famille="+Nom_de_Famille);
		sb.append(",Date_Naissance="+String.valueOf(Date_Naissance));
		sb.append(",Lieu_Naissance="+Lieu_Naissance);
		sb.append(",Genre="+String.valueOf(Genre));
		sb.append(",Num_Carte="+Num_Carte);
		sb.append(",Date_Deliv="+String.valueOf(Date_Deliv));
		sb.append(",Num_Serie="+Num_Serie);
		sb.append(",QR_code="+QR_code);
		sb.append(",Photo="+Photo);
		sb.append(",score="+String.valueOf(score));
		sb.append(",numSerieVerified="+String.valueOf(numSerieVerified));
		sb.append(",inamVerified="+String.valueOf(inamVerified));
		sb.append(",nniVerified="+String.valueOf(nniVerified));
		sb.append(",prenomVerified="+String.valueOf(prenomVerified));
		sb.append(",nomdefamilleVerified="+String.valueOf(nomdefamilleVerified));
		sb.append(",genreVerified="+String.valueOf(genreVerified));
		sb.append(",numcarteVerified="+String.valueOf(numcarteVerified));
		sb.append(",qrCodeVerified="+String.valueOf(qrCodeVerified));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row16Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row15Struct implements routines.system.IPersistableRow<row15Struct> {
    final static byte[] commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];
    static byte[] commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];

	
			    public String INAM;

				public String getINAM () {
					return this.INAM;
				}
				
			    public String NNI;

				public String getNNI () {
					return this.NNI;
				}
				
			    public String Prenom;

				public String getPrenom () {
					return this.Prenom;
				}
				
			    public String Nom_de_Famille;

				public String getNom_de_Famille () {
					return this.Nom_de_Famille;
				}
				
			    public java.util.Date Date_Naissance;

				public java.util.Date getDate_Naissance () {
					return this.Date_Naissance;
				}
				
			    public String Lieu_Naissance;

				public String getLieu_Naissance () {
					return this.Lieu_Naissance;
				}
				
			    public char Genre = ' ';

				public char getGenre () {
					return this.Genre;
				}
				
			    public String Num_Carte;

				public String getNum_Carte () {
					return this.Num_Carte;
				}
				
			    public java.util.Date Date_Deliv;

				public java.util.Date getDate_Deliv () {
					return this.Date_Deliv;
				}
				
			    public String Num_Serie;

				public String getNum_Serie () {
					return this.Num_Serie;
				}
				
			    public String QR_code;

				public String getQR_code () {
					return this.QR_code;
				}
				
			    public String Photo;

				public String getPhoto () {
					return this.Photo;
				}
				
			    public int score;

				public int getScore () {
					return this.score;
				}
				
			    public Boolean numSerieVerified;

				public Boolean getNumSerieVerified () {
					return this.numSerieVerified;
				}
				
			    public Boolean inamVerified;

				public Boolean getInamVerified () {
					return this.inamVerified;
				}
				
			    public Boolean nniVerified;

				public Boolean getNniVerified () {
					return this.nniVerified;
				}
				
			    public Boolean prenomVerified;

				public Boolean getPrenomVerified () {
					return this.prenomVerified;
				}
				
			    public Boolean nomdefamilleVerified;

				public Boolean getNomdefamilleVerified () {
					return this.nomdefamilleVerified;
				}
				
			    public Boolean genreVerified;

				public Boolean getGenreVerified () {
					return this.genreVerified;
				}
				
			    public Boolean numcarteVerified;

				public Boolean getNumcarteVerified () {
					return this.numcarteVerified;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length) {
				if(length < 1024 && commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length == 0) {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[1024];
				} else {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length);
			strReturn = new String(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing) {

        	try {

        		int length = 0;
		
					this.INAM = readString(dis);
					
					this.NNI = readString(dis);
					
					this.Prenom = readString(dis);
					
					this.Nom_de_Famille = readString(dis);
					
					this.Date_Naissance = readDate(dis);
					
					this.Lieu_Naissance = readString(dis);
					
			        this.Genre = dis.readChar();
					
					this.Num_Carte = readString(dis);
					
					this.Date_Deliv = readDate(dis);
					
					this.Num_Serie = readString(dis);
					
					this.QR_code = readString(dis);
					
					this.Photo = readString(dis);
					
			        this.score = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.numSerieVerified = null;
           				} else {
           			    	this.numSerieVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.inamVerified = null;
           				} else {
           			    	this.inamVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nniVerified = null;
           				} else {
           			    	this.nniVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.prenomVerified = null;
           				} else {
           			    	this.prenomVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nomdefamilleVerified = null;
           				} else {
           			    	this.nomdefamilleVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.genreVerified = null;
           				} else {
           			    	this.genreVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.numcarteVerified = null;
           				} else {
           			    	this.numcarteVerified = dis.readBoolean();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.INAM,dos);
					
					// String
				
						writeString(this.NNI,dos);
					
					// String
				
						writeString(this.Prenom,dos);
					
					// String
				
						writeString(this.Nom_de_Famille,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Naissance,dos);
					
					// String
				
						writeString(this.Lieu_Naissance,dos);
					
					// char
				
		            	dos.writeChar(this.Genre);
					
					// String
				
						writeString(this.Num_Carte,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Deliv,dos);
					
					// String
				
						writeString(this.Num_Serie,dos);
					
					// String
				
						writeString(this.QR_code,dos);
					
					// String
				
						writeString(this.Photo,dos);
					
					// int
				
		            	dos.writeInt(this.score);
					
					// Boolean
				
						if(this.numSerieVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.numSerieVerified);
		            	}
					
					// Boolean
				
						if(this.inamVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.inamVerified);
		            	}
					
					// Boolean
				
						if(this.nniVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.nniVerified);
		            	}
					
					// Boolean
				
						if(this.prenomVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.prenomVerified);
		            	}
					
					// Boolean
				
						if(this.nomdefamilleVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.nomdefamilleVerified);
		            	}
					
					// Boolean
				
						if(this.genreVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.genreVerified);
		            	}
					
					// Boolean
				
						if(this.numcarteVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.numcarteVerified);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("INAM="+INAM);
		sb.append(",NNI="+NNI);
		sb.append(",Prenom="+Prenom);
		sb.append(",Nom_de_Famille="+Nom_de_Famille);
		sb.append(",Date_Naissance="+String.valueOf(Date_Naissance));
		sb.append(",Lieu_Naissance="+Lieu_Naissance);
		sb.append(",Genre="+String.valueOf(Genre));
		sb.append(",Num_Carte="+Num_Carte);
		sb.append(",Date_Deliv="+String.valueOf(Date_Deliv));
		sb.append(",Num_Serie="+Num_Serie);
		sb.append(",QR_code="+QR_code);
		sb.append(",Photo="+Photo);
		sb.append(",score="+String.valueOf(score));
		sb.append(",numSerieVerified="+String.valueOf(numSerieVerified));
		sb.append(",inamVerified="+String.valueOf(inamVerified));
		sb.append(",nniVerified="+String.valueOf(nniVerified));
		sb.append(",prenomVerified="+String.valueOf(prenomVerified));
		sb.append(",nomdefamilleVerified="+String.valueOf(nomdefamilleVerified));
		sb.append(",genreVerified="+String.valueOf(genreVerified));
		sb.append(",numcarteVerified="+String.valueOf(numcarteVerified));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row15Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row14Struct implements routines.system.IPersistableRow<row14Struct> {
    final static byte[] commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];
    static byte[] commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];

	
			    public String INAM;

				public String getINAM () {
					return this.INAM;
				}
				
			    public String NNI;

				public String getNNI () {
					return this.NNI;
				}
				
			    public String Prenom;

				public String getPrenom () {
					return this.Prenom;
				}
				
			    public String Nom_de_Famille;

				public String getNom_de_Famille () {
					return this.Nom_de_Famille;
				}
				
			    public java.util.Date Date_Naissance;

				public java.util.Date getDate_Naissance () {
					return this.Date_Naissance;
				}
				
			    public String Lieu_Naissance;

				public String getLieu_Naissance () {
					return this.Lieu_Naissance;
				}
				
			    public char Genre = ' ';

				public char getGenre () {
					return this.Genre;
				}
				
			    public String Num_Carte;

				public String getNum_Carte () {
					return this.Num_Carte;
				}
				
			    public java.util.Date Date_Deliv;

				public java.util.Date getDate_Deliv () {
					return this.Date_Deliv;
				}
				
			    public String Num_Serie;

				public String getNum_Serie () {
					return this.Num_Serie;
				}
				
			    public String QR_code;

				public String getQR_code () {
					return this.QR_code;
				}
				
			    public String Photo;

				public String getPhoto () {
					return this.Photo;
				}
				
			    public int score;

				public int getScore () {
					return this.score;
				}
				
			    public Boolean numSerieVerified;

				public Boolean getNumSerieVerified () {
					return this.numSerieVerified;
				}
				
			    public Boolean inamVerified;

				public Boolean getInamVerified () {
					return this.inamVerified;
				}
				
			    public Boolean nniVerified;

				public Boolean getNniVerified () {
					return this.nniVerified;
				}
				
			    public Boolean prenomVerified;

				public Boolean getPrenomVerified () {
					return this.prenomVerified;
				}
				
			    public Boolean nomdefamilleVerified;

				public Boolean getNomdefamilleVerified () {
					return this.nomdefamilleVerified;
				}
				
			    public Boolean genreVerified;

				public Boolean getGenreVerified () {
					return this.genreVerified;
				}
				
			    public Boolean numcarteVerified;

				public Boolean getNumcarteVerified () {
					return this.numcarteVerified;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length) {
				if(length < 1024 && commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length == 0) {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[1024];
				} else {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length);
			strReturn = new String(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing) {

        	try {

        		int length = 0;
		
					this.INAM = readString(dis);
					
					this.NNI = readString(dis);
					
					this.Prenom = readString(dis);
					
					this.Nom_de_Famille = readString(dis);
					
					this.Date_Naissance = readDate(dis);
					
					this.Lieu_Naissance = readString(dis);
					
			        this.Genre = dis.readChar();
					
					this.Num_Carte = readString(dis);
					
					this.Date_Deliv = readDate(dis);
					
					this.Num_Serie = readString(dis);
					
					this.QR_code = readString(dis);
					
					this.Photo = readString(dis);
					
			        this.score = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.numSerieVerified = null;
           				} else {
           			    	this.numSerieVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.inamVerified = null;
           				} else {
           			    	this.inamVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nniVerified = null;
           				} else {
           			    	this.nniVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.prenomVerified = null;
           				} else {
           			    	this.prenomVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nomdefamilleVerified = null;
           				} else {
           			    	this.nomdefamilleVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.genreVerified = null;
           				} else {
           			    	this.genreVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.numcarteVerified = null;
           				} else {
           			    	this.numcarteVerified = dis.readBoolean();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.INAM,dos);
					
					// String
				
						writeString(this.NNI,dos);
					
					// String
				
						writeString(this.Prenom,dos);
					
					// String
				
						writeString(this.Nom_de_Famille,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Naissance,dos);
					
					// String
				
						writeString(this.Lieu_Naissance,dos);
					
					// char
				
		            	dos.writeChar(this.Genre);
					
					// String
				
						writeString(this.Num_Carte,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Deliv,dos);
					
					// String
				
						writeString(this.Num_Serie,dos);
					
					// String
				
						writeString(this.QR_code,dos);
					
					// String
				
						writeString(this.Photo,dos);
					
					// int
				
		            	dos.writeInt(this.score);
					
					// Boolean
				
						if(this.numSerieVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.numSerieVerified);
		            	}
					
					// Boolean
				
						if(this.inamVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.inamVerified);
		            	}
					
					// Boolean
				
						if(this.nniVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.nniVerified);
		            	}
					
					// Boolean
				
						if(this.prenomVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.prenomVerified);
		            	}
					
					// Boolean
				
						if(this.nomdefamilleVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.nomdefamilleVerified);
		            	}
					
					// Boolean
				
						if(this.genreVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.genreVerified);
		            	}
					
					// Boolean
				
						if(this.numcarteVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.numcarteVerified);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("INAM="+INAM);
		sb.append(",NNI="+NNI);
		sb.append(",Prenom="+Prenom);
		sb.append(",Nom_de_Famille="+Nom_de_Famille);
		sb.append(",Date_Naissance="+String.valueOf(Date_Naissance));
		sb.append(",Lieu_Naissance="+Lieu_Naissance);
		sb.append(",Genre="+String.valueOf(Genre));
		sb.append(",Num_Carte="+Num_Carte);
		sb.append(",Date_Deliv="+String.valueOf(Date_Deliv));
		sb.append(",Num_Serie="+Num_Serie);
		sb.append(",QR_code="+QR_code);
		sb.append(",Photo="+Photo);
		sb.append(",score="+String.valueOf(score));
		sb.append(",numSerieVerified="+String.valueOf(numSerieVerified));
		sb.append(",inamVerified="+String.valueOf(inamVerified));
		sb.append(",nniVerified="+String.valueOf(nniVerified));
		sb.append(",prenomVerified="+String.valueOf(prenomVerified));
		sb.append(",nomdefamilleVerified="+String.valueOf(nomdefamilleVerified));
		sb.append(",genreVerified="+String.valueOf(genreVerified));
		sb.append(",numcarteVerified="+String.valueOf(numcarteVerified));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row14Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row13Struct implements routines.system.IPersistableRow<row13Struct> {
    final static byte[] commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];
    static byte[] commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];

	
			    public String INAM;

				public String getINAM () {
					return this.INAM;
				}
				
			    public String NNI;

				public String getNNI () {
					return this.NNI;
				}
				
			    public String Prenom;

				public String getPrenom () {
					return this.Prenom;
				}
				
			    public String Nom_de_Famille;

				public String getNom_de_Famille () {
					return this.Nom_de_Famille;
				}
				
			    public java.util.Date Date_Naissance;

				public java.util.Date getDate_Naissance () {
					return this.Date_Naissance;
				}
				
			    public String Lieu_Naissance;

				public String getLieu_Naissance () {
					return this.Lieu_Naissance;
				}
				
			    public char Genre = ' ';

				public char getGenre () {
					return this.Genre;
				}
				
			    public String Num_Carte;

				public String getNum_Carte () {
					return this.Num_Carte;
				}
				
			    public java.util.Date Date_Deliv;

				public java.util.Date getDate_Deliv () {
					return this.Date_Deliv;
				}
				
			    public String Num_Serie;

				public String getNum_Serie () {
					return this.Num_Serie;
				}
				
			    public String QR_code;

				public String getQR_code () {
					return this.QR_code;
				}
				
			    public String Photo;

				public String getPhoto () {
					return this.Photo;
				}
				
			    public int score;

				public int getScore () {
					return this.score;
				}
				
			    public Boolean numSerieVerified;

				public Boolean getNumSerieVerified () {
					return this.numSerieVerified;
				}
				
			    public Boolean inamVerified;

				public Boolean getInamVerified () {
					return this.inamVerified;
				}
				
			    public Boolean nniVerified;

				public Boolean getNniVerified () {
					return this.nniVerified;
				}
				
			    public Boolean prenomVerified;

				public Boolean getPrenomVerified () {
					return this.prenomVerified;
				}
				
			    public Boolean nomdefamilleVerified;

				public Boolean getNomdefamilleVerified () {
					return this.nomdefamilleVerified;
				}
				
			    public Boolean genreVerified;

				public Boolean getGenreVerified () {
					return this.genreVerified;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length) {
				if(length < 1024 && commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length == 0) {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[1024];
				} else {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length);
			strReturn = new String(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing) {

        	try {

        		int length = 0;
		
					this.INAM = readString(dis);
					
					this.NNI = readString(dis);
					
					this.Prenom = readString(dis);
					
					this.Nom_de_Famille = readString(dis);
					
					this.Date_Naissance = readDate(dis);
					
					this.Lieu_Naissance = readString(dis);
					
			        this.Genre = dis.readChar();
					
					this.Num_Carte = readString(dis);
					
					this.Date_Deliv = readDate(dis);
					
					this.Num_Serie = readString(dis);
					
					this.QR_code = readString(dis);
					
					this.Photo = readString(dis);
					
			        this.score = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.numSerieVerified = null;
           				} else {
           			    	this.numSerieVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.inamVerified = null;
           				} else {
           			    	this.inamVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nniVerified = null;
           				} else {
           			    	this.nniVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.prenomVerified = null;
           				} else {
           			    	this.prenomVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nomdefamilleVerified = null;
           				} else {
           			    	this.nomdefamilleVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.genreVerified = null;
           				} else {
           			    	this.genreVerified = dis.readBoolean();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.INAM,dos);
					
					// String
				
						writeString(this.NNI,dos);
					
					// String
				
						writeString(this.Prenom,dos);
					
					// String
				
						writeString(this.Nom_de_Famille,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Naissance,dos);
					
					// String
				
						writeString(this.Lieu_Naissance,dos);
					
					// char
				
		            	dos.writeChar(this.Genre);
					
					// String
				
						writeString(this.Num_Carte,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Deliv,dos);
					
					// String
				
						writeString(this.Num_Serie,dos);
					
					// String
				
						writeString(this.QR_code,dos);
					
					// String
				
						writeString(this.Photo,dos);
					
					// int
				
		            	dos.writeInt(this.score);
					
					// Boolean
				
						if(this.numSerieVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.numSerieVerified);
		            	}
					
					// Boolean
				
						if(this.inamVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.inamVerified);
		            	}
					
					// Boolean
				
						if(this.nniVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.nniVerified);
		            	}
					
					// Boolean
				
						if(this.prenomVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.prenomVerified);
		            	}
					
					// Boolean
				
						if(this.nomdefamilleVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.nomdefamilleVerified);
		            	}
					
					// Boolean
				
						if(this.genreVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.genreVerified);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("INAM="+INAM);
		sb.append(",NNI="+NNI);
		sb.append(",Prenom="+Prenom);
		sb.append(",Nom_de_Famille="+Nom_de_Famille);
		sb.append(",Date_Naissance="+String.valueOf(Date_Naissance));
		sb.append(",Lieu_Naissance="+Lieu_Naissance);
		sb.append(",Genre="+String.valueOf(Genre));
		sb.append(",Num_Carte="+Num_Carte);
		sb.append(",Date_Deliv="+String.valueOf(Date_Deliv));
		sb.append(",Num_Serie="+Num_Serie);
		sb.append(",QR_code="+QR_code);
		sb.append(",Photo="+Photo);
		sb.append(",score="+String.valueOf(score));
		sb.append(",numSerieVerified="+String.valueOf(numSerieVerified));
		sb.append(",inamVerified="+String.valueOf(inamVerified));
		sb.append(",nniVerified="+String.valueOf(nniVerified));
		sb.append(",prenomVerified="+String.valueOf(prenomVerified));
		sb.append(",nomdefamilleVerified="+String.valueOf(nomdefamilleVerified));
		sb.append(",genreVerified="+String.valueOf(genreVerified));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row13Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
    final static byte[] commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];
    static byte[] commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];

	
			    public String INAM;

				public String getINAM () {
					return this.INAM;
				}
				
			    public String NNI;

				public String getNNI () {
					return this.NNI;
				}
				
			    public String Prenom;

				public String getPrenom () {
					return this.Prenom;
				}
				
			    public String Nom_de_Famille;

				public String getNom_de_Famille () {
					return this.Nom_de_Famille;
				}
				
			    public java.util.Date Date_Naissance;

				public java.util.Date getDate_Naissance () {
					return this.Date_Naissance;
				}
				
			    public String Lieu_Naissance;

				public String getLieu_Naissance () {
					return this.Lieu_Naissance;
				}
				
			    public char Genre = ' ';

				public char getGenre () {
					return this.Genre;
				}
				
			    public String Num_Carte;

				public String getNum_Carte () {
					return this.Num_Carte;
				}
				
			    public java.util.Date Date_Deliv;

				public java.util.Date getDate_Deliv () {
					return this.Date_Deliv;
				}
				
			    public String Num_Serie;

				public String getNum_Serie () {
					return this.Num_Serie;
				}
				
			    public String QR_code;

				public String getQR_code () {
					return this.QR_code;
				}
				
			    public String Photo;

				public String getPhoto () {
					return this.Photo;
				}
				
			    public int score;

				public int getScore () {
					return this.score;
				}
				
			    public Boolean numSerieVerified;

				public Boolean getNumSerieVerified () {
					return this.numSerieVerified;
				}
				
			    public Boolean inamVerified;

				public Boolean getInamVerified () {
					return this.inamVerified;
				}
				
			    public Boolean nniVerified;

				public Boolean getNniVerified () {
					return this.nniVerified;
				}
				
			    public Boolean prenomVerified;

				public Boolean getPrenomVerified () {
					return this.prenomVerified;
				}
				
			    public Boolean nomdefamilleVerified;

				public Boolean getNomdefamilleVerified () {
					return this.nomdefamilleVerified;
				}
				
			    public Boolean genreVerified;

				public Boolean getGenreVerified () {
					return this.genreVerified;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length) {
				if(length < 1024 && commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length == 0) {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[1024];
				} else {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length);
			strReturn = new String(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing) {

        	try {

        		int length = 0;
		
					this.INAM = readString(dis);
					
					this.NNI = readString(dis);
					
					this.Prenom = readString(dis);
					
					this.Nom_de_Famille = readString(dis);
					
					this.Date_Naissance = readDate(dis);
					
					this.Lieu_Naissance = readString(dis);
					
			        this.Genre = dis.readChar();
					
					this.Num_Carte = readString(dis);
					
					this.Date_Deliv = readDate(dis);
					
					this.Num_Serie = readString(dis);
					
					this.QR_code = readString(dis);
					
					this.Photo = readString(dis);
					
			        this.score = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.numSerieVerified = null;
           				} else {
           			    	this.numSerieVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.inamVerified = null;
           				} else {
           			    	this.inamVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nniVerified = null;
           				} else {
           			    	this.nniVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.prenomVerified = null;
           				} else {
           			    	this.prenomVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nomdefamilleVerified = null;
           				} else {
           			    	this.nomdefamilleVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.genreVerified = null;
           				} else {
           			    	this.genreVerified = dis.readBoolean();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.INAM,dos);
					
					// String
				
						writeString(this.NNI,dos);
					
					// String
				
						writeString(this.Prenom,dos);
					
					// String
				
						writeString(this.Nom_de_Famille,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Naissance,dos);
					
					// String
				
						writeString(this.Lieu_Naissance,dos);
					
					// char
				
		            	dos.writeChar(this.Genre);
					
					// String
				
						writeString(this.Num_Carte,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Deliv,dos);
					
					// String
				
						writeString(this.Num_Serie,dos);
					
					// String
				
						writeString(this.QR_code,dos);
					
					// String
				
						writeString(this.Photo,dos);
					
					// int
				
		            	dos.writeInt(this.score);
					
					// Boolean
				
						if(this.numSerieVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.numSerieVerified);
		            	}
					
					// Boolean
				
						if(this.inamVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.inamVerified);
		            	}
					
					// Boolean
				
						if(this.nniVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.nniVerified);
		            	}
					
					// Boolean
				
						if(this.prenomVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.prenomVerified);
		            	}
					
					// Boolean
				
						if(this.nomdefamilleVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.nomdefamilleVerified);
		            	}
					
					// Boolean
				
						if(this.genreVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.genreVerified);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("INAM="+INAM);
		sb.append(",NNI="+NNI);
		sb.append(",Prenom="+Prenom);
		sb.append(",Nom_de_Famille="+Nom_de_Famille);
		sb.append(",Date_Naissance="+String.valueOf(Date_Naissance));
		sb.append(",Lieu_Naissance="+Lieu_Naissance);
		sb.append(",Genre="+String.valueOf(Genre));
		sb.append(",Num_Carte="+Num_Carte);
		sb.append(",Date_Deliv="+String.valueOf(Date_Deliv));
		sb.append(",Num_Serie="+Num_Serie);
		sb.append(",QR_code="+QR_code);
		sb.append(",Photo="+Photo);
		sb.append(",score="+String.valueOf(score));
		sb.append(",numSerieVerified="+String.valueOf(numSerieVerified));
		sb.append(",inamVerified="+String.valueOf(inamVerified));
		sb.append(",nniVerified="+String.valueOf(nniVerified));
		sb.append(",prenomVerified="+String.valueOf(prenomVerified));
		sb.append(",nomdefamilleVerified="+String.valueOf(nomdefamilleVerified));
		sb.append(",genreVerified="+String.valueOf(genreVerified));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
    final static byte[] commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];
    static byte[] commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];

	
			    public String INAM;

				public String getINAM () {
					return this.INAM;
				}
				
			    public String NNI;

				public String getNNI () {
					return this.NNI;
				}
				
			    public String Prenom;

				public String getPrenom () {
					return this.Prenom;
				}
				
			    public String Nom_de_Famille;

				public String getNom_de_Famille () {
					return this.Nom_de_Famille;
				}
				
			    public java.util.Date Date_Naissance;

				public java.util.Date getDate_Naissance () {
					return this.Date_Naissance;
				}
				
			    public String Lieu_Naissance;

				public String getLieu_Naissance () {
					return this.Lieu_Naissance;
				}
				
			    public char Genre = ' ';

				public char getGenre () {
					return this.Genre;
				}
				
			    public String Num_Carte;

				public String getNum_Carte () {
					return this.Num_Carte;
				}
				
			    public java.util.Date Date_Deliv;

				public java.util.Date getDate_Deliv () {
					return this.Date_Deliv;
				}
				
			    public String Num_Serie;

				public String getNum_Serie () {
					return this.Num_Serie;
				}
				
			    public String QR_code;

				public String getQR_code () {
					return this.QR_code;
				}
				
			    public String Photo;

				public String getPhoto () {
					return this.Photo;
				}
				
			    public int score;

				public int getScore () {
					return this.score;
				}
				
			    public Boolean numSerieVerified;

				public Boolean getNumSerieVerified () {
					return this.numSerieVerified;
				}
				
			    public Boolean inamVerified;

				public Boolean getInamVerified () {
					return this.inamVerified;
				}
				
			    public Boolean nniVerified;

				public Boolean getNniVerified () {
					return this.nniVerified;
				}
				
			    public Boolean prenomVerified;

				public Boolean getPrenomVerified () {
					return this.prenomVerified;
				}
				
			    public Boolean nomdefamilleVerified;

				public Boolean getNomdefamilleVerified () {
					return this.nomdefamilleVerified;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length) {
				if(length < 1024 && commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length == 0) {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[1024];
				} else {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length);
			strReturn = new String(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing) {

        	try {

        		int length = 0;
		
					this.INAM = readString(dis);
					
					this.NNI = readString(dis);
					
					this.Prenom = readString(dis);
					
					this.Nom_de_Famille = readString(dis);
					
					this.Date_Naissance = readDate(dis);
					
					this.Lieu_Naissance = readString(dis);
					
			        this.Genre = dis.readChar();
					
					this.Num_Carte = readString(dis);
					
					this.Date_Deliv = readDate(dis);
					
					this.Num_Serie = readString(dis);
					
					this.QR_code = readString(dis);
					
					this.Photo = readString(dis);
					
			        this.score = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.numSerieVerified = null;
           				} else {
           			    	this.numSerieVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.inamVerified = null;
           				} else {
           			    	this.inamVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nniVerified = null;
           				} else {
           			    	this.nniVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.prenomVerified = null;
           				} else {
           			    	this.prenomVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nomdefamilleVerified = null;
           				} else {
           			    	this.nomdefamilleVerified = dis.readBoolean();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.INAM,dos);
					
					// String
				
						writeString(this.NNI,dos);
					
					// String
				
						writeString(this.Prenom,dos);
					
					// String
				
						writeString(this.Nom_de_Famille,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Naissance,dos);
					
					// String
				
						writeString(this.Lieu_Naissance,dos);
					
					// char
				
		            	dos.writeChar(this.Genre);
					
					// String
				
						writeString(this.Num_Carte,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Deliv,dos);
					
					// String
				
						writeString(this.Num_Serie,dos);
					
					// String
				
						writeString(this.QR_code,dos);
					
					// String
				
						writeString(this.Photo,dos);
					
					// int
				
		            	dos.writeInt(this.score);
					
					// Boolean
				
						if(this.numSerieVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.numSerieVerified);
		            	}
					
					// Boolean
				
						if(this.inamVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.inamVerified);
		            	}
					
					// Boolean
				
						if(this.nniVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.nniVerified);
		            	}
					
					// Boolean
				
						if(this.prenomVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.prenomVerified);
		            	}
					
					// Boolean
				
						if(this.nomdefamilleVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.nomdefamilleVerified);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("INAM="+INAM);
		sb.append(",NNI="+NNI);
		sb.append(",Prenom="+Prenom);
		sb.append(",Nom_de_Famille="+Nom_de_Famille);
		sb.append(",Date_Naissance="+String.valueOf(Date_Naissance));
		sb.append(",Lieu_Naissance="+Lieu_Naissance);
		sb.append(",Genre="+String.valueOf(Genre));
		sb.append(",Num_Carte="+Num_Carte);
		sb.append(",Date_Deliv="+String.valueOf(Date_Deliv));
		sb.append(",Num_Serie="+Num_Serie);
		sb.append(",QR_code="+QR_code);
		sb.append(",Photo="+Photo);
		sb.append(",score="+String.valueOf(score));
		sb.append(",numSerieVerified="+String.valueOf(numSerieVerified));
		sb.append(",inamVerified="+String.valueOf(inamVerified));
		sb.append(",nniVerified="+String.valueOf(nniVerified));
		sb.append(",prenomVerified="+String.valueOf(prenomVerified));
		sb.append(",nomdefamilleVerified="+String.valueOf(nomdefamilleVerified));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];
    static byte[] commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];

	
			    public String INAM;

				public String getINAM () {
					return this.INAM;
				}
				
			    public String NNI;

				public String getNNI () {
					return this.NNI;
				}
				
			    public String Prenom;

				public String getPrenom () {
					return this.Prenom;
				}
				
			    public String Nom_de_Famille;

				public String getNom_de_Famille () {
					return this.Nom_de_Famille;
				}
				
			    public java.util.Date Date_Naissance;

				public java.util.Date getDate_Naissance () {
					return this.Date_Naissance;
				}
				
			    public String Lieu_Naissance;

				public String getLieu_Naissance () {
					return this.Lieu_Naissance;
				}
				
			    public char Genre = ' ';

				public char getGenre () {
					return this.Genre;
				}
				
			    public String Num_Carte;

				public String getNum_Carte () {
					return this.Num_Carte;
				}
				
			    public java.util.Date Date_Deliv;

				public java.util.Date getDate_Deliv () {
					return this.Date_Deliv;
				}
				
			    public String Num_Serie;

				public String getNum_Serie () {
					return this.Num_Serie;
				}
				
			    public String QR_code;

				public String getQR_code () {
					return this.QR_code;
				}
				
			    public String Photo;

				public String getPhoto () {
					return this.Photo;
				}
				
			    public int score;

				public int getScore () {
					return this.score;
				}
				
			    public Boolean numSerieVerified;

				public Boolean getNumSerieVerified () {
					return this.numSerieVerified;
				}
				
			    public Boolean inamVerified;

				public Boolean getInamVerified () {
					return this.inamVerified;
				}
				
			    public Boolean nniVerified;

				public Boolean getNniVerified () {
					return this.nniVerified;
				}
				
			    public Boolean prenomVerified;

				public Boolean getPrenomVerified () {
					return this.prenomVerified;
				}
				
			    public Boolean nomdefamilleVerified;

				public Boolean getNomdefamilleVerified () {
					return this.nomdefamilleVerified;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length) {
				if(length < 1024 && commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length == 0) {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[1024];
				} else {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length);
			strReturn = new String(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing) {

        	try {

        		int length = 0;
		
					this.INAM = readString(dis);
					
					this.NNI = readString(dis);
					
					this.Prenom = readString(dis);
					
					this.Nom_de_Famille = readString(dis);
					
					this.Date_Naissance = readDate(dis);
					
					this.Lieu_Naissance = readString(dis);
					
			        this.Genre = dis.readChar();
					
					this.Num_Carte = readString(dis);
					
					this.Date_Deliv = readDate(dis);
					
					this.Num_Serie = readString(dis);
					
					this.QR_code = readString(dis);
					
					this.Photo = readString(dis);
					
			        this.score = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.numSerieVerified = null;
           				} else {
           			    	this.numSerieVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.inamVerified = null;
           				} else {
           			    	this.inamVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nniVerified = null;
           				} else {
           			    	this.nniVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.prenomVerified = null;
           				} else {
           			    	this.prenomVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nomdefamilleVerified = null;
           				} else {
           			    	this.nomdefamilleVerified = dis.readBoolean();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.INAM,dos);
					
					// String
				
						writeString(this.NNI,dos);
					
					// String
				
						writeString(this.Prenom,dos);
					
					// String
				
						writeString(this.Nom_de_Famille,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Naissance,dos);
					
					// String
				
						writeString(this.Lieu_Naissance,dos);
					
					// char
				
		            	dos.writeChar(this.Genre);
					
					// String
				
						writeString(this.Num_Carte,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Deliv,dos);
					
					// String
				
						writeString(this.Num_Serie,dos);
					
					// String
				
						writeString(this.QR_code,dos);
					
					// String
				
						writeString(this.Photo,dos);
					
					// int
				
		            	dos.writeInt(this.score);
					
					// Boolean
				
						if(this.numSerieVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.numSerieVerified);
		            	}
					
					// Boolean
				
						if(this.inamVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.inamVerified);
		            	}
					
					// Boolean
				
						if(this.nniVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.nniVerified);
		            	}
					
					// Boolean
				
						if(this.prenomVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.prenomVerified);
		            	}
					
					// Boolean
				
						if(this.nomdefamilleVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.nomdefamilleVerified);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("INAM="+INAM);
		sb.append(",NNI="+NNI);
		sb.append(",Prenom="+Prenom);
		sb.append(",Nom_de_Famille="+Nom_de_Famille);
		sb.append(",Date_Naissance="+String.valueOf(Date_Naissance));
		sb.append(",Lieu_Naissance="+Lieu_Naissance);
		sb.append(",Genre="+String.valueOf(Genre));
		sb.append(",Num_Carte="+Num_Carte);
		sb.append(",Date_Deliv="+String.valueOf(Date_Deliv));
		sb.append(",Num_Serie="+Num_Serie);
		sb.append(",QR_code="+QR_code);
		sb.append(",Photo="+Photo);
		sb.append(",score="+String.valueOf(score));
		sb.append(",numSerieVerified="+String.valueOf(numSerieVerified));
		sb.append(",inamVerified="+String.valueOf(inamVerified));
		sb.append(",nniVerified="+String.valueOf(nniVerified));
		sb.append(",prenomVerified="+String.valueOf(prenomVerified));
		sb.append(",nomdefamilleVerified="+String.valueOf(nomdefamilleVerified));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];
    static byte[] commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];

	
			    public String INAM;

				public String getINAM () {
					return this.INAM;
				}
				
			    public String NNI;

				public String getNNI () {
					return this.NNI;
				}
				
			    public String Prenom;

				public String getPrenom () {
					return this.Prenom;
				}
				
			    public String Nom_de_Famille;

				public String getNom_de_Famille () {
					return this.Nom_de_Famille;
				}
				
			    public java.util.Date Date_Naissance;

				public java.util.Date getDate_Naissance () {
					return this.Date_Naissance;
				}
				
			    public String Lieu_Naissance;

				public String getLieu_Naissance () {
					return this.Lieu_Naissance;
				}
				
			    public char Genre = ' ';

				public char getGenre () {
					return this.Genre;
				}
				
			    public String Num_Carte;

				public String getNum_Carte () {
					return this.Num_Carte;
				}
				
			    public java.util.Date Date_Deliv;

				public java.util.Date getDate_Deliv () {
					return this.Date_Deliv;
				}
				
			    public String Num_Serie;

				public String getNum_Serie () {
					return this.Num_Serie;
				}
				
			    public String QR_code;

				public String getQR_code () {
					return this.QR_code;
				}
				
			    public String Photo;

				public String getPhoto () {
					return this.Photo;
				}
				
			    public int score;

				public int getScore () {
					return this.score;
				}
				
			    public Boolean numSerieVerified;

				public Boolean getNumSerieVerified () {
					return this.numSerieVerified;
				}
				
			    public Boolean inamVerified;

				public Boolean getInamVerified () {
					return this.inamVerified;
				}
				
			    public Boolean nniVerified;

				public Boolean getNniVerified () {
					return this.nniVerified;
				}
				
			    public Boolean prenomVerified;

				public Boolean getPrenomVerified () {
					return this.prenomVerified;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length) {
				if(length < 1024 && commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length == 0) {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[1024];
				} else {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length);
			strReturn = new String(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing) {

        	try {

        		int length = 0;
		
					this.INAM = readString(dis);
					
					this.NNI = readString(dis);
					
					this.Prenom = readString(dis);
					
					this.Nom_de_Famille = readString(dis);
					
					this.Date_Naissance = readDate(dis);
					
					this.Lieu_Naissance = readString(dis);
					
			        this.Genre = dis.readChar();
					
					this.Num_Carte = readString(dis);
					
					this.Date_Deliv = readDate(dis);
					
					this.Num_Serie = readString(dis);
					
					this.QR_code = readString(dis);
					
					this.Photo = readString(dis);
					
			        this.score = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.numSerieVerified = null;
           				} else {
           			    	this.numSerieVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.inamVerified = null;
           				} else {
           			    	this.inamVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nniVerified = null;
           				} else {
           			    	this.nniVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.prenomVerified = null;
           				} else {
           			    	this.prenomVerified = dis.readBoolean();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.INAM,dos);
					
					// String
				
						writeString(this.NNI,dos);
					
					// String
				
						writeString(this.Prenom,dos);
					
					// String
				
						writeString(this.Nom_de_Famille,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Naissance,dos);
					
					// String
				
						writeString(this.Lieu_Naissance,dos);
					
					// char
				
		            	dos.writeChar(this.Genre);
					
					// String
				
						writeString(this.Num_Carte,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Deliv,dos);
					
					// String
				
						writeString(this.Num_Serie,dos);
					
					// String
				
						writeString(this.QR_code,dos);
					
					// String
				
						writeString(this.Photo,dos);
					
					// int
				
		            	dos.writeInt(this.score);
					
					// Boolean
				
						if(this.numSerieVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.numSerieVerified);
		            	}
					
					// Boolean
				
						if(this.inamVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.inamVerified);
		            	}
					
					// Boolean
				
						if(this.nniVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.nniVerified);
		            	}
					
					// Boolean
				
						if(this.prenomVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.prenomVerified);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("INAM="+INAM);
		sb.append(",NNI="+NNI);
		sb.append(",Prenom="+Prenom);
		sb.append(",Nom_de_Famille="+Nom_de_Famille);
		sb.append(",Date_Naissance="+String.valueOf(Date_Naissance));
		sb.append(",Lieu_Naissance="+Lieu_Naissance);
		sb.append(",Genre="+String.valueOf(Genre));
		sb.append(",Num_Carte="+Num_Carte);
		sb.append(",Date_Deliv="+String.valueOf(Date_Deliv));
		sb.append(",Num_Serie="+Num_Serie);
		sb.append(",QR_code="+QR_code);
		sb.append(",Photo="+Photo);
		sb.append(",score="+String.valueOf(score));
		sb.append(",numSerieVerified="+String.valueOf(numSerieVerified));
		sb.append(",inamVerified="+String.valueOf(inamVerified));
		sb.append(",nniVerified="+String.valueOf(nniVerified));
		sb.append(",prenomVerified="+String.valueOf(prenomVerified));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];
    static byte[] commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];

	
			    public String INAM;

				public String getINAM () {
					return this.INAM;
				}
				
			    public String NNI;

				public String getNNI () {
					return this.NNI;
				}
				
			    public String Prenom;

				public String getPrenom () {
					return this.Prenom;
				}
				
			    public String Nom_de_Famille;

				public String getNom_de_Famille () {
					return this.Nom_de_Famille;
				}
				
			    public java.util.Date Date_Naissance;

				public java.util.Date getDate_Naissance () {
					return this.Date_Naissance;
				}
				
			    public String Lieu_Naissance;

				public String getLieu_Naissance () {
					return this.Lieu_Naissance;
				}
				
			    public char Genre = ' ';

				public char getGenre () {
					return this.Genre;
				}
				
			    public String Num_Carte;

				public String getNum_Carte () {
					return this.Num_Carte;
				}
				
			    public java.util.Date Date_Deliv;

				public java.util.Date getDate_Deliv () {
					return this.Date_Deliv;
				}
				
			    public String Num_Serie;

				public String getNum_Serie () {
					return this.Num_Serie;
				}
				
			    public String QR_code;

				public String getQR_code () {
					return this.QR_code;
				}
				
			    public String Photo;

				public String getPhoto () {
					return this.Photo;
				}
				
			    public int score;

				public int getScore () {
					return this.score;
				}
				
			    public Boolean numSerieVerified;

				public Boolean getNumSerieVerified () {
					return this.numSerieVerified;
				}
				
			    public Boolean inamVerified;

				public Boolean getInamVerified () {
					return this.inamVerified;
				}
				
			    public Boolean nniVerified;

				public Boolean getNniVerified () {
					return this.nniVerified;
				}
				
			    public Boolean prenomVerified;

				public Boolean getPrenomVerified () {
					return this.prenomVerified;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length) {
				if(length < 1024 && commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length == 0) {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[1024];
				} else {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length);
			strReturn = new String(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing) {

        	try {

        		int length = 0;
		
					this.INAM = readString(dis);
					
					this.NNI = readString(dis);
					
					this.Prenom = readString(dis);
					
					this.Nom_de_Famille = readString(dis);
					
					this.Date_Naissance = readDate(dis);
					
					this.Lieu_Naissance = readString(dis);
					
			        this.Genre = dis.readChar();
					
					this.Num_Carte = readString(dis);
					
					this.Date_Deliv = readDate(dis);
					
					this.Num_Serie = readString(dis);
					
					this.QR_code = readString(dis);
					
					this.Photo = readString(dis);
					
			        this.score = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.numSerieVerified = null;
           				} else {
           			    	this.numSerieVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.inamVerified = null;
           				} else {
           			    	this.inamVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nniVerified = null;
           				} else {
           			    	this.nniVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.prenomVerified = null;
           				} else {
           			    	this.prenomVerified = dis.readBoolean();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.INAM,dos);
					
					// String
				
						writeString(this.NNI,dos);
					
					// String
				
						writeString(this.Prenom,dos);
					
					// String
				
						writeString(this.Nom_de_Famille,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Naissance,dos);
					
					// String
				
						writeString(this.Lieu_Naissance,dos);
					
					// char
				
		            	dos.writeChar(this.Genre);
					
					// String
				
						writeString(this.Num_Carte,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Deliv,dos);
					
					// String
				
						writeString(this.Num_Serie,dos);
					
					// String
				
						writeString(this.QR_code,dos);
					
					// String
				
						writeString(this.Photo,dos);
					
					// int
				
		            	dos.writeInt(this.score);
					
					// Boolean
				
						if(this.numSerieVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.numSerieVerified);
		            	}
					
					// Boolean
				
						if(this.inamVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.inamVerified);
		            	}
					
					// Boolean
				
						if(this.nniVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.nniVerified);
		            	}
					
					// Boolean
				
						if(this.prenomVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.prenomVerified);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("INAM="+INAM);
		sb.append(",NNI="+NNI);
		sb.append(",Prenom="+Prenom);
		sb.append(",Nom_de_Famille="+Nom_de_Famille);
		sb.append(",Date_Naissance="+String.valueOf(Date_Naissance));
		sb.append(",Lieu_Naissance="+Lieu_Naissance);
		sb.append(",Genre="+String.valueOf(Genre));
		sb.append(",Num_Carte="+Num_Carte);
		sb.append(",Date_Deliv="+String.valueOf(Date_Deliv));
		sb.append(",Num_Serie="+Num_Serie);
		sb.append(",QR_code="+QR_code);
		sb.append(",Photo="+Photo);
		sb.append(",score="+String.valueOf(score));
		sb.append(",numSerieVerified="+String.valueOf(numSerieVerified));
		sb.append(",inamVerified="+String.valueOf(inamVerified));
		sb.append(",nniVerified="+String.valueOf(nniVerified));
		sb.append(",prenomVerified="+String.valueOf(prenomVerified));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];
    static byte[] commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];

	
			    public String INAM;

				public String getINAM () {
					return this.INAM;
				}
				
			    public String NNI;

				public String getNNI () {
					return this.NNI;
				}
				
			    public String Prenom;

				public String getPrenom () {
					return this.Prenom;
				}
				
			    public String Nom_de_Famille;

				public String getNom_de_Famille () {
					return this.Nom_de_Famille;
				}
				
			    public java.util.Date Date_Naissance;

				public java.util.Date getDate_Naissance () {
					return this.Date_Naissance;
				}
				
			    public String Lieu_Naissance;

				public String getLieu_Naissance () {
					return this.Lieu_Naissance;
				}
				
			    public char Genre = ' ';

				public char getGenre () {
					return this.Genre;
				}
				
			    public String Num_Carte;

				public String getNum_Carte () {
					return this.Num_Carte;
				}
				
			    public java.util.Date Date_Deliv;

				public java.util.Date getDate_Deliv () {
					return this.Date_Deliv;
				}
				
			    public String Num_Serie;

				public String getNum_Serie () {
					return this.Num_Serie;
				}
				
			    public String QR_code;

				public String getQR_code () {
					return this.QR_code;
				}
				
			    public String Photo;

				public String getPhoto () {
					return this.Photo;
				}
				
			    public int score;

				public int getScore () {
					return this.score;
				}
				
			    public Boolean numSerieVerified;

				public Boolean getNumSerieVerified () {
					return this.numSerieVerified;
				}
				
			    public Boolean inamVerified;

				public Boolean getInamVerified () {
					return this.inamVerified;
				}
				
			    public Boolean nniVerified;

				public Boolean getNniVerified () {
					return this.nniVerified;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length) {
				if(length < 1024 && commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length == 0) {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[1024];
				} else {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length);
			strReturn = new String(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing) {

        	try {

        		int length = 0;
		
					this.INAM = readString(dis);
					
					this.NNI = readString(dis);
					
					this.Prenom = readString(dis);
					
					this.Nom_de_Famille = readString(dis);
					
					this.Date_Naissance = readDate(dis);
					
					this.Lieu_Naissance = readString(dis);
					
			        this.Genre = dis.readChar();
					
					this.Num_Carte = readString(dis);
					
					this.Date_Deliv = readDate(dis);
					
					this.Num_Serie = readString(dis);
					
					this.QR_code = readString(dis);
					
					this.Photo = readString(dis);
					
			        this.score = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.numSerieVerified = null;
           				} else {
           			    	this.numSerieVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.inamVerified = null;
           				} else {
           			    	this.inamVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nniVerified = null;
           				} else {
           			    	this.nniVerified = dis.readBoolean();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.INAM,dos);
					
					// String
				
						writeString(this.NNI,dos);
					
					// String
				
						writeString(this.Prenom,dos);
					
					// String
				
						writeString(this.Nom_de_Famille,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Naissance,dos);
					
					// String
				
						writeString(this.Lieu_Naissance,dos);
					
					// char
				
		            	dos.writeChar(this.Genre);
					
					// String
				
						writeString(this.Num_Carte,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Deliv,dos);
					
					// String
				
						writeString(this.Num_Serie,dos);
					
					// String
				
						writeString(this.QR_code,dos);
					
					// String
				
						writeString(this.Photo,dos);
					
					// int
				
		            	dos.writeInt(this.score);
					
					// Boolean
				
						if(this.numSerieVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.numSerieVerified);
		            	}
					
					// Boolean
				
						if(this.inamVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.inamVerified);
		            	}
					
					// Boolean
				
						if(this.nniVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.nniVerified);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("INAM="+INAM);
		sb.append(",NNI="+NNI);
		sb.append(",Prenom="+Prenom);
		sb.append(",Nom_de_Famille="+Nom_de_Famille);
		sb.append(",Date_Naissance="+String.valueOf(Date_Naissance));
		sb.append(",Lieu_Naissance="+Lieu_Naissance);
		sb.append(",Genre="+String.valueOf(Genre));
		sb.append(",Num_Carte="+Num_Carte);
		sb.append(",Date_Deliv="+String.valueOf(Date_Deliv));
		sb.append(",Num_Serie="+Num_Serie);
		sb.append(",QR_code="+QR_code);
		sb.append(",Photo="+Photo);
		sb.append(",score="+String.valueOf(score));
		sb.append(",numSerieVerified="+String.valueOf(numSerieVerified));
		sb.append(",inamVerified="+String.valueOf(inamVerified));
		sb.append(",nniVerified="+String.valueOf(nniVerified));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];
    static byte[] commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];

	
			    public String INAM;

				public String getINAM () {
					return this.INAM;
				}
				
			    public String NNI;

				public String getNNI () {
					return this.NNI;
				}
				
			    public String Prenom;

				public String getPrenom () {
					return this.Prenom;
				}
				
			    public String Nom_de_Famille;

				public String getNom_de_Famille () {
					return this.Nom_de_Famille;
				}
				
			    public java.util.Date Date_Naissance;

				public java.util.Date getDate_Naissance () {
					return this.Date_Naissance;
				}
				
			    public String Lieu_Naissance;

				public String getLieu_Naissance () {
					return this.Lieu_Naissance;
				}
				
			    public char Genre = ' ';

				public char getGenre () {
					return this.Genre;
				}
				
			    public String Num_Carte;

				public String getNum_Carte () {
					return this.Num_Carte;
				}
				
			    public java.util.Date Date_Deliv;

				public java.util.Date getDate_Deliv () {
					return this.Date_Deliv;
				}
				
			    public String Num_Serie;

				public String getNum_Serie () {
					return this.Num_Serie;
				}
				
			    public String QR_code;

				public String getQR_code () {
					return this.QR_code;
				}
				
			    public String Photo;

				public String getPhoto () {
					return this.Photo;
				}
				
			    public int score;

				public int getScore () {
					return this.score;
				}
				
			    public Boolean numSerieVerified;

				public Boolean getNumSerieVerified () {
					return this.numSerieVerified;
				}
				
			    public Boolean inamVerified;

				public Boolean getInamVerified () {
					return this.inamVerified;
				}
				
			    public Boolean nniVerified;

				public Boolean getNniVerified () {
					return this.nniVerified;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length) {
				if(length < 1024 && commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length == 0) {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[1024];
				} else {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length);
			strReturn = new String(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing) {

        	try {

        		int length = 0;
		
					this.INAM = readString(dis);
					
					this.NNI = readString(dis);
					
					this.Prenom = readString(dis);
					
					this.Nom_de_Famille = readString(dis);
					
					this.Date_Naissance = readDate(dis);
					
					this.Lieu_Naissance = readString(dis);
					
			        this.Genre = dis.readChar();
					
					this.Num_Carte = readString(dis);
					
					this.Date_Deliv = readDate(dis);
					
					this.Num_Serie = readString(dis);
					
					this.QR_code = readString(dis);
					
					this.Photo = readString(dis);
					
			        this.score = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.numSerieVerified = null;
           				} else {
           			    	this.numSerieVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.inamVerified = null;
           				} else {
           			    	this.inamVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nniVerified = null;
           				} else {
           			    	this.nniVerified = dis.readBoolean();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.INAM,dos);
					
					// String
				
						writeString(this.NNI,dos);
					
					// String
				
						writeString(this.Prenom,dos);
					
					// String
				
						writeString(this.Nom_de_Famille,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Naissance,dos);
					
					// String
				
						writeString(this.Lieu_Naissance,dos);
					
					// char
				
		            	dos.writeChar(this.Genre);
					
					// String
				
						writeString(this.Num_Carte,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Deliv,dos);
					
					// String
				
						writeString(this.Num_Serie,dos);
					
					// String
				
						writeString(this.QR_code,dos);
					
					// String
				
						writeString(this.Photo,dos);
					
					// int
				
		            	dos.writeInt(this.score);
					
					// Boolean
				
						if(this.numSerieVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.numSerieVerified);
		            	}
					
					// Boolean
				
						if(this.inamVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.inamVerified);
		            	}
					
					// Boolean
				
						if(this.nniVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.nniVerified);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("INAM="+INAM);
		sb.append(",NNI="+NNI);
		sb.append(",Prenom="+Prenom);
		sb.append(",Nom_de_Famille="+Nom_de_Famille);
		sb.append(",Date_Naissance="+String.valueOf(Date_Naissance));
		sb.append(",Lieu_Naissance="+Lieu_Naissance);
		sb.append(",Genre="+String.valueOf(Genre));
		sb.append(",Num_Carte="+Num_Carte);
		sb.append(",Date_Deliv="+String.valueOf(Date_Deliv));
		sb.append(",Num_Serie="+Num_Serie);
		sb.append(",QR_code="+QR_code);
		sb.append(",Photo="+Photo);
		sb.append(",score="+String.valueOf(score));
		sb.append(",numSerieVerified="+String.valueOf(numSerieVerified));
		sb.append(",inamVerified="+String.valueOf(inamVerified));
		sb.append(",nniVerified="+String.valueOf(nniVerified));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];
    static byte[] commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];

	
			    public String INAM;

				public String getINAM () {
					return this.INAM;
				}
				
			    public String NNI;

				public String getNNI () {
					return this.NNI;
				}
				
			    public String Prenom;

				public String getPrenom () {
					return this.Prenom;
				}
				
			    public String Nom_de_Famille;

				public String getNom_de_Famille () {
					return this.Nom_de_Famille;
				}
				
			    public java.util.Date Date_Naissance;

				public java.util.Date getDate_Naissance () {
					return this.Date_Naissance;
				}
				
			    public String Lieu_Naissance;

				public String getLieu_Naissance () {
					return this.Lieu_Naissance;
				}
				
			    public char Genre = ' ';

				public char getGenre () {
					return this.Genre;
				}
				
			    public String Num_Carte;

				public String getNum_Carte () {
					return this.Num_Carte;
				}
				
			    public java.util.Date Date_Deliv;

				public java.util.Date getDate_Deliv () {
					return this.Date_Deliv;
				}
				
			    public String Num_Serie;

				public String getNum_Serie () {
					return this.Num_Serie;
				}
				
			    public String QR_code;

				public String getQR_code () {
					return this.QR_code;
				}
				
			    public String Photo;

				public String getPhoto () {
					return this.Photo;
				}
				
			    public int score;

				public int getScore () {
					return this.score;
				}
				
			    public Boolean numSerieVerified;

				public Boolean getNumSerieVerified () {
					return this.numSerieVerified;
				}
				
			    public Boolean inamVerified;

				public Boolean getInamVerified () {
					return this.inamVerified;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length) {
				if(length < 1024 && commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length == 0) {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[1024];
				} else {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length);
			strReturn = new String(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing) {

        	try {

        		int length = 0;
		
					this.INAM = readString(dis);
					
					this.NNI = readString(dis);
					
					this.Prenom = readString(dis);
					
					this.Nom_de_Famille = readString(dis);
					
					this.Date_Naissance = readDate(dis);
					
					this.Lieu_Naissance = readString(dis);
					
			        this.Genre = dis.readChar();
					
					this.Num_Carte = readString(dis);
					
					this.Date_Deliv = readDate(dis);
					
					this.Num_Serie = readString(dis);
					
					this.QR_code = readString(dis);
					
					this.Photo = readString(dis);
					
			        this.score = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.numSerieVerified = null;
           				} else {
           			    	this.numSerieVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.inamVerified = null;
           				} else {
           			    	this.inamVerified = dis.readBoolean();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.INAM,dos);
					
					// String
				
						writeString(this.NNI,dos);
					
					// String
				
						writeString(this.Prenom,dos);
					
					// String
				
						writeString(this.Nom_de_Famille,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Naissance,dos);
					
					// String
				
						writeString(this.Lieu_Naissance,dos);
					
					// char
				
		            	dos.writeChar(this.Genre);
					
					// String
				
						writeString(this.Num_Carte,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Deliv,dos);
					
					// String
				
						writeString(this.Num_Serie,dos);
					
					// String
				
						writeString(this.QR_code,dos);
					
					// String
				
						writeString(this.Photo,dos);
					
					// int
				
		            	dos.writeInt(this.score);
					
					// Boolean
				
						if(this.numSerieVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.numSerieVerified);
		            	}
					
					// Boolean
				
						if(this.inamVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.inamVerified);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("INAM="+INAM);
		sb.append(",NNI="+NNI);
		sb.append(",Prenom="+Prenom);
		sb.append(",Nom_de_Famille="+Nom_de_Famille);
		sb.append(",Date_Naissance="+String.valueOf(Date_Naissance));
		sb.append(",Lieu_Naissance="+Lieu_Naissance);
		sb.append(",Genre="+String.valueOf(Genre));
		sb.append(",Num_Carte="+Num_Carte);
		sb.append(",Date_Deliv="+String.valueOf(Date_Deliv));
		sb.append(",Num_Serie="+Num_Serie);
		sb.append(",QR_code="+QR_code);
		sb.append(",Photo="+Photo);
		sb.append(",score="+String.valueOf(score));
		sb.append(",numSerieVerified="+String.valueOf(numSerieVerified));
		sb.append(",inamVerified="+String.valueOf(inamVerified));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];
    static byte[] commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];

	
			    public String INAM;

				public String getINAM () {
					return this.INAM;
				}
				
			    public String NNI;

				public String getNNI () {
					return this.NNI;
				}
				
			    public String Prenom;

				public String getPrenom () {
					return this.Prenom;
				}
				
			    public String Nom_de_Famille;

				public String getNom_de_Famille () {
					return this.Nom_de_Famille;
				}
				
			    public java.util.Date Date_Naissance;

				public java.util.Date getDate_Naissance () {
					return this.Date_Naissance;
				}
				
			    public String Lieu_Naissance;

				public String getLieu_Naissance () {
					return this.Lieu_Naissance;
				}
				
			    public char Genre = ' ';

				public char getGenre () {
					return this.Genre;
				}
				
			    public String Num_Carte;

				public String getNum_Carte () {
					return this.Num_Carte;
				}
				
			    public java.util.Date Date_Deliv;

				public java.util.Date getDate_Deliv () {
					return this.Date_Deliv;
				}
				
			    public String Num_Serie;

				public String getNum_Serie () {
					return this.Num_Serie;
				}
				
			    public String QR_code;

				public String getQR_code () {
					return this.QR_code;
				}
				
			    public String Photo;

				public String getPhoto () {
					return this.Photo;
				}
				
			    public int score;

				public int getScore () {
					return this.score;
				}
				
			    public Boolean numSerieVerified;

				public Boolean getNumSerieVerified () {
					return this.numSerieVerified;
				}
				
			    public Boolean inamVerified;

				public Boolean getInamVerified () {
					return this.inamVerified;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length) {
				if(length < 1024 && commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length == 0) {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[1024];
				} else {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length);
			strReturn = new String(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing) {

        	try {

        		int length = 0;
		
					this.INAM = readString(dis);
					
					this.NNI = readString(dis);
					
					this.Prenom = readString(dis);
					
					this.Nom_de_Famille = readString(dis);
					
					this.Date_Naissance = readDate(dis);
					
					this.Lieu_Naissance = readString(dis);
					
			        this.Genre = dis.readChar();
					
					this.Num_Carte = readString(dis);
					
					this.Date_Deliv = readDate(dis);
					
					this.Num_Serie = readString(dis);
					
					this.QR_code = readString(dis);
					
					this.Photo = readString(dis);
					
			        this.score = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.numSerieVerified = null;
           				} else {
           			    	this.numSerieVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.inamVerified = null;
           				} else {
           			    	this.inamVerified = dis.readBoolean();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.INAM,dos);
					
					// String
				
						writeString(this.NNI,dos);
					
					// String
				
						writeString(this.Prenom,dos);
					
					// String
				
						writeString(this.Nom_de_Famille,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Naissance,dos);
					
					// String
				
						writeString(this.Lieu_Naissance,dos);
					
					// char
				
		            	dos.writeChar(this.Genre);
					
					// String
				
						writeString(this.Num_Carte,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Deliv,dos);
					
					// String
				
						writeString(this.Num_Serie,dos);
					
					// String
				
						writeString(this.QR_code,dos);
					
					// String
				
						writeString(this.Photo,dos);
					
					// int
				
		            	dos.writeInt(this.score);
					
					// Boolean
				
						if(this.numSerieVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.numSerieVerified);
		            	}
					
					// Boolean
				
						if(this.inamVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.inamVerified);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("INAM="+INAM);
		sb.append(",NNI="+NNI);
		sb.append(",Prenom="+Prenom);
		sb.append(",Nom_de_Famille="+Nom_de_Famille);
		sb.append(",Date_Naissance="+String.valueOf(Date_Naissance));
		sb.append(",Lieu_Naissance="+Lieu_Naissance);
		sb.append(",Genre="+String.valueOf(Genre));
		sb.append(",Num_Carte="+Num_Carte);
		sb.append(",Date_Deliv="+String.valueOf(Date_Deliv));
		sb.append(",Num_Serie="+Num_Serie);
		sb.append(",QR_code="+QR_code);
		sb.append(",Photo="+Photo);
		sb.append(",score="+String.valueOf(score));
		sb.append(",numSerieVerified="+String.valueOf(numSerieVerified));
		sb.append(",inamVerified="+String.valueOf(inamVerified));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];
    static byte[] commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];

	
			    public String INAM;

				public String getINAM () {
					return this.INAM;
				}
				
			    public String NNI;

				public String getNNI () {
					return this.NNI;
				}
				
			    public String Prenom;

				public String getPrenom () {
					return this.Prenom;
				}
				
			    public String Nom_de_Famille;

				public String getNom_de_Famille () {
					return this.Nom_de_Famille;
				}
				
			    public java.util.Date Date_Naissance;

				public java.util.Date getDate_Naissance () {
					return this.Date_Naissance;
				}
				
			    public String Lieu_Naissance;

				public String getLieu_Naissance () {
					return this.Lieu_Naissance;
				}
				
			    public char Genre = ' ';

				public char getGenre () {
					return this.Genre;
				}
				
			    public String Num_Carte;

				public String getNum_Carte () {
					return this.Num_Carte;
				}
				
			    public java.util.Date Date_Deliv;

				public java.util.Date getDate_Deliv () {
					return this.Date_Deliv;
				}
				
			    public String Num_Serie;

				public String getNum_Serie () {
					return this.Num_Serie;
				}
				
			    public String QR_code;

				public String getQR_code () {
					return this.QR_code;
				}
				
			    public String Photo;

				public String getPhoto () {
					return this.Photo;
				}
				
			    public int score;

				public int getScore () {
					return this.score;
				}
				
			    public Boolean numSerieVerified;

				public Boolean getNumSerieVerified () {
					return this.numSerieVerified;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length) {
				if(length < 1024 && commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length == 0) {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[1024];
				} else {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length);
			strReturn = new String(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing) {

        	try {

        		int length = 0;
		
					this.INAM = readString(dis);
					
					this.NNI = readString(dis);
					
					this.Prenom = readString(dis);
					
					this.Nom_de_Famille = readString(dis);
					
					this.Date_Naissance = readDate(dis);
					
					this.Lieu_Naissance = readString(dis);
					
			        this.Genre = dis.readChar();
					
					this.Num_Carte = readString(dis);
					
					this.Date_Deliv = readDate(dis);
					
					this.Num_Serie = readString(dis);
					
					this.QR_code = readString(dis);
					
					this.Photo = readString(dis);
					
			        this.score = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.numSerieVerified = null;
           				} else {
           			    	this.numSerieVerified = dis.readBoolean();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.INAM,dos);
					
					// String
				
						writeString(this.NNI,dos);
					
					// String
				
						writeString(this.Prenom,dos);
					
					// String
				
						writeString(this.Nom_de_Famille,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Naissance,dos);
					
					// String
				
						writeString(this.Lieu_Naissance,dos);
					
					// char
				
		            	dos.writeChar(this.Genre);
					
					// String
				
						writeString(this.Num_Carte,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Deliv,dos);
					
					// String
				
						writeString(this.Num_Serie,dos);
					
					// String
				
						writeString(this.QR_code,dos);
					
					// String
				
						writeString(this.Photo,dos);
					
					// int
				
		            	dos.writeInt(this.score);
					
					// Boolean
				
						if(this.numSerieVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.numSerieVerified);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("INAM="+INAM);
		sb.append(",NNI="+NNI);
		sb.append(",Prenom="+Prenom);
		sb.append(",Nom_de_Famille="+Nom_de_Famille);
		sb.append(",Date_Naissance="+String.valueOf(Date_Naissance));
		sb.append(",Lieu_Naissance="+Lieu_Naissance);
		sb.append(",Genre="+String.valueOf(Genre));
		sb.append(",Num_Carte="+Num_Carte);
		sb.append(",Date_Deliv="+String.valueOf(Date_Deliv));
		sb.append(",Num_Serie="+Num_Serie);
		sb.append(",QR_code="+QR_code);
		sb.append(",Photo="+Photo);
		sb.append(",score="+String.valueOf(score));
		sb.append(",numSerieVerified="+String.valueOf(numSerieVerified));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];
    static byte[] commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];

	
			    public String INAM;

				public String getINAM () {
					return this.INAM;
				}
				
			    public String NNI;

				public String getNNI () {
					return this.NNI;
				}
				
			    public String Prenom;

				public String getPrenom () {
					return this.Prenom;
				}
				
			    public String Nom_de_Famille;

				public String getNom_de_Famille () {
					return this.Nom_de_Famille;
				}
				
			    public java.util.Date Date_Naissance;

				public java.util.Date getDate_Naissance () {
					return this.Date_Naissance;
				}
				
			    public String Lieu_Naissance;

				public String getLieu_Naissance () {
					return this.Lieu_Naissance;
				}
				
			    public char Genre = ' ';

				public char getGenre () {
					return this.Genre;
				}
				
			    public String Num_Carte;

				public String getNum_Carte () {
					return this.Num_Carte;
				}
				
			    public java.util.Date Date_Deliv;

				public java.util.Date getDate_Deliv () {
					return this.Date_Deliv;
				}
				
			    public String Num_Serie;

				public String getNum_Serie () {
					return this.Num_Serie;
				}
				
			    public String QR_code;

				public String getQR_code () {
					return this.QR_code;
				}
				
			    public String Photo;

				public String getPhoto () {
					return this.Photo;
				}
				
			    public int score;

				public int getScore () {
					return this.score;
				}
				
			    public Boolean numSerieVerified;

				public Boolean getNumSerieVerified () {
					return this.numSerieVerified;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length) {
				if(length < 1024 && commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length == 0) {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[1024];
				} else {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length);
			strReturn = new String(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing) {

        	try {

        		int length = 0;
		
					this.INAM = readString(dis);
					
					this.NNI = readString(dis);
					
					this.Prenom = readString(dis);
					
					this.Nom_de_Famille = readString(dis);
					
					this.Date_Naissance = readDate(dis);
					
					this.Lieu_Naissance = readString(dis);
					
			        this.Genre = dis.readChar();
					
					this.Num_Carte = readString(dis);
					
					this.Date_Deliv = readDate(dis);
					
					this.Num_Serie = readString(dis);
					
					this.QR_code = readString(dis);
					
					this.Photo = readString(dis);
					
			        this.score = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.numSerieVerified = null;
           				} else {
           			    	this.numSerieVerified = dis.readBoolean();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.INAM,dos);
					
					// String
				
						writeString(this.NNI,dos);
					
					// String
				
						writeString(this.Prenom,dos);
					
					// String
				
						writeString(this.Nom_de_Famille,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Naissance,dos);
					
					// String
				
						writeString(this.Lieu_Naissance,dos);
					
					// char
				
		            	dos.writeChar(this.Genre);
					
					// String
				
						writeString(this.Num_Carte,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Deliv,dos);
					
					// String
				
						writeString(this.Num_Serie,dos);
					
					// String
				
						writeString(this.QR_code,dos);
					
					// String
				
						writeString(this.Photo,dos);
					
					// int
				
		            	dos.writeInt(this.score);
					
					// Boolean
				
						if(this.numSerieVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.numSerieVerified);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("INAM="+INAM);
		sb.append(",NNI="+NNI);
		sb.append(",Prenom="+Prenom);
		sb.append(",Nom_de_Famille="+Nom_de_Famille);
		sb.append(",Date_Naissance="+String.valueOf(Date_Naissance));
		sb.append(",Lieu_Naissance="+Lieu_Naissance);
		sb.append(",Genre="+String.valueOf(Genre));
		sb.append(",Num_Carte="+Num_Carte);
		sb.append(",Date_Deliv="+String.valueOf(Date_Deliv));
		sb.append(",Num_Serie="+Num_Serie);
		sb.append(",QR_code="+QR_code);
		sb.append(",Photo="+Photo);
		sb.append(",score="+String.valueOf(score));
		sb.append(",numSerieVerified="+String.valueOf(numSerieVerified));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];
    static byte[] commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];

	
			    public String INAM;

				public String getINAM () {
					return this.INAM;
				}
				
			    public String NNI;

				public String getNNI () {
					return this.NNI;
				}
				
			    public String Prenom;

				public String getPrenom () {
					return this.Prenom;
				}
				
			    public String Nom_de_Famille;

				public String getNom_de_Famille () {
					return this.Nom_de_Famille;
				}
				
			    public java.util.Date Date_Naissance;

				public java.util.Date getDate_Naissance () {
					return this.Date_Naissance;
				}
				
			    public String Lieu_Naissance;

				public String getLieu_Naissance () {
					return this.Lieu_Naissance;
				}
				
			    public char Genre = ' ';

				public char getGenre () {
					return this.Genre;
				}
				
			    public String Num_Carte;

				public String getNum_Carte () {
					return this.Num_Carte;
				}
				
			    public java.util.Date Date_Deliv;

				public java.util.Date getDate_Deliv () {
					return this.Date_Deliv;
				}
				
			    public String Num_Serie;

				public String getNum_Serie () {
					return this.Num_Serie;
				}
				
			    public String QR_code;

				public String getQR_code () {
					return this.QR_code;
				}
				
			    public String Photo;

				public String getPhoto () {
					return this.Photo;
				}
				
			    public int score;

				public int getScore () {
					return this.score;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length) {
				if(length < 1024 && commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length == 0) {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[1024];
				} else {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length);
			strReturn = new String(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing) {

        	try {

        		int length = 0;
		
					this.INAM = readString(dis);
					
					this.NNI = readString(dis);
					
					this.Prenom = readString(dis);
					
					this.Nom_de_Famille = readString(dis);
					
					this.Date_Naissance = readDate(dis);
					
					this.Lieu_Naissance = readString(dis);
					
			        this.Genre = dis.readChar();
					
					this.Num_Carte = readString(dis);
					
					this.Date_Deliv = readDate(dis);
					
					this.Num_Serie = readString(dis);
					
					this.QR_code = readString(dis);
					
					this.Photo = readString(dis);
					
			        this.score = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.INAM,dos);
					
					// String
				
						writeString(this.NNI,dos);
					
					// String
				
						writeString(this.Prenom,dos);
					
					// String
				
						writeString(this.Nom_de_Famille,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Naissance,dos);
					
					// String
				
						writeString(this.Lieu_Naissance,dos);
					
					// char
				
		            	dos.writeChar(this.Genre);
					
					// String
				
						writeString(this.Num_Carte,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Deliv,dos);
					
					// String
				
						writeString(this.Num_Serie,dos);
					
					// String
				
						writeString(this.QR_code,dos);
					
					// String
				
						writeString(this.Photo,dos);
					
					// int
				
		            	dos.writeInt(this.score);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("INAM="+INAM);
		sb.append(",NNI="+NNI);
		sb.append(",Prenom="+Prenom);
		sb.append(",Nom_de_Famille="+Nom_de_Famille);
		sb.append(",Date_Naissance="+String.valueOf(Date_Naissance));
		sb.append(",Lieu_Naissance="+Lieu_Naissance);
		sb.append(",Genre="+String.valueOf(Genre));
		sb.append(",Num_Carte="+Num_Carte);
		sb.append(",Date_Deliv="+String.valueOf(Date_Deliv));
		sb.append(",Num_Serie="+Num_Serie);
		sb.append(",QR_code="+QR_code);
		sb.append(",Photo="+Photo);
		sb.append(",score="+String.valueOf(score));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
row2Struct row2 = new row2Struct();
row2Struct row3 = row2;
row4Struct row4 = new row4Struct();
row4Struct row5 = row4;
row6Struct row6 = new row6Struct();
row6Struct row7 = row6;
row8Struct row8 = new row8Struct();
row8Struct row9 = row8;
row10Struct row10 = new row10Struct();
row10Struct row11 = row10;
row12Struct row12 = new row12Struct();
row12Struct row13 = row12;
row14Struct row14 = new row14Struct();
row14Struct row15 = row14;
row16Struct row16 = new row16Struct();
row16Struct row17 = row16;
row18Struct row18 = new row18Struct();
row18Struct row19 = row18;
row20Struct row20 = new row20Struct();
row20Struct row21 = row20;
row24Struct row24 = new row24Struct();
row24Struct row26 = row24;
row28Struct row28 = new row28Struct();
row25Struct row25 = new row25Struct();
row25Struct row27 = row25;
row29Struct row29 = new row29Struct();



























	
	/**
	 * [tHashOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_1", false);
		start_Hash.put("tHashOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row28");
					}
				
		int tos_count_tHashOutput_1 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row28Struct> tHashFile_tHashOutput_1 = null;
		String hashKey_tHashOutput_1 = "tHashFile_cnam_bulk_data_processing_" + pid + "_tHashOutput_1";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_1)){
				mf_tHashOutput_1.getResourceMap().put(hashKey_tHashOutput_1, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row28Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
				tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			}
        int nb_line_tHashOutput_1 = 0;
 



/**
 * [tHashOutput_1 begin ] stop
 */



	
	/**
	 * [tJavaRow_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_11", false);
		start_Hash.put("tJavaRow_11", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_11";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row26");
					}
				
		int tos_count_tJavaRow_11 = 0;
		

int nb_line_tJavaRow_11 = 0;

 



/**
 * [tJavaRow_11 begin ] stop
 */



	
	/**
	 * [tLogRow_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_11", false);
		start_Hash.put("tLogRow_11", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_11";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row24");
					}
				
		int tos_count_tLogRow_11 = 0;
		

 



/**
 * [tLogRow_11 begin ] stop
 */






	
	/**
	 * [tHashOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_2", false);
		start_Hash.put("tHashOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row29");
					}
				
		int tos_count_tHashOutput_2 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row29Struct> tHashFile_tHashOutput_2 = null;
		String hashKey_tHashOutput_2 = "tHashFile_cnam_bulk_data_processing_" + pid + "_tHashOutput_2";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_2)){
				mf_tHashOutput_2.getResourceMap().put(hashKey_tHashOutput_2, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row29Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
				tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			}
        int nb_line_tHashOutput_2 = 0;
 



/**
 * [tHashOutput_2 begin ] stop
 */



	
	/**
	 * [tJavaRow_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_12", false);
		start_Hash.put("tJavaRow_12", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_12";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row27");
					}
				
		int tos_count_tJavaRow_12 = 0;
		

int nb_line_tJavaRow_12 = 0;

 



/**
 * [tJavaRow_12 begin ] stop
 */



	
	/**
	 * [tLogRow_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_12", false);
		start_Hash.put("tLogRow_12", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_12";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row25");
					}
				
		int tos_count_tLogRow_12 = 0;
		

 



/**
 * [tLogRow_12 begin ] stop
 */



	
	/**
	 * [tUniqRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_1", false);
		start_Hash.put("tUniqRow_1", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row21");
					}
				
		int tos_count_tUniqRow_1 = 0;
		

	
		class KeyStruct_tUniqRow_1 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String INAM;
					String NNI;
					String Num_Carte;
					String Num_Serie;
					String QR_code;
					String Photo;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.INAM == null) ? 0 : this.INAM.hashCode());
								
								result = prime * result + ((this.NNI == null) ? 0 : this.NNI.hashCode());
								
								result = prime * result + ((this.Num_Carte == null) ? 0 : this.Num_Carte.hashCode());
								
								result = prime * result + ((this.Num_Serie == null) ? 0 : this.Num_Serie.hashCode());
								
								result = prime * result + ((this.QR_code == null) ? 0 : this.QR_code.hashCode());
								
								result = prime * result + ((this.Photo == null) ? 0 : this.Photo.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_1 other = (KeyStruct_tUniqRow_1) obj;
				
									if (this.INAM == null) {
										if (other.INAM != null) 
											return false;
								
									} else if (!this.INAM.equals(other.INAM))
								 
										return false;
								
									if (this.NNI == null) {
										if (other.NNI != null) 
											return false;
								
									} else if (!this.NNI.equals(other.NNI))
								 
										return false;
								
									if (this.Num_Carte == null) {
										if (other.Num_Carte != null) 
											return false;
								
									} else if (!this.Num_Carte.equals(other.Num_Carte))
								 
										return false;
								
									if (this.Num_Serie == null) {
										if (other.Num_Serie != null) 
											return false;
								
									} else if (!this.Num_Serie.equals(other.Num_Serie))
								 
										return false;
								
									if (this.QR_code == null) {
										if (other.QR_code != null) 
											return false;
								
									} else if (!this.QR_code.equals(other.QR_code))
								 
										return false;
								
									if (this.Photo == null) {
										if (other.Photo != null) 
											return false;
								
									} else if (!this.Photo.equals(other.Photo))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_1 = 0;
int nb_duplicates_tUniqRow_1 = 0;
KeyStruct_tUniqRow_1 finder_tUniqRow_1 = new KeyStruct_tUniqRow_1();
java.util.Set<KeyStruct_tUniqRow_1> keystUniqRow_1 = new java.util.HashSet<KeyStruct_tUniqRow_1>(); 

 



/**
 * [tUniqRow_1 begin ] stop
 */



	
	/**
	 * [tLogRow_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_10", false);
		start_Hash.put("tLogRow_10", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_10";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row20");
					}
				
		int tos_count_tLogRow_10 = 0;
		

 



/**
 * [tLogRow_10 begin ] stop
 */



	
	/**
	 * [tJavaRow_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_10", false);
		start_Hash.put("tJavaRow_10", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_10";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row19");
					}
				
		int tos_count_tJavaRow_10 = 0;
		

int nb_line_tJavaRow_10 = 0;

 



/**
 * [tJavaRow_10 begin ] stop
 */



	
	/**
	 * [tLogRow_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_9", false);
		start_Hash.put("tLogRow_9", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_9";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row18");
					}
				
		int tos_count_tLogRow_9 = 0;
		

 



/**
 * [tLogRow_9 begin ] stop
 */



	
	/**
	 * [tJavaRow_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_9", false);
		start_Hash.put("tJavaRow_9", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_9";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row17");
					}
				
		int tos_count_tJavaRow_9 = 0;
		

int nb_line_tJavaRow_9 = 0;

 



/**
 * [tJavaRow_9 begin ] stop
 */



	
	/**
	 * [tLogRow_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_8", false);
		start_Hash.put("tLogRow_8", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_8";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row16");
					}
				
		int tos_count_tLogRow_8 = 0;
		

 



/**
 * [tLogRow_8 begin ] stop
 */



	
	/**
	 * [tJavaRow_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_8", false);
		start_Hash.put("tJavaRow_8", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_8";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row15");
					}
				
		int tos_count_tJavaRow_8 = 0;
		

int nb_line_tJavaRow_8 = 0;

 



/**
 * [tJavaRow_8 begin ] stop
 */



	
	/**
	 * [tLogRow_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_7", false);
		start_Hash.put("tLogRow_7", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_7";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row14");
					}
				
		int tos_count_tLogRow_7 = 0;
		

 



/**
 * [tLogRow_7 begin ] stop
 */



	
	/**
	 * [tJavaRow_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_7", false);
		start_Hash.put("tJavaRow_7", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_7";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row13");
					}
				
		int tos_count_tJavaRow_7 = 0;
		

int nb_line_tJavaRow_7 = 0;

 



/**
 * [tJavaRow_7 begin ] stop
 */



	
	/**
	 * [tLogRow_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_6", false);
		start_Hash.put("tLogRow_6", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row12");
					}
				
		int tos_count_tLogRow_6 = 0;
		

 



/**
 * [tLogRow_6 begin ] stop
 */



	
	/**
	 * [tJavaRow_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_6", false);
		start_Hash.put("tJavaRow_6", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row11");
					}
				
		int tos_count_tJavaRow_6 = 0;
		

int nb_line_tJavaRow_6 = 0;

 



/**
 * [tJavaRow_6 begin ] stop
 */



	
	/**
	 * [tLogRow_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_5", false);
		start_Hash.put("tLogRow_5", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row10");
					}
				
		int tos_count_tLogRow_5 = 0;
		

 



/**
 * [tLogRow_5 begin ] stop
 */



	
	/**
	 * [tJavaRow_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_5", false);
		start_Hash.put("tJavaRow_5", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row9");
					}
				
		int tos_count_tJavaRow_5 = 0;
		

int nb_line_tJavaRow_5 = 0;

 



/**
 * [tJavaRow_5 begin ] stop
 */



	
	/**
	 * [tLogRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_4", false);
		start_Hash.put("tLogRow_4", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tLogRow_4 = 0;
		

 



/**
 * [tLogRow_4 begin ] stop
 */



	
	/**
	 * [tJavaRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_4", false);
		start_Hash.put("tJavaRow_4", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tJavaRow_4 = 0;
		

int nb_line_tJavaRow_4 = 0;

 



/**
 * [tJavaRow_4 begin ] stop
 */



	
	/**
	 * [tLogRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_3", false);
		start_Hash.put("tLogRow_3", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tLogRow_3 = 0;
		

 



/**
 * [tLogRow_3 begin ] stop
 */



	
	/**
	 * [tJavaRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_3", false);
		start_Hash.put("tJavaRow_3", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tJavaRow_3 = 0;
		

int nb_line_tJavaRow_3 = 0;

 



/**
 * [tJavaRow_3 begin ] stop
 */



	
	/**
	 * [tLogRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_2", false);
		start_Hash.put("tLogRow_2", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tLogRow_2 = 0;
		

 



/**
 * [tLogRow_2 begin ] stop
 */



	
	/**
	 * [tJavaRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_2", false);
		start_Hash.put("tJavaRow_2", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tJavaRow_2 = 0;
		

int nb_line_tJavaRow_2 = 0;

 



/**
 * [tJavaRow_2 begin ] stop
 */



	
	/**
	 * [tLogRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_1", false);
		start_Hash.put("tLogRow_1", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tLogRow_1 = 0;
		

 



/**
 * [tLogRow_1 begin ] stop
 */



	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tJavaRow_1 = 0;
		

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_1", false);
		start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_1";

	
		int tos_count_tFileInputDelimited_1 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try{
					
						Object filename_tFileInputDelimited_1 = context.csvpath;
						if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
			if(footer_value_tFileInputDelimited_1 >0 || random_value_tFileInputDelimited_1 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(context.csvpath, "UTF-8","@","\n",false,1,0,
									limit_tFileInputDelimited_1
								,-1, false);
						} catch(java.lang.Exception e) {
							
								throw e;
							
						}
					
				    
					while (fid_tFileInputDelimited_1!=null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();
						
			    						row1 = null;			
												
									boolean whetherReject_tFileInputDelimited_1 = false;
									row1 = new row1Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_1 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_1 = 0;
					
							row1.INAM = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 1;
					
							row1.NNI = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 2;
					
							row1.Prenom = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 3;
					
							row1.Nom_de_Famille = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 4;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    									row1.Date_Naissance = ParserUtils.parseTo_Date(temp, "dd/MM/yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"Date_Naissance", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.Date_Naissance = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 5;
					
							row1.Lieu_Naissance = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 6;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.Genre = ParserUtils.parseTo_char(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"Genre", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_1.setException(new RuntimeException("Value is empty for column : 'Genre' in 'row1' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 7;
					
							row1.Num_Carte = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 8;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    									row1.Date_Deliv = ParserUtils.parseTo_Date(temp, "dd/MM/yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"Date_Deliv", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.Date_Deliv = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 9;
					
							row1.Num_Serie = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 10;
					
							row1.QR_code = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 11;
					
							row1.Photo = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 12;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.score = ParserUtils.parseTo_int(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"score", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_1.setException(new RuntimeException("Value is empty for column : 'score' in 'row1' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
				
										
										if(rowstate_tFileInputDelimited_1.getException()!=null) {
											throw rowstate_tFileInputDelimited_1.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_1 = true;
			        					
			            					throw(e);
			            				
			    					}
								

 



/**
 * [tFileInputDelimited_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 


	tos_count_tFileInputDelimited_1++;

/**
 * [tFileInputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_begin ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row1");
					}
					

    //Code généré selon les schémas d'entrée et de sortie
row2.INAM = row1.INAM;
row2.NNI = row1.NNI;
row2.Prenom = row1.Prenom;
row2.Nom_de_Famille = row1.Nom_de_Famille;
row2.Date_Naissance = row1.Date_Naissance;
row2.Lieu_Naissance = row1.Lieu_Naissance;
row2.Genre = row1.Genre;
row2.Num_Carte = row1.Num_Carte;
row2.Date_Deliv = row1.Date_Deliv;


//System.out.println("NoLotissement " + globalMap.get("noLotissement"));
//System.out.println("NoCarte " + globalMap.get("noCarte"));

if((Integer) globalMap.get("noCarte") == 500){
  globalMap.put("noCarte", 0);
  
  Integer NoLotiss = (Integer) globalMap.get("noLotissement") + 1;
  globalMap.put("noLotissement", NoLotiss);
}

if((Integer) globalMap.get("noLotissement") == 500){
  globalMap.put("noLotissement", 1);
} 

Integer Carte = (Integer) globalMap.get("noCarte") + 1;

globalMap.put("noCarte", Carte);

String CarteString = String.format("%03d" , Carte);

//System.out.println("CarteString " + CarteString);

Integer Lotissement = (Integer) globalMap.get("noLotissement");

String LotissString = String.format("%03d", Lotissement);

//System.out.println("LotissString" + LotissString);

String num_serie = "01" + LotissString + CarteString;

//System.out.println("Num serie " + num_serie);

if(num_serie.equals(row1.Num_Serie)){
  row2.numSerieVerified = true;
} else {
  row2.numSerieVerified = false;
}


row2.Num_Serie = row1.Num_Serie;




row2.QR_code = row1.QR_code;
row2.Photo = row1.Photo;
row2.score = row1.score;

    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 process_data_begin ] stop
 */

	
	/**
	 * [tLogRow_1 main ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row2");
					}
					

 
     row3 = row2;


	tos_count_tLogRow_1++;

/**
 * [tLogRow_1 main ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_2 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row3");
					}
					

    //Code généré selon les schémas d'entrée et de sortie
row4.INAM = row3.INAM;

row4.inamVerified = false;

if( (row3.INAM.length() == 12 && row3.INAM.matches("[0-9]{12}")) || (row3.INAM.length() == 14 && row3.INAM.split("-")[0].matches("[0-9]{12}") && row3.INAM.split("-")[1].matches("[AR]") ) ){ 

row4.inamVerified = true;

}

row4.NNI = row3.NNI;
row4.Prenom = row3.Prenom;
row4.Nom_de_Famille = row3.Nom_de_Famille;
row4.Date_Naissance = row3.Date_Naissance;
row4.Lieu_Naissance = row3.Lieu_Naissance;
row4.Genre = row3.Genre;
row4.Num_Carte = row3.Num_Carte;
row4.Date_Deliv = row3.Date_Deliv;
row4.Num_Serie = row3.Num_Serie;
row4.QR_code = row3.QR_code;
row4.Photo = row3.Photo;
row4.score = row3.score;
row4.numSerieVerified = row3.numSerieVerified;

    nb_line_tJavaRow_2++;   

 


	tos_count_tJavaRow_2++;

/**
 * [tJavaRow_2 main ] stop
 */
	
	/**
	 * [tJavaRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";

	

 



/**
 * [tJavaRow_2 process_data_begin ] stop
 */

	
	/**
	 * [tLogRow_2 main ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row4");
					}
					

 
     row5 = row4;


	tos_count_tLogRow_2++;

/**
 * [tLogRow_2 main ] stop
 */
	
	/**
	 * [tLogRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_3 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row5");
					}
					

    //Code généré selon les schémas d'entrée et de sortie
row6.INAM = row5.INAM;
row6.NNI = row5.NNI;

row6.nniVerified = false;
if((row5.NNI.length() == 10 && row5.NNI.matches("[0-9]{10}")) ){
  row6.nniVerified = true;
}


row6.Prenom = row5.Prenom;
row6.Nom_de_Famille = row5.Nom_de_Famille;
row6.Date_Naissance = row5.Date_Naissance;
row6.Lieu_Naissance = row5.Lieu_Naissance;
row6.Genre = row5.Genre;
row6.Num_Carte = row5.Num_Carte;
row6.Date_Deliv = row5.Date_Deliv;
row6.Num_Serie = row5.Num_Serie;
row6.QR_code = row5.QR_code;
row6.Photo = row5.Photo;
row6.score = row5.score;
row6.numSerieVerified = row5.numSerieVerified;
row6.inamVerified = row5.inamVerified;


    nb_line_tJavaRow_3++;   

 


	tos_count_tJavaRow_3++;

/**
 * [tJavaRow_3 main ] stop
 */
	
	/**
	 * [tJavaRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";

	

 



/**
 * [tJavaRow_3 process_data_begin ] stop
 */

	
	/**
	 * [tLogRow_3 main ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row6");
					}
					

 
     row7 = row6;


	tos_count_tLogRow_3++;

/**
 * [tLogRow_3 main ] stop
 */
	
	/**
	 * [tLogRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_4 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row7");
					}
					

    //Code généré selon les schémas d'entrée et de sortie
row8.INAM = row7.INAM;
row8.NNI = row7.NNI;
row8.Prenom = row7.Prenom;

row8.prenomVerified = false;
if(!row7.Prenom.trim().equals("") && row7.Prenom.toLowerCase().matches("[ `'a-zA-Z-_.àâçéèêëîïôûùüÿñæ/]+") ){
  row8.prenomVerified = true;
}


row8.Nom_de_Famille = row7.Nom_de_Famille;
row8.Date_Naissance = row7.Date_Naissance;
row8.Lieu_Naissance = row7.Lieu_Naissance;
row8.Genre = row7.Genre;
row8.Num_Carte = row7.Num_Carte;
row8.Date_Deliv = row7.Date_Deliv;
row8.Num_Serie = row7.Num_Serie;
row8.QR_code = row7.QR_code;
row8.Photo = row7.Photo;
row8.score = row7.score;
row8.numSerieVerified = row7.numSerieVerified;
row8.inamVerified = row7.inamVerified;
row8.nniVerified = row7.nniVerified;


    nb_line_tJavaRow_4++;   

 


	tos_count_tJavaRow_4++;

/**
 * [tJavaRow_4 main ] stop
 */
	
	/**
	 * [tJavaRow_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";

	

 



/**
 * [tJavaRow_4 process_data_begin ] stop
 */

	
	/**
	 * [tLogRow_4 main ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row8");
					}
					

 
     row9 = row8;


	tos_count_tLogRow_4++;

/**
 * [tLogRow_4 main ] stop
 */
	
	/**
	 * [tLogRow_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	

 



/**
 * [tLogRow_4 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_5 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row9");
					}
					

    //Code généré selon les schémas d'entrée et de sortie
row10.INAM = row9.INAM;
row10.NNI = row9.NNI;
row10.Prenom = row9.Prenom;
row10.Nom_de_Famille = row9.Nom_de_Famille;


row10.nomdefamilleVerified = false;
if( !row9.Nom_de_Famille.trim().equals("") && row9.Nom_de_Famille.toLowerCase().matches("[ `'a-zA-Z-_.àâçéèêëîïôûùüÿñæ/]+")){
  row10.nomdefamilleVerified = true;
}

row10.Date_Naissance = row9.Date_Naissance;
row10.Lieu_Naissance = row9.Lieu_Naissance;
row10.Genre = row9.Genre;
row10.Num_Carte = row9.Num_Carte;
row10.Date_Deliv = row9.Date_Deliv;
row10.Num_Serie = row9.Num_Serie;
row10.QR_code = row9.QR_code;
row10.Photo = row9.Photo;
row10.score = row9.score;
row10.numSerieVerified = row9.numSerieVerified;
row10.inamVerified = row9.inamVerified;
row10.nniVerified = row9.nniVerified;
row10.prenomVerified = row9.prenomVerified;


    nb_line_tJavaRow_5++;   

 


	tos_count_tJavaRow_5++;

/**
 * [tJavaRow_5 main ] stop
 */
	
	/**
	 * [tJavaRow_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";

	

 



/**
 * [tJavaRow_5 process_data_begin ] stop
 */

	
	/**
	 * [tLogRow_5 main ] start
	 */

	

	
	
	currentComponent="tLogRow_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row10");
					}
					

 
     row11 = row10;


	tos_count_tLogRow_5++;

/**
 * [tLogRow_5 main ] stop
 */
	
	/**
	 * [tLogRow_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_5";

	

 



/**
 * [tLogRow_5 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_6 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row11");
					}
					

    //Code généré selon les schémas d'entrée et de sortie
row12.INAM = row11.INAM;
row12.NNI = row11.NNI;
row12.Prenom = row11.Prenom;
row12.Nom_de_Famille = row11.Nom_de_Famille;
row12.Date_Naissance = row11.Date_Naissance;
row12.Lieu_Naissance = row11.Lieu_Naissance;
row12.Genre = row11.Genre;

row12.genreVerified = false;
if(String.valueOf(row10.Genre).matches("[MF]")){
  row12.genreVerified = true;
}


row12.Num_Carte = row11.Num_Carte;
row12.Date_Deliv = row11.Date_Deliv;
row12.Num_Serie = row11.Num_Serie;
row12.QR_code = row11.QR_code;
row12.Photo = row11.Photo;
row12.score = row11.score;
row12.numSerieVerified = row11.numSerieVerified;
row12.inamVerified = row11.inamVerified;
row12.nniVerified = row11.nniVerified;
row12.prenomVerified = row11.prenomVerified;
row12.nomdefamilleVerified = row11.nomdefamilleVerified;


    nb_line_tJavaRow_6++;   

 


	tos_count_tJavaRow_6++;

/**
 * [tJavaRow_6 main ] stop
 */
	
	/**
	 * [tJavaRow_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_6";

	

 



/**
 * [tJavaRow_6 process_data_begin ] stop
 */

	
	/**
	 * [tLogRow_6 main ] start
	 */

	

	
	
	currentComponent="tLogRow_6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row12");
					}
					

 
     row13 = row12;


	tos_count_tLogRow_6++;

/**
 * [tLogRow_6 main ] stop
 */
	
	/**
	 * [tLogRow_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_6";

	

 



/**
 * [tLogRow_6 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_7 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row13");
					}
					

    //Code généré selon les schémas d'entrée et de sortie
row14.INAM = row13.INAM;
row14.NNI = row13.NNI;
row14.Prenom = row13.Prenom;
row14.Nom_de_Famille = row13.Nom_de_Famille;
row14.Date_Naissance = row13.Date_Naissance;
row14.Lieu_Naissance = row13.Lieu_Naissance;
row14.Genre = row13.Genre;
row14.Num_Carte = row13.Num_Carte;

row14.numcarteVerified = false;
if(row13.Num_Carte.matches("[0-9]+") ){
  row14.numcarteVerified = true;
}


row14.Date_Deliv = row13.Date_Deliv;
row14.Num_Serie = row13.Num_Serie;
row14.QR_code = row13.QR_code;
row14.Photo = row13.Photo;
row14.score = row13.score;
row14.numSerieVerified = row13.numSerieVerified;
row14.inamVerified = row13.inamVerified;
row14.nniVerified = row13.nniVerified;
row14.prenomVerified = row13.prenomVerified;
row14.nomdefamilleVerified = row13.nomdefamilleVerified;
row14.genreVerified = row13.genreVerified;


    nb_line_tJavaRow_7++;   

 


	tos_count_tJavaRow_7++;

/**
 * [tJavaRow_7 main ] stop
 */
	
	/**
	 * [tJavaRow_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";

	

 



/**
 * [tJavaRow_7 process_data_begin ] stop
 */

	
	/**
	 * [tLogRow_7 main ] start
	 */

	

	
	
	currentComponent="tLogRow_7";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row14");
					}
					

 
     row15 = row14;


	tos_count_tLogRow_7++;

/**
 * [tLogRow_7 main ] stop
 */
	
	/**
	 * [tLogRow_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_7";

	

 



/**
 * [tLogRow_7 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_8 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_8";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row15");
					}
					

    //Code généré selon les schémas d'entrée et de sortie
row16.INAM = row15.INAM;
row16.NNI = row15.NNI;
row16.Prenom = row15.Prenom;
row16.Nom_de_Famille = row15.Nom_de_Famille;
row16.Date_Naissance = row15.Date_Naissance;
row16.Lieu_Naissance = row15.Lieu_Naissance;
row16.Genre = row15.Genre;
row16.Num_Carte = row15.Num_Carte;
row16.Date_Deliv = row15.Date_Deliv;
row16.Num_Serie = row15.Num_Serie;


row16.QR_code = row15.QR_code;

String[] qr = row15.QR_code.split(";");

Boolean qrSize = qr.length == 6;

//System.out.println("qrSize " + qrSize);

Boolean p01 = false;

Boolean p10 = false;
Boolean p11 = false;

Boolean p20 = false;
Boolean p21 = false;

Boolean p30 = false;
Boolean p31 = false;

Boolean p40 = false;

Boolean p50 = false;
Boolean p51 = false;


for(int i=0; i < qr.length; i++){
//  System.out.println("qr " + i + " " + qr[i]);
  String[] p = qr[i].split(":");
  
  for(int j=0; j < p.length; j++){ 
  
     if (j == 0){
    
  
  
       if(i == 1){
          p10 = p[0].trim().equals("INAM");
       }
  
  
       if(i == 2){
          p20 = p[0].trim().equals("NNI");
       }
  
  
       if(i == 3){
          p30 = p[0].trim().equals("Prenom");
       }
  
       if(i == 4){
          p40 = p[0].trim().equals("Nom");
       }
  

       if(i == 5){
       
          p50 = p[0].trim().equals("Nom de famille");
       }
     
     }
     
     if(j == 1){
     
     
        if(i == 0){
        
           p01 = !p[1].trim().equals("");
        }
  
  
        if(i == 1){

          p11 = p[1].trim().equals(row15.INAM.trim());
        }
  
  
        if(i == 2){

           p21 = p[1].trim().equals(row15.NNI.trim());
        }
  
  
        if(i == 3){
        
           p31 = p[1].trim().equals(row15.Prenom.trim());
    
        }

        if(i == 5){

          p51 = p[1].trim().equals(row15.Nom_de_Famille.trim());
        }
     
       
     }
    
 
  }
   
  
} 


if(qrSize && p01 && p10 && p11 && p20 && p21 && p30 && p31 && p40 && p50 && p51){
  row16.qrCodeVerified = true;
} else {
  row16.qrCodeVerified = false;
}



row16.Photo = row15.Photo;
row16.score = row15.score;
row16.numSerieVerified = row15.numSerieVerified;
row16.inamVerified = row15.inamVerified;
row16.nniVerified = row15.nniVerified;
row16.prenomVerified = row15.prenomVerified;
row16.nomdefamilleVerified = row15.nomdefamilleVerified;
row16.genreVerified = row15.genreVerified;
row16.numcarteVerified = row15.numcarteVerified;

    nb_line_tJavaRow_8++;   

 


	tos_count_tJavaRow_8++;

/**
 * [tJavaRow_8 main ] stop
 */
	
	/**
	 * [tJavaRow_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_8";

	

 



/**
 * [tJavaRow_8 process_data_begin ] stop
 */

	
	/**
	 * [tLogRow_8 main ] start
	 */

	

	
	
	currentComponent="tLogRow_8";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row16");
					}
					

 
     row17 = row16;


	tos_count_tLogRow_8++;

/**
 * [tLogRow_8 main ] stop
 */
	
	/**
	 * [tLogRow_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_8";

	

 



/**
 * [tLogRow_8 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_9 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_9";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row17");
					}
					

    //Code généré selon les schémas d'entrée et de sortie
row18.INAM = row17.INAM;
row18.NNI = row17.NNI;
row18.Prenom = row17.Prenom;
row18.Nom_de_Famille = row17.Nom_de_Famille;
row18.Date_Naissance = row17.Date_Naissance;
row18.Lieu_Naissance = row17.Lieu_Naissance;
row18.Genre = row17.Genre;
row18.Num_Carte = row17.Num_Carte;
row18.Date_Deliv = row17.Date_Deliv;
row18.Num_Serie = row17.Num_Serie;
row18.QR_code = row17.QR_code;


row18.PhotoPath = row17.Photo;


String[] photoN = row17.Photo.split("/");
String photoName = photoN[photoN.length-1];
//System.out.println("photoName " + photoName);

int dot = photoName.lastIndexOf('.'); 

String name = (dot == -1) ? photoName : photoName.substring(0, dot); 

Boolean nameVerification = name.equals(row17.NNI);

//System.out.println("nameVerification " + nameVerification);

String extension = (dot == -1) ? "" : photoName.substring(dot+1);

String[] extensions = {"png", "jpg", "jpeg", "gif", "tiff", "bmp", "webp", "dib", "tif"};

Boolean extensionVerification = false;

for(int i=0; i<extensions.length; i++){
  //System.out.println("i " + i);
  if(extension.toLowerCase().equals(extensions[i])){
    extensionVerification = true;
  }
  
}

//System.out.println("extensionVerification "+ extensionVerification);

//System.out.println("name " + name + "extension " + extension  );

row18.photoVerified = false;
if(nameVerification && extensionVerification){
  row18.photoVerified = true;
}

//System.out.println("nniVerification " +  row18.nniVerified );



row18.Photo = photoName;
row18.extension = extension;

row18.score = row17.score;
row18.numSerieVerified = row17.numSerieVerified;
row18.inamVerified = row17.inamVerified;
row18.nniVerified = row17.nniVerified;
row18.prenomVerified = row17.prenomVerified;
row18.nomdefamilleVerified = row17.nomdefamilleVerified;
row18.genreVerified = row17.genreVerified;
row18.numcarteVerified = row17.numcarteVerified;
row18.qrCodeVerified = row17.qrCodeVerified;

    nb_line_tJavaRow_9++;   

 


	tos_count_tJavaRow_9++;

/**
 * [tJavaRow_9 main ] stop
 */
	
	/**
	 * [tJavaRow_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_9";

	

 



/**
 * [tJavaRow_9 process_data_begin ] stop
 */

	
	/**
	 * [tLogRow_9 main ] start
	 */

	

	
	
	currentComponent="tLogRow_9";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row18");
					}
					

 
     row19 = row18;


	tos_count_tLogRow_9++;

/**
 * [tLogRow_9 main ] stop
 */
	
	/**
	 * [tLogRow_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_9";

	

 



/**
 * [tLogRow_9 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_10 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_10";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row19");
					}
					

    //Code généré selon les schémas d'entrée et de sortie
row20.INAM = row19.INAM;
row20.NNI = row19.NNI;
row20.Prenom = row19.Prenom;
row20.Nom_de_Famille = row19.Nom_de_Famille;
row20.Date_Naissance = row19.Date_Naissance;
row20.Lieu_Naissance = row19.Lieu_Naissance;
row20.Genre = row19.Genre;
row20.Num_Carte = row19.Num_Carte;
row20.Date_Deliv = row19.Date_Deliv;
row20.Num_Serie = row19.Num_Serie;
row20.QR_code = row19.QR_code;
row20.Photo = row19.Photo;
row20.PhotoPath = row19.PhotoPath;
row20.score = row19.score;

String[] extensionss = {"png", "jpg", "gif", "bmp"};

row20.scoreVerified = false;

  if(row19.extension.toLowerCase().equals(extensionss[0]) || row19.extension.toLowerCase().equals(extensionss[1]) || row19.extension.toLowerCase().equals(extensionss[2]) || row19.extension.toLowerCase().equals(extensionss[3])){
    if(row19.extension.toLowerCase().equals(extensionss[0]) && row19.score <= context.IMAGE_PNG_THRESHOLD){
       row20.scoreVerified = true;
    }
    if(row19.extension.toLowerCase().equals(extensionss[1]) && row19.score <= context.IMAGE_JPG_THRESHOLD){
       row20.scoreVerified = true;
    }
    if(row19.extension.toLowerCase().equals(extensionss[2]) && row19.score <= context.IMAGE_GIF_THRESHOLD){
       row20.scoreVerified = true;
    }
    if(row19.extension.toLowerCase().equals(extensionss[3]) && row19.score <= context.IMAGE_BMP_THRESHOLD){
       row20.scoreVerified = true;
    }
  }else if(row19.score <= context.default_score) {
    row20.scoreVerified = true;
  }
  
  


row20.numSerieVerified = row19.numSerieVerified;
row20.inamVerified = row19.inamVerified;
row20.nniVerified = row19.nniVerified;
row20.prenomVerified = row19.prenomVerified;
row20.nomdefamilleVerified = row19.nomdefamilleVerified;
row20.genreVerified = row19.genreVerified;
row20.numcarteVerified = row19.numcarteVerified;
row20.qrCodeVerified = row19.qrCodeVerified;
row20.photoVerified = row19.photoVerified;


    nb_line_tJavaRow_10++;   

 


	tos_count_tJavaRow_10++;

/**
 * [tJavaRow_10 main ] stop
 */
	
	/**
	 * [tJavaRow_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_10";

	

 



/**
 * [tJavaRow_10 process_data_begin ] stop
 */

	
	/**
	 * [tLogRow_10 main ] start
	 */

	

	
	
	currentComponent="tLogRow_10";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row20");
					}
					

 
     row21 = row20;


	tos_count_tLogRow_10++;

/**
 * [tLogRow_10 main ] stop
 */
	
	/**
	 * [tLogRow_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_10";

	

 



/**
 * [tLogRow_10 process_data_begin ] stop
 */

	
	/**
	 * [tUniqRow_1 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row21");
					}
					
row25 = null;			row24 = null;			
if(row21.INAM == null){
	finder_tUniqRow_1.INAM = null;
}else{
	finder_tUniqRow_1.INAM = row21.INAM.toLowerCase();
}
if(row21.NNI == null){
	finder_tUniqRow_1.NNI = null;
}else{
	finder_tUniqRow_1.NNI = row21.NNI.toLowerCase();
}
if(row21.Num_Carte == null){
	finder_tUniqRow_1.Num_Carte = null;
}else{
	finder_tUniqRow_1.Num_Carte = row21.Num_Carte.toLowerCase();
}
if(row21.Num_Serie == null){
	finder_tUniqRow_1.Num_Serie = null;
}else{
	finder_tUniqRow_1.Num_Serie = row21.Num_Serie.toLowerCase();
}
if(row21.QR_code == null){
	finder_tUniqRow_1.QR_code = null;
}else{
	finder_tUniqRow_1.QR_code = row21.QR_code.toLowerCase();
}
if(row21.Photo == null){
	finder_tUniqRow_1.Photo = null;
}else{
	finder_tUniqRow_1.Photo = row21.Photo.toLowerCase();
}	
finder_tUniqRow_1.hashCodeDirty = true;
if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
		KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

		
if(row21.INAM == null){
	new_tUniqRow_1.INAM = null;
}else{
	new_tUniqRow_1.INAM = row21.INAM.toLowerCase();
}
if(row21.NNI == null){
	new_tUniqRow_1.NNI = null;
}else{
	new_tUniqRow_1.NNI = row21.NNI.toLowerCase();
}
if(row21.Num_Carte == null){
	new_tUniqRow_1.Num_Carte = null;
}else{
	new_tUniqRow_1.Num_Carte = row21.Num_Carte.toLowerCase();
}
if(row21.Num_Serie == null){
	new_tUniqRow_1.Num_Serie = null;
}else{
	new_tUniqRow_1.Num_Serie = row21.Num_Serie.toLowerCase();
}
if(row21.QR_code == null){
	new_tUniqRow_1.QR_code = null;
}else{
	new_tUniqRow_1.QR_code = row21.QR_code.toLowerCase();
}
if(row21.Photo == null){
	new_tUniqRow_1.Photo = null;
}else{
	new_tUniqRow_1.Photo = row21.Photo.toLowerCase();
}
		
		keystUniqRow_1.add(new_tUniqRow_1);if(row24 == null){ 
	
	row24 = new row24Struct();
}row24.INAM = row21.INAM;			row24.NNI = row21.NNI;			row24.Prenom = row21.Prenom;			row24.Nom_de_Famille = row21.Nom_de_Famille;			row24.Date_Naissance = row21.Date_Naissance;			row24.Lieu_Naissance = row21.Lieu_Naissance;			row24.Genre = row21.Genre;			row24.Num_Carte = row21.Num_Carte;			row24.Date_Deliv = row21.Date_Deliv;			row24.Num_Serie = row21.Num_Serie;			row24.QR_code = row21.QR_code;			row24.Photo = row21.Photo;			row24.score = row21.score;			row24.numSerieVerified = row21.numSerieVerified;			row24.inamVerified = row21.inamVerified;			row24.nniVerified = row21.nniVerified;			row24.prenomVerified = row21.prenomVerified;			row24.nomdefamilleVerified = row21.nomdefamilleVerified;			row24.genreVerified = row21.genreVerified;			row24.numcarteVerified = row21.numcarteVerified;			row24.qrCodeVerified = row21.qrCodeVerified;			row24.photoVerified = row21.photoVerified;			row24.extension = row21.extension;			row24.PhotoPath = row21.PhotoPath;			row24.scoreVerified = row21.scoreVerified;					
		nb_uniques_tUniqRow_1++;
	} else {
if(row25 == null){ 
	
	row25 = new row25Struct();
}				row25.INAM = row21.INAM;			row25.NNI = row21.NNI;			row25.Prenom = row21.Prenom;			row25.Nom_de_Famille = row21.Nom_de_Famille;			row25.Date_Naissance = row21.Date_Naissance;			row25.Lieu_Naissance = row21.Lieu_Naissance;			row25.Genre = row21.Genre;			row25.Num_Carte = row21.Num_Carte;			row25.Date_Deliv = row21.Date_Deliv;			row25.Num_Serie = row21.Num_Serie;			row25.QR_code = row21.QR_code;			row25.Photo = row21.Photo;			row25.score = row21.score;			row25.numSerieVerified = row21.numSerieVerified;			row25.inamVerified = row21.inamVerified;			row25.nniVerified = row21.nniVerified;			row25.prenomVerified = row21.prenomVerified;			row25.nomdefamilleVerified = row21.nomdefamilleVerified;			row25.genreVerified = row21.genreVerified;			row25.numcarteVerified = row21.numcarteVerified;			row25.qrCodeVerified = row21.qrCodeVerified;			row25.photoVerified = row21.photoVerified;			row25.extension = row21.extension;			row25.PhotoPath = row21.PhotoPath;			row25.scoreVerified = row21.scoreVerified;			
	  nb_duplicates_tUniqRow_1++;
	}

 


	tos_count_tUniqRow_1++;

/**
 * [tUniqRow_1 main ] stop
 */
	
	/**
	 * [tUniqRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 process_data_begin ] stop
 */
// Start of branch "row24"
if(row24 != null) { 



	
	/**
	 * [tLogRow_11 main ] start
	 */

	

	
	
	currentComponent="tLogRow_11";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row24");
					}
					

 
     row26 = row24;


	tos_count_tLogRow_11++;

/**
 * [tLogRow_11 main ] stop
 */
	
	/**
	 * [tLogRow_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_11";

	

 



/**
 * [tLogRow_11 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_11 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_11";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row26");
					}
					

    //Code généré selon les schémas d'entrée et de sortie
row28.INAM = row26.INAM;
row28.NNI = row26.NNI;
row28.Prenom = row26.Prenom;
row28.Nom_de_Famille = row26.Nom_de_Famille;
row28.Date_Naissance = row26.Date_Naissance;
row28.Lieu_Naissance = row26.Lieu_Naissance;
row28.Genre = row26.Genre;
row28.Num_Carte = row26.Num_Carte;
row28.Date_Deliv = row26.Date_Deliv;
row28.Num_Serie = row26.Num_Serie;
row28.QR_code = row26.QR_code;
row28.Photo = row26.Photo;
row28.PhotoPath = row26.PhotoPath;
row28.score = row26.score;
row28.numSerieVerified = row26.numSerieVerified;
row28.inamVerified = row26.inamVerified;
row28.nniVerified = row26.nniVerified;
row28.prenomVerified = row26.prenomVerified;
row28.nomdefamilleVerified = row26.nomdefamilleVerified;
row28.genreVerified = row26.genreVerified;
row28.numcarteVerified = row26.numcarteVerified;
row28.qrCodeVerified = row26.qrCodeVerified;
row28.photoVerified = row26.photoVerified;
row28.scoreVerified = row26.scoreVerified;
row28.uniqueVerified = true;

    nb_line_tJavaRow_11++;   

 


	tos_count_tJavaRow_11++;

/**
 * [tJavaRow_11 main ] stop
 */
	
	/**
	 * [tJavaRow_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_11";

	

 



/**
 * [tJavaRow_11 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_1 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row28");
					}
					



    
		row28Struct oneRow_tHashOutput_1 = new row28Struct();
				
					oneRow_tHashOutput_1.INAM = row28.INAM;
					oneRow_tHashOutput_1.NNI = row28.NNI;
					oneRow_tHashOutput_1.Prenom = row28.Prenom;
					oneRow_tHashOutput_1.Nom_de_Famille = row28.Nom_de_Famille;
					oneRow_tHashOutput_1.Date_Naissance = row28.Date_Naissance;
					oneRow_tHashOutput_1.Lieu_Naissance = row28.Lieu_Naissance;
					oneRow_tHashOutput_1.Genre = row28.Genre;
					oneRow_tHashOutput_1.Num_Carte = row28.Num_Carte;
					oneRow_tHashOutput_1.Date_Deliv = row28.Date_Deliv;
					oneRow_tHashOutput_1.Num_Serie = row28.Num_Serie;
					oneRow_tHashOutput_1.QR_code = row28.QR_code;
					oneRow_tHashOutput_1.Photo = row28.Photo;
					oneRow_tHashOutput_1.score = row28.score;
					oneRow_tHashOutput_1.numSerieVerified = row28.numSerieVerified;
					oneRow_tHashOutput_1.inamVerified = row28.inamVerified;
					oneRow_tHashOutput_1.nniVerified = row28.nniVerified;
					oneRow_tHashOutput_1.prenomVerified = row28.prenomVerified;
					oneRow_tHashOutput_1.nomdefamilleVerified = row28.nomdefamilleVerified;
					oneRow_tHashOutput_1.genreVerified = row28.genreVerified;
					oneRow_tHashOutput_1.numcarteVerified = row28.numcarteVerified;
					oneRow_tHashOutput_1.qrCodeVerified = row28.qrCodeVerified;
					oneRow_tHashOutput_1.photoVerified = row28.photoVerified;
					oneRow_tHashOutput_1.scoreVerified = row28.scoreVerified;
					oneRow_tHashOutput_1.uniqueVerified = row28.uniqueVerified;
					oneRow_tHashOutput_1.PhotoPath = row28.PhotoPath;
		
        tHashFile_tHashOutput_1.put(oneRow_tHashOutput_1);
        nb_line_tHashOutput_1 ++;
 


	tos_count_tHashOutput_1++;

/**
 * [tHashOutput_1 main ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";

	

 



/**
 * [tHashOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";

	

 



/**
 * [tHashOutput_1 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_11";

	

 



/**
 * [tJavaRow_11 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_11";

	

 



/**
 * [tLogRow_11 process_data_end ] stop
 */

} // End of branch "row24"




// Start of branch "row25"
if(row25 != null) { 



	
	/**
	 * [tLogRow_12 main ] start
	 */

	

	
	
	currentComponent="tLogRow_12";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row25");
					}
					

 
     row27 = row25;


	tos_count_tLogRow_12++;

/**
 * [tLogRow_12 main ] stop
 */
	
	/**
	 * [tLogRow_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_12";

	

 



/**
 * [tLogRow_12 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_12 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_12";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row27");
					}
					

    //Code généré selon les schémas d'entrée et de sortie
row29.INAM = row27.INAM;
row29.NNI = row27.NNI;
row29.Prenom = row27.Prenom;
row29.Nom_de_Famille = row27.Nom_de_Famille;
row29.Date_Naissance = row27.Date_Naissance;
row29.Lieu_Naissance = row27.Lieu_Naissance;
row29.Genre = row27.Genre;
row29.Num_Carte = row27.Num_Carte;
row29.Date_Deliv = row27.Date_Deliv;
row29.Num_Serie = row27.Num_Serie;
row29.QR_code = row27.QR_code;
row29.Photo = row27.Photo;
row29.PhotoPath = row27.PhotoPath;
row29.score = row27.score;
row29.numSerieVerified = row27.numSerieVerified;
row29.inamVerified = row27.inamVerified;
row29.nniVerified = row27.nniVerified;
row29.prenomVerified = row27.prenomVerified;
row29.nomdefamilleVerified = row27.nomdefamilleVerified;
row29.genreVerified = row27.genreVerified;
row29.numcarteVerified = row27.numcarteVerified;
row29.qrCodeVerified = row27.qrCodeVerified;
row29.photoVerified = row27.photoVerified;
row29.scoreVerified = row27.scoreVerified;
row29.uniqueVerified = false;

    nb_line_tJavaRow_12++;   

 


	tos_count_tJavaRow_12++;

/**
 * [tJavaRow_12 main ] stop
 */
	
	/**
	 * [tJavaRow_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_12";

	

 



/**
 * [tJavaRow_12 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_2 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row29");
					}
					



    
		row29Struct oneRow_tHashOutput_2 = new row29Struct();
				
					oneRow_tHashOutput_2.INAM = row29.INAM;
					oneRow_tHashOutput_2.NNI = row29.NNI;
					oneRow_tHashOutput_2.Prenom = row29.Prenom;
					oneRow_tHashOutput_2.Nom_de_Famille = row29.Nom_de_Famille;
					oneRow_tHashOutput_2.Date_Naissance = row29.Date_Naissance;
					oneRow_tHashOutput_2.Lieu_Naissance = row29.Lieu_Naissance;
					oneRow_tHashOutput_2.Genre = row29.Genre;
					oneRow_tHashOutput_2.Num_Carte = row29.Num_Carte;
					oneRow_tHashOutput_2.Date_Deliv = row29.Date_Deliv;
					oneRow_tHashOutput_2.Num_Serie = row29.Num_Serie;
					oneRow_tHashOutput_2.QR_code = row29.QR_code;
					oneRow_tHashOutput_2.Photo = row29.Photo;
					oneRow_tHashOutput_2.score = row29.score;
					oneRow_tHashOutput_2.numSerieVerified = row29.numSerieVerified;
					oneRow_tHashOutput_2.inamVerified = row29.inamVerified;
					oneRow_tHashOutput_2.nniVerified = row29.nniVerified;
					oneRow_tHashOutput_2.prenomVerified = row29.prenomVerified;
					oneRow_tHashOutput_2.nomdefamilleVerified = row29.nomdefamilleVerified;
					oneRow_tHashOutput_2.genreVerified = row29.genreVerified;
					oneRow_tHashOutput_2.numcarteVerified = row29.numcarteVerified;
					oneRow_tHashOutput_2.qrCodeVerified = row29.qrCodeVerified;
					oneRow_tHashOutput_2.photoVerified = row29.photoVerified;
					oneRow_tHashOutput_2.scoreVerified = row29.scoreVerified;
					oneRow_tHashOutput_2.uniqueVerified = row29.uniqueVerified;
					oneRow_tHashOutput_2.PhotoPath = row29.PhotoPath;
		
        tHashFile_tHashOutput_2.put(oneRow_tHashOutput_2);
        nb_line_tHashOutput_2 ++;
 


	tos_count_tHashOutput_2++;

/**
 * [tHashOutput_2 main ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";

	

 



/**
 * [tHashOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";

	

 



/**
 * [tHashOutput_2 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_12";

	

 



/**
 * [tJavaRow_12 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_12";

	

 



/**
 * [tLogRow_12 process_data_end ] stop
 */

} // End of branch "row25"




	
	/**
	 * [tUniqRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_10";

	

 



/**
 * [tLogRow_10 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_10";

	

 



/**
 * [tJavaRow_10 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_9";

	

 



/**
 * [tLogRow_9 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_9";

	

 



/**
 * [tJavaRow_9 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_8";

	

 



/**
 * [tLogRow_8 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_8";

	

 



/**
 * [tJavaRow_8 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_7";

	

 



/**
 * [tLogRow_7 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";

	

 



/**
 * [tJavaRow_7 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_6";

	

 



/**
 * [tLogRow_6 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_6";

	

 



/**
 * [tJavaRow_6 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_5";

	

 



/**
 * [tLogRow_5 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";

	

 



/**
 * [tJavaRow_5 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	

 



/**
 * [tLogRow_4 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";

	

 



/**
 * [tJavaRow_4 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";

	

 



/**
 * [tJavaRow_3 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";

	

 



/**
 * [tJavaRow_2 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 process_data_end ] stop
 */

} // End of branch "row1"




	
	/**
	 * [tFileInputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	



            }
            }finally{
                if(!((Object)(context.csvpath) instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_1!=null){
                		fid_tFileInputDelimited_1.close();
                	}
                }
                if(fid_tFileInputDelimited_1!=null){
                	globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());




/**
 * [tFileInputDelimited_1 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());




/**
 * [tJavaRow_1 end ] stop
 */

	
	/**
	 * [tLogRow_1 end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tLogRow_1", true);
end_Hash.put("tLogRow_1", System.currentTimeMillis());




/**
 * [tLogRow_1 end ] stop
 */

	
	/**
	 * [tJavaRow_2 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";

	

globalMap.put("tJavaRow_2_NB_LINE",nb_line_tJavaRow_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tJavaRow_2", true);
end_Hash.put("tJavaRow_2", System.currentTimeMillis());




/**
 * [tJavaRow_2 end ] stop
 */

	
	/**
	 * [tLogRow_2 end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tLogRow_2", true);
end_Hash.put("tLogRow_2", System.currentTimeMillis());




/**
 * [tLogRow_2 end ] stop
 */

	
	/**
	 * [tJavaRow_3 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";

	

globalMap.put("tJavaRow_3_NB_LINE",nb_line_tJavaRow_3);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tJavaRow_3", true);
end_Hash.put("tJavaRow_3", System.currentTimeMillis());




/**
 * [tJavaRow_3 end ] stop
 */

	
	/**
	 * [tLogRow_3 end ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tLogRow_3", true);
end_Hash.put("tLogRow_3", System.currentTimeMillis());




/**
 * [tLogRow_3 end ] stop
 */

	
	/**
	 * [tJavaRow_4 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";

	

globalMap.put("tJavaRow_4_NB_LINE",nb_line_tJavaRow_4);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tJavaRow_4", true);
end_Hash.put("tJavaRow_4", System.currentTimeMillis());




/**
 * [tJavaRow_4 end ] stop
 */

	
	/**
	 * [tLogRow_4 end ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tLogRow_4", true);
end_Hash.put("tLogRow_4", System.currentTimeMillis());




/**
 * [tLogRow_4 end ] stop
 */

	
	/**
	 * [tJavaRow_5 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";

	

globalMap.put("tJavaRow_5_NB_LINE",nb_line_tJavaRow_5);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row9");
			  	}
			  	
 

ok_Hash.put("tJavaRow_5", true);
end_Hash.put("tJavaRow_5", System.currentTimeMillis());




/**
 * [tJavaRow_5 end ] stop
 */

	
	/**
	 * [tLogRow_5 end ] start
	 */

	

	
	
	currentComponent="tLogRow_5";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row10");
			  	}
			  	
 

ok_Hash.put("tLogRow_5", true);
end_Hash.put("tLogRow_5", System.currentTimeMillis());




/**
 * [tLogRow_5 end ] stop
 */

	
	/**
	 * [tJavaRow_6 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_6";

	

globalMap.put("tJavaRow_6_NB_LINE",nb_line_tJavaRow_6);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row11");
			  	}
			  	
 

ok_Hash.put("tJavaRow_6", true);
end_Hash.put("tJavaRow_6", System.currentTimeMillis());




/**
 * [tJavaRow_6 end ] stop
 */

	
	/**
	 * [tLogRow_6 end ] start
	 */

	

	
	
	currentComponent="tLogRow_6";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row12");
			  	}
			  	
 

ok_Hash.put("tLogRow_6", true);
end_Hash.put("tLogRow_6", System.currentTimeMillis());




/**
 * [tLogRow_6 end ] stop
 */

	
	/**
	 * [tJavaRow_7 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";

	

globalMap.put("tJavaRow_7_NB_LINE",nb_line_tJavaRow_7);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row13");
			  	}
			  	
 

ok_Hash.put("tJavaRow_7", true);
end_Hash.put("tJavaRow_7", System.currentTimeMillis());




/**
 * [tJavaRow_7 end ] stop
 */

	
	/**
	 * [tLogRow_7 end ] start
	 */

	

	
	
	currentComponent="tLogRow_7";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row14");
			  	}
			  	
 

ok_Hash.put("tLogRow_7", true);
end_Hash.put("tLogRow_7", System.currentTimeMillis());




/**
 * [tLogRow_7 end ] stop
 */

	
	/**
	 * [tJavaRow_8 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_8";

	

globalMap.put("tJavaRow_8_NB_LINE",nb_line_tJavaRow_8);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row15");
			  	}
			  	
 

ok_Hash.put("tJavaRow_8", true);
end_Hash.put("tJavaRow_8", System.currentTimeMillis());




/**
 * [tJavaRow_8 end ] stop
 */

	
	/**
	 * [tLogRow_8 end ] start
	 */

	

	
	
	currentComponent="tLogRow_8";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row16");
			  	}
			  	
 

ok_Hash.put("tLogRow_8", true);
end_Hash.put("tLogRow_8", System.currentTimeMillis());




/**
 * [tLogRow_8 end ] stop
 */

	
	/**
	 * [tJavaRow_9 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_9";

	

globalMap.put("tJavaRow_9_NB_LINE",nb_line_tJavaRow_9);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row17");
			  	}
			  	
 

ok_Hash.put("tJavaRow_9", true);
end_Hash.put("tJavaRow_9", System.currentTimeMillis());




/**
 * [tJavaRow_9 end ] stop
 */

	
	/**
	 * [tLogRow_9 end ] start
	 */

	

	
	
	currentComponent="tLogRow_9";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row18");
			  	}
			  	
 

ok_Hash.put("tLogRow_9", true);
end_Hash.put("tLogRow_9", System.currentTimeMillis());




/**
 * [tLogRow_9 end ] stop
 */

	
	/**
	 * [tJavaRow_10 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_10";

	

globalMap.put("tJavaRow_10_NB_LINE",nb_line_tJavaRow_10);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row19");
			  	}
			  	
 

ok_Hash.put("tJavaRow_10", true);
end_Hash.put("tJavaRow_10", System.currentTimeMillis());




/**
 * [tJavaRow_10 end ] stop
 */

	
	/**
	 * [tLogRow_10 end ] start
	 */

	

	
	
	currentComponent="tLogRow_10";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row20");
			  	}
			  	
 

ok_Hash.put("tLogRow_10", true);
end_Hash.put("tLogRow_10", System.currentTimeMillis());




/**
 * [tLogRow_10 end ] stop
 */

	
	/**
	 * [tUniqRow_1 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

globalMap.put("tUniqRow_1_NB_UNIQUES",nb_uniques_tUniqRow_1);
globalMap.put("tUniqRow_1_NB_DUPLICATES",nb_duplicates_tUniqRow_1);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row21");
			  	}
			  	
 

ok_Hash.put("tUniqRow_1", true);
end_Hash.put("tUniqRow_1", System.currentTimeMillis());




/**
 * [tUniqRow_1 end ] stop
 */

	
	/**
	 * [tLogRow_11 end ] start
	 */

	

	
	
	currentComponent="tLogRow_11";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row24");
			  	}
			  	
 

ok_Hash.put("tLogRow_11", true);
end_Hash.put("tLogRow_11", System.currentTimeMillis());




/**
 * [tLogRow_11 end ] stop
 */

	
	/**
	 * [tJavaRow_11 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_11";

	

globalMap.put("tJavaRow_11_NB_LINE",nb_line_tJavaRow_11);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row26");
			  	}
			  	
 

ok_Hash.put("tJavaRow_11", true);
end_Hash.put("tJavaRow_11", System.currentTimeMillis());




/**
 * [tJavaRow_11 end ] stop
 */

	
	/**
	 * [tHashOutput_1 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";

	
globalMap.put("tHashOutput_1_NB_LINE", nb_line_tHashOutput_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row28");
			  	}
			  	
 

ok_Hash.put("tHashOutput_1", true);
end_Hash.put("tHashOutput_1", System.currentTimeMillis());




/**
 * [tHashOutput_1 end ] stop
 */










	
	/**
	 * [tLogRow_12 end ] start
	 */

	

	
	
	currentComponent="tLogRow_12";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row25");
			  	}
			  	
 

ok_Hash.put("tLogRow_12", true);
end_Hash.put("tLogRow_12", System.currentTimeMillis());




/**
 * [tLogRow_12 end ] stop
 */

	
	/**
	 * [tJavaRow_12 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_12";

	

globalMap.put("tJavaRow_12_NB_LINE",nb_line_tJavaRow_12);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row27");
			  	}
			  	
 

ok_Hash.put("tJavaRow_12", true);
end_Hash.put("tJavaRow_12", System.currentTimeMillis());




/**
 * [tJavaRow_12 end ] stop
 */

	
	/**
	 * [tHashOutput_2 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";

	
globalMap.put("tHashOutput_2_NB_LINE", nb_line_tHashOutput_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row29");
			  	}
			  	
 

ok_Hash.put("tHashOutput_2", true);
end_Hash.put("tHashOutput_2", System.currentTimeMillis());




/**
 * [tHashOutput_2 end ] stop
 */








































































				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tHashInput_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 finally ] stop
 */

	
	/**
	 * [tLogRow_1 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_2 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";

	

 



/**
 * [tJavaRow_2 finally ] stop
 */

	
	/**
	 * [tLogRow_2 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 finally ] stop
 */

	
	/**
	 * [tJavaRow_3 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";

	

 



/**
 * [tJavaRow_3 finally ] stop
 */

	
	/**
	 * [tLogRow_3 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 finally ] stop
 */

	
	/**
	 * [tJavaRow_4 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";

	

 



/**
 * [tJavaRow_4 finally ] stop
 */

	
	/**
	 * [tLogRow_4 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	

 



/**
 * [tLogRow_4 finally ] stop
 */

	
	/**
	 * [tJavaRow_5 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";

	

 



/**
 * [tJavaRow_5 finally ] stop
 */

	
	/**
	 * [tLogRow_5 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_5";

	

 



/**
 * [tLogRow_5 finally ] stop
 */

	
	/**
	 * [tJavaRow_6 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_6";

	

 



/**
 * [tJavaRow_6 finally ] stop
 */

	
	/**
	 * [tLogRow_6 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_6";

	

 



/**
 * [tLogRow_6 finally ] stop
 */

	
	/**
	 * [tJavaRow_7 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";

	

 



/**
 * [tJavaRow_7 finally ] stop
 */

	
	/**
	 * [tLogRow_7 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_7";

	

 



/**
 * [tLogRow_7 finally ] stop
 */

	
	/**
	 * [tJavaRow_8 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_8";

	

 



/**
 * [tJavaRow_8 finally ] stop
 */

	
	/**
	 * [tLogRow_8 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_8";

	

 



/**
 * [tLogRow_8 finally ] stop
 */

	
	/**
	 * [tJavaRow_9 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_9";

	

 



/**
 * [tJavaRow_9 finally ] stop
 */

	
	/**
	 * [tLogRow_9 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_9";

	

 



/**
 * [tLogRow_9 finally ] stop
 */

	
	/**
	 * [tJavaRow_10 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_10";

	

 



/**
 * [tJavaRow_10 finally ] stop
 */

	
	/**
	 * [tLogRow_10 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_10";

	

 



/**
 * [tLogRow_10 finally ] stop
 */

	
	/**
	 * [tUniqRow_1 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 finally ] stop
 */

	
	/**
	 * [tLogRow_11 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_11";

	

 



/**
 * [tLogRow_11 finally ] stop
 */

	
	/**
	 * [tJavaRow_11 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_11";

	

 



/**
 * [tJavaRow_11 finally ] stop
 */

	
	/**
	 * [tHashOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";

	

 



/**
 * [tHashOutput_1 finally ] stop
 */










	
	/**
	 * [tLogRow_12 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_12";

	

 



/**
 * [tLogRow_12 finally ] stop
 */

	
	/**
	 * [tJavaRow_12 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_12";

	

 



/**
 * [tJavaRow_12 finally ] stop
 */

	
	/**
	 * [tHashOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";

	

 



/**
 * [tHashOutput_2 finally ] stop
 */








































































				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}
	


public static class out3Struct implements routines.system.IPersistableRow<out3Struct> {
    final static byte[] commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];
    static byte[] commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];

	
			    public String INAM;

				public String getINAM () {
					return this.INAM;
				}
				
			    public String NNI;

				public String getNNI () {
					return this.NNI;
				}
				
			    public String Prenom;

				public String getPrenom () {
					return this.Prenom;
				}
				
			    public String Nom_de_Famille;

				public String getNom_de_Famille () {
					return this.Nom_de_Famille;
				}
				
			    public java.util.Date Date_Naissance;

				public java.util.Date getDate_Naissance () {
					return this.Date_Naissance;
				}
				
			    public String Lieu_Naissance;

				public String getLieu_Naissance () {
					return this.Lieu_Naissance;
				}
				
			    public char Genre = ' ';

				public char getGenre () {
					return this.Genre;
				}
				
			    public String Num_Carte;

				public String getNum_Carte () {
					return this.Num_Carte;
				}
				
			    public java.util.Date Date_Deliv;

				public java.util.Date getDate_Deliv () {
					return this.Date_Deliv;
				}
				
			    public String Num_Serie;

				public String getNum_Serie () {
					return this.Num_Serie;
				}
				
			    public String QR_code;

				public String getQR_code () {
					return this.QR_code;
				}
				
			    public String Photo;

				public String getPhoto () {
					return this.Photo;
				}
				
			    public String PhotoPath;

				public String getPhotoPath () {
					return this.PhotoPath;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length) {
				if(length < 1024 && commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length == 0) {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[1024];
				} else {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length);
			strReturn = new String(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing) {

        	try {

        		int length = 0;
		
					this.INAM = readString(dis);
					
					this.NNI = readString(dis);
					
					this.Prenom = readString(dis);
					
					this.Nom_de_Famille = readString(dis);
					
					this.Date_Naissance = readDate(dis);
					
					this.Lieu_Naissance = readString(dis);
					
			        this.Genre = dis.readChar();
					
					this.Num_Carte = readString(dis);
					
					this.Date_Deliv = readDate(dis);
					
					this.Num_Serie = readString(dis);
					
					this.QR_code = readString(dis);
					
					this.Photo = readString(dis);
					
					this.PhotoPath = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.INAM,dos);
					
					// String
				
						writeString(this.NNI,dos);
					
					// String
				
						writeString(this.Prenom,dos);
					
					// String
				
						writeString(this.Nom_de_Famille,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Naissance,dos);
					
					// String
				
						writeString(this.Lieu_Naissance,dos);
					
					// char
				
		            	dos.writeChar(this.Genre);
					
					// String
				
						writeString(this.Num_Carte,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Deliv,dos);
					
					// String
				
						writeString(this.Num_Serie,dos);
					
					// String
				
						writeString(this.QR_code,dos);
					
					// String
				
						writeString(this.Photo,dos);
					
					// String
				
						writeString(this.PhotoPath,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("INAM="+INAM);
		sb.append(",NNI="+NNI);
		sb.append(",Prenom="+Prenom);
		sb.append(",Nom_de_Famille="+Nom_de_Famille);
		sb.append(",Date_Naissance="+String.valueOf(Date_Naissance));
		sb.append(",Lieu_Naissance="+Lieu_Naissance);
		sb.append(",Genre="+String.valueOf(Genre));
		sb.append(",Num_Carte="+Num_Carte);
		sb.append(",Date_Deliv="+String.valueOf(Date_Deliv));
		sb.append(",Num_Serie="+Num_Serie);
		sb.append(",QR_code="+QR_code);
		sb.append(",Photo="+Photo);
		sb.append(",PhotoPath="+PhotoPath);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out4Struct implements routines.system.IPersistableRow<out4Struct> {
    final static byte[] commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];
    static byte[] commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];

	
			    public String INAM;

				public String getINAM () {
					return this.INAM;
				}
				
			    public String NNI;

				public String getNNI () {
					return this.NNI;
				}
				
			    public String Prenom;

				public String getPrenom () {
					return this.Prenom;
				}
				
			    public String Nom_de_Famille;

				public String getNom_de_Famille () {
					return this.Nom_de_Famille;
				}
				
			    public java.util.Date Date_Naissance;

				public java.util.Date getDate_Naissance () {
					return this.Date_Naissance;
				}
				
			    public String Lieu_Naissance;

				public String getLieu_Naissance () {
					return this.Lieu_Naissance;
				}
				
			    public char Genre = ' ';

				public char getGenre () {
					return this.Genre;
				}
				
			    public String Num_Carte;

				public String getNum_Carte () {
					return this.Num_Carte;
				}
				
			    public java.util.Date Date_Deliv;

				public java.util.Date getDate_Deliv () {
					return this.Date_Deliv;
				}
				
			    public String Num_Serie;

				public String getNum_Serie () {
					return this.Num_Serie;
				}
				
			    public String QR_code;

				public String getQR_code () {
					return this.QR_code;
				}
				
			    public String Photo;

				public String getPhoto () {
					return this.Photo;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length) {
				if(length < 1024 && commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length == 0) {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[1024];
				} else {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length);
			strReturn = new String(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing) {

        	try {

        		int length = 0;
		
					this.INAM = readString(dis);
					
					this.NNI = readString(dis);
					
					this.Prenom = readString(dis);
					
					this.Nom_de_Famille = readString(dis);
					
					this.Date_Naissance = readDate(dis);
					
					this.Lieu_Naissance = readString(dis);
					
			        this.Genre = dis.readChar();
					
					this.Num_Carte = readString(dis);
					
					this.Date_Deliv = readDate(dis);
					
					this.Num_Serie = readString(dis);
					
					this.QR_code = readString(dis);
					
					this.Photo = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.INAM,dos);
					
					// String
				
						writeString(this.NNI,dos);
					
					// String
				
						writeString(this.Prenom,dos);
					
					// String
				
						writeString(this.Nom_de_Famille,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Naissance,dos);
					
					// String
				
						writeString(this.Lieu_Naissance,dos);
					
					// char
				
		            	dos.writeChar(this.Genre);
					
					// String
				
						writeString(this.Num_Carte,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Deliv,dos);
					
					// String
				
						writeString(this.Num_Serie,dos);
					
					// String
				
						writeString(this.QR_code,dos);
					
					// String
				
						writeString(this.Photo,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("INAM="+INAM);
		sb.append(",NNI="+NNI);
		sb.append(",Prenom="+Prenom);
		sb.append(",Nom_de_Famille="+Nom_de_Famille);
		sb.append(",Date_Naissance="+String.valueOf(Date_Naissance));
		sb.append(",Lieu_Naissance="+Lieu_Naissance);
		sb.append(",Genre="+String.valueOf(Genre));
		sb.append(",Num_Carte="+Num_Carte);
		sb.append(",Date_Deliv="+String.valueOf(Date_Deliv));
		sb.append(",Num_Serie="+Num_Serie);
		sb.append(",QR_code="+QR_code);
		sb.append(",Photo="+Photo);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row35Struct implements routines.system.IPersistableRow<row35Struct> {
    final static byte[] commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];
    static byte[] commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];

	
			    public String INAM;

				public String getINAM () {
					return this.INAM;
				}
				
			    public String NNI;

				public String getNNI () {
					return this.NNI;
				}
				
			    public String Prenom;

				public String getPrenom () {
					return this.Prenom;
				}
				
			    public String Nom_de_Famille;

				public String getNom_de_Famille () {
					return this.Nom_de_Famille;
				}
				
			    public java.util.Date Date_Naissance;

				public java.util.Date getDate_Naissance () {
					return this.Date_Naissance;
				}
				
			    public String Lieu_Naissance;

				public String getLieu_Naissance () {
					return this.Lieu_Naissance;
				}
				
			    public char Genre = ' ';

				public char getGenre () {
					return this.Genre;
				}
				
			    public String Num_Carte;

				public String getNum_Carte () {
					return this.Num_Carte;
				}
				
			    public java.util.Date Date_Deliv;

				public java.util.Date getDate_Deliv () {
					return this.Date_Deliv;
				}
				
			    public String Num_Serie;

				public String getNum_Serie () {
					return this.Num_Serie;
				}
				
			    public String QR_code;

				public String getQR_code () {
					return this.QR_code;
				}
				
			    public String Photo;

				public String getPhoto () {
					return this.Photo;
				}
				
			    public int score;

				public int getScore () {
					return this.score;
				}
				
			    public Boolean numSerieVerified;

				public Boolean getNumSerieVerified () {
					return this.numSerieVerified;
				}
				
			    public Boolean inamVerified;

				public Boolean getInamVerified () {
					return this.inamVerified;
				}
				
			    public Boolean nniVerified;

				public Boolean getNniVerified () {
					return this.nniVerified;
				}
				
			    public Boolean prenomVerified;

				public Boolean getPrenomVerified () {
					return this.prenomVerified;
				}
				
			    public Boolean nomdefamilleVerified;

				public Boolean getNomdefamilleVerified () {
					return this.nomdefamilleVerified;
				}
				
			    public Boolean genreVerified;

				public Boolean getGenreVerified () {
					return this.genreVerified;
				}
				
			    public Boolean numcarteVerified;

				public Boolean getNumcarteVerified () {
					return this.numcarteVerified;
				}
				
			    public Boolean qrCodeVerified;

				public Boolean getQrCodeVerified () {
					return this.qrCodeVerified;
				}
				
			    public Boolean photoVerified;

				public Boolean getPhotoVerified () {
					return this.photoVerified;
				}
				
			    public Boolean scoreVerified;

				public Boolean getScoreVerified () {
					return this.scoreVerified;
				}
				
			    public Boolean uniqueVerified;

				public Boolean getUniqueVerified () {
					return this.uniqueVerified;
				}
				
			    public String PhotoPath;

				public String getPhotoPath () {
					return this.PhotoPath;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length) {
				if(length < 1024 && commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length == 0) {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[1024];
				} else {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length);
			strReturn = new String(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing) {

        	try {

        		int length = 0;
		
					this.INAM = readString(dis);
					
					this.NNI = readString(dis);
					
					this.Prenom = readString(dis);
					
					this.Nom_de_Famille = readString(dis);
					
					this.Date_Naissance = readDate(dis);
					
					this.Lieu_Naissance = readString(dis);
					
			        this.Genre = dis.readChar();
					
					this.Num_Carte = readString(dis);
					
					this.Date_Deliv = readDate(dis);
					
					this.Num_Serie = readString(dis);
					
					this.QR_code = readString(dis);
					
					this.Photo = readString(dis);
					
			        this.score = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.numSerieVerified = null;
           				} else {
           			    	this.numSerieVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.inamVerified = null;
           				} else {
           			    	this.inamVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nniVerified = null;
           				} else {
           			    	this.nniVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.prenomVerified = null;
           				} else {
           			    	this.prenomVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nomdefamilleVerified = null;
           				} else {
           			    	this.nomdefamilleVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.genreVerified = null;
           				} else {
           			    	this.genreVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.numcarteVerified = null;
           				} else {
           			    	this.numcarteVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.qrCodeVerified = null;
           				} else {
           			    	this.qrCodeVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.photoVerified = null;
           				} else {
           			    	this.photoVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.scoreVerified = null;
           				} else {
           			    	this.scoreVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.uniqueVerified = null;
           				} else {
           			    	this.uniqueVerified = dis.readBoolean();
           				}
					
					this.PhotoPath = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.INAM,dos);
					
					// String
				
						writeString(this.NNI,dos);
					
					// String
				
						writeString(this.Prenom,dos);
					
					// String
				
						writeString(this.Nom_de_Famille,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Naissance,dos);
					
					// String
				
						writeString(this.Lieu_Naissance,dos);
					
					// char
				
		            	dos.writeChar(this.Genre);
					
					// String
				
						writeString(this.Num_Carte,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Deliv,dos);
					
					// String
				
						writeString(this.Num_Serie,dos);
					
					// String
				
						writeString(this.QR_code,dos);
					
					// String
				
						writeString(this.Photo,dos);
					
					// int
				
		            	dos.writeInt(this.score);
					
					// Boolean
				
						if(this.numSerieVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.numSerieVerified);
		            	}
					
					// Boolean
				
						if(this.inamVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.inamVerified);
		            	}
					
					// Boolean
				
						if(this.nniVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.nniVerified);
		            	}
					
					// Boolean
				
						if(this.prenomVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.prenomVerified);
		            	}
					
					// Boolean
				
						if(this.nomdefamilleVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.nomdefamilleVerified);
		            	}
					
					// Boolean
				
						if(this.genreVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.genreVerified);
		            	}
					
					// Boolean
				
						if(this.numcarteVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.numcarteVerified);
		            	}
					
					// Boolean
				
						if(this.qrCodeVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.qrCodeVerified);
		            	}
					
					// Boolean
				
						if(this.photoVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.photoVerified);
		            	}
					
					// Boolean
				
						if(this.scoreVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.scoreVerified);
		            	}
					
					// Boolean
				
						if(this.uniqueVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.uniqueVerified);
		            	}
					
					// String
				
						writeString(this.PhotoPath,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("INAM="+INAM);
		sb.append(",NNI="+NNI);
		sb.append(",Prenom="+Prenom);
		sb.append(",Nom_de_Famille="+Nom_de_Famille);
		sb.append(",Date_Naissance="+String.valueOf(Date_Naissance));
		sb.append(",Lieu_Naissance="+Lieu_Naissance);
		sb.append(",Genre="+String.valueOf(Genre));
		sb.append(",Num_Carte="+Num_Carte);
		sb.append(",Date_Deliv="+String.valueOf(Date_Deliv));
		sb.append(",Num_Serie="+Num_Serie);
		sb.append(",QR_code="+QR_code);
		sb.append(",Photo="+Photo);
		sb.append(",score="+String.valueOf(score));
		sb.append(",numSerieVerified="+String.valueOf(numSerieVerified));
		sb.append(",inamVerified="+String.valueOf(inamVerified));
		sb.append(",nniVerified="+String.valueOf(nniVerified));
		sb.append(",prenomVerified="+String.valueOf(prenomVerified));
		sb.append(",nomdefamilleVerified="+String.valueOf(nomdefamilleVerified));
		sb.append(",genreVerified="+String.valueOf(genreVerified));
		sb.append(",numcarteVerified="+String.valueOf(numcarteVerified));
		sb.append(",qrCodeVerified="+String.valueOf(qrCodeVerified));
		sb.append(",photoVerified="+String.valueOf(photoVerified));
		sb.append(",scoreVerified="+String.valueOf(scoreVerified));
		sb.append(",uniqueVerified="+String.valueOf(uniqueVerified));
		sb.append(",PhotoPath="+PhotoPath);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row35Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
    final static byte[] commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];
    static byte[] commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];

	
			    public String INAM;

				public String getINAM () {
					return this.INAM;
				}
				
			    public String NNI;

				public String getNNI () {
					return this.NNI;
				}
				
			    public String Prenom;

				public String getPrenom () {
					return this.Prenom;
				}
				
			    public String Nom_de_Famille;

				public String getNom_de_Famille () {
					return this.Nom_de_Famille;
				}
				
			    public java.util.Date Date_Naissance;

				public java.util.Date getDate_Naissance () {
					return this.Date_Naissance;
				}
				
			    public String Lieu_Naissance;

				public String getLieu_Naissance () {
					return this.Lieu_Naissance;
				}
				
			    public char Genre = ' ';

				public char getGenre () {
					return this.Genre;
				}
				
			    public String Num_Carte;

				public String getNum_Carte () {
					return this.Num_Carte;
				}
				
			    public java.util.Date Date_Deliv;

				public java.util.Date getDate_Deliv () {
					return this.Date_Deliv;
				}
				
			    public String Num_Serie;

				public String getNum_Serie () {
					return this.Num_Serie;
				}
				
			    public String QR_code;

				public String getQR_code () {
					return this.QR_code;
				}
				
			    public String Photo;

				public String getPhoto () {
					return this.Photo;
				}
				
			    public String PhotoPath;

				public String getPhotoPath () {
					return this.PhotoPath;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length) {
				if(length < 1024 && commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length == 0) {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[1024];
				} else {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length);
			strReturn = new String(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing) {

        	try {

        		int length = 0;
		
					this.INAM = readString(dis);
					
					this.NNI = readString(dis);
					
					this.Prenom = readString(dis);
					
					this.Nom_de_Famille = readString(dis);
					
					this.Date_Naissance = readDate(dis);
					
					this.Lieu_Naissance = readString(dis);
					
			        this.Genre = dis.readChar();
					
					this.Num_Carte = readString(dis);
					
					this.Date_Deliv = readDate(dis);
					
					this.Num_Serie = readString(dis);
					
					this.QR_code = readString(dis);
					
					this.Photo = readString(dis);
					
					this.PhotoPath = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.INAM,dos);
					
					// String
				
						writeString(this.NNI,dos);
					
					// String
				
						writeString(this.Prenom,dos);
					
					// String
				
						writeString(this.Nom_de_Famille,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Naissance,dos);
					
					// String
				
						writeString(this.Lieu_Naissance,dos);
					
					// char
				
		            	dos.writeChar(this.Genre);
					
					// String
				
						writeString(this.Num_Carte,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Deliv,dos);
					
					// String
				
						writeString(this.Num_Serie,dos);
					
					// String
				
						writeString(this.QR_code,dos);
					
					// String
				
						writeString(this.Photo,dos);
					
					// String
				
						writeString(this.PhotoPath,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("INAM="+INAM);
		sb.append(",NNI="+NNI);
		sb.append(",Prenom="+Prenom);
		sb.append(",Nom_de_Famille="+Nom_de_Famille);
		sb.append(",Date_Naissance="+String.valueOf(Date_Naissance));
		sb.append(",Lieu_Naissance="+Lieu_Naissance);
		sb.append(",Genre="+String.valueOf(Genre));
		sb.append(",Num_Carte="+Num_Carte);
		sb.append(",Date_Deliv="+String.valueOf(Date_Deliv));
		sb.append(",Num_Serie="+Num_Serie);
		sb.append(",QR_code="+QR_code);
		sb.append(",Photo="+Photo);
		sb.append(",PhotoPath="+PhotoPath);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out2Struct implements routines.system.IPersistableRow<out2Struct> {
    final static byte[] commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];
    static byte[] commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];

	
			    public String INAM;

				public String getINAM () {
					return this.INAM;
				}
				
			    public String NNI;

				public String getNNI () {
					return this.NNI;
				}
				
			    public String Prenom;

				public String getPrenom () {
					return this.Prenom;
				}
				
			    public String Nom_de_Famille;

				public String getNom_de_Famille () {
					return this.Nom_de_Famille;
				}
				
			    public java.util.Date Date_Naissance;

				public java.util.Date getDate_Naissance () {
					return this.Date_Naissance;
				}
				
			    public String Lieu_Naissance;

				public String getLieu_Naissance () {
					return this.Lieu_Naissance;
				}
				
			    public char Genre = ' ';

				public char getGenre () {
					return this.Genre;
				}
				
			    public String Num_Carte;

				public String getNum_Carte () {
					return this.Num_Carte;
				}
				
			    public java.util.Date Date_Deliv;

				public java.util.Date getDate_Deliv () {
					return this.Date_Deliv;
				}
				
			    public String Num_Serie;

				public String getNum_Serie () {
					return this.Num_Serie;
				}
				
			    public String QR_code;

				public String getQR_code () {
					return this.QR_code;
				}
				
			    public String Photo;

				public String getPhoto () {
					return this.Photo;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length) {
				if(length < 1024 && commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length == 0) {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[1024];
				} else {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length);
			strReturn = new String(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing) {

        	try {

        		int length = 0;
		
					this.INAM = readString(dis);
					
					this.NNI = readString(dis);
					
					this.Prenom = readString(dis);
					
					this.Nom_de_Famille = readString(dis);
					
					this.Date_Naissance = readDate(dis);
					
					this.Lieu_Naissance = readString(dis);
					
			        this.Genre = dis.readChar();
					
					this.Num_Carte = readString(dis);
					
					this.Date_Deliv = readDate(dis);
					
					this.Num_Serie = readString(dis);
					
					this.QR_code = readString(dis);
					
					this.Photo = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.INAM,dos);
					
					// String
				
						writeString(this.NNI,dos);
					
					// String
				
						writeString(this.Prenom,dos);
					
					// String
				
						writeString(this.Nom_de_Famille,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Naissance,dos);
					
					// String
				
						writeString(this.Lieu_Naissance,dos);
					
					// char
				
		            	dos.writeChar(this.Genre);
					
					// String
				
						writeString(this.Num_Carte,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Deliv,dos);
					
					// String
				
						writeString(this.Num_Serie,dos);
					
					// String
				
						writeString(this.QR_code,dos);
					
					// String
				
						writeString(this.Photo,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("INAM="+INAM);
		sb.append(",NNI="+NNI);
		sb.append(",Prenom="+Prenom);
		sb.append(",Nom_de_Famille="+Nom_de_Famille);
		sb.append(",Date_Naissance="+String.valueOf(Date_Naissance));
		sb.append(",Lieu_Naissance="+Lieu_Naissance);
		sb.append(",Genre="+String.valueOf(Genre));
		sb.append(",Num_Carte="+Num_Carte);
		sb.append(",Date_Deliv="+String.valueOf(Date_Deliv));
		sb.append(",Num_Serie="+Num_Serie);
		sb.append(",QR_code="+QR_code);
		sb.append(",Photo="+Photo);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row34Struct implements routines.system.IPersistableRow<row34Struct> {
    final static byte[] commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];
    static byte[] commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];

	
			    public String INAM;

				public String getINAM () {
					return this.INAM;
				}
				
			    public String NNI;

				public String getNNI () {
					return this.NNI;
				}
				
			    public String Prenom;

				public String getPrenom () {
					return this.Prenom;
				}
				
			    public String Nom_de_Famille;

				public String getNom_de_Famille () {
					return this.Nom_de_Famille;
				}
				
			    public java.util.Date Date_Naissance;

				public java.util.Date getDate_Naissance () {
					return this.Date_Naissance;
				}
				
			    public String Lieu_Naissance;

				public String getLieu_Naissance () {
					return this.Lieu_Naissance;
				}
				
			    public char Genre = ' ';

				public char getGenre () {
					return this.Genre;
				}
				
			    public String Num_Carte;

				public String getNum_Carte () {
					return this.Num_Carte;
				}
				
			    public java.util.Date Date_Deliv;

				public java.util.Date getDate_Deliv () {
					return this.Date_Deliv;
				}
				
			    public String Num_Serie;

				public String getNum_Serie () {
					return this.Num_Serie;
				}
				
			    public String QR_code;

				public String getQR_code () {
					return this.QR_code;
				}
				
			    public String Photo;

				public String getPhoto () {
					return this.Photo;
				}
				
			    public int score;

				public int getScore () {
					return this.score;
				}
				
			    public Boolean numSerieVerified;

				public Boolean getNumSerieVerified () {
					return this.numSerieVerified;
				}
				
			    public Boolean inamVerified;

				public Boolean getInamVerified () {
					return this.inamVerified;
				}
				
			    public Boolean nniVerified;

				public Boolean getNniVerified () {
					return this.nniVerified;
				}
				
			    public Boolean prenomVerified;

				public Boolean getPrenomVerified () {
					return this.prenomVerified;
				}
				
			    public Boolean nomdefamilleVerified;

				public Boolean getNomdefamilleVerified () {
					return this.nomdefamilleVerified;
				}
				
			    public Boolean genreVerified;

				public Boolean getGenreVerified () {
					return this.genreVerified;
				}
				
			    public Boolean numcarteVerified;

				public Boolean getNumcarteVerified () {
					return this.numcarteVerified;
				}
				
			    public Boolean qrCodeVerified;

				public Boolean getQrCodeVerified () {
					return this.qrCodeVerified;
				}
				
			    public Boolean photoVerified;

				public Boolean getPhotoVerified () {
					return this.photoVerified;
				}
				
			    public Boolean scoreVerified;

				public Boolean getScoreVerified () {
					return this.scoreVerified;
				}
				
			    public Boolean uniqueVerified;

				public Boolean getUniqueVerified () {
					return this.uniqueVerified;
				}
				
			    public String PhotoPath;

				public String getPhotoPath () {
					return this.PhotoPath;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length) {
				if(length < 1024 && commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length == 0) {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[1024];
				} else {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length);
			strReturn = new String(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing) {

        	try {

        		int length = 0;
		
					this.INAM = readString(dis);
					
					this.NNI = readString(dis);
					
					this.Prenom = readString(dis);
					
					this.Nom_de_Famille = readString(dis);
					
					this.Date_Naissance = readDate(dis);
					
					this.Lieu_Naissance = readString(dis);
					
			        this.Genre = dis.readChar();
					
					this.Num_Carte = readString(dis);
					
					this.Date_Deliv = readDate(dis);
					
					this.Num_Serie = readString(dis);
					
					this.QR_code = readString(dis);
					
					this.Photo = readString(dis);
					
			        this.score = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.numSerieVerified = null;
           				} else {
           			    	this.numSerieVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.inamVerified = null;
           				} else {
           			    	this.inamVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nniVerified = null;
           				} else {
           			    	this.nniVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.prenomVerified = null;
           				} else {
           			    	this.prenomVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nomdefamilleVerified = null;
           				} else {
           			    	this.nomdefamilleVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.genreVerified = null;
           				} else {
           			    	this.genreVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.numcarteVerified = null;
           				} else {
           			    	this.numcarteVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.qrCodeVerified = null;
           				} else {
           			    	this.qrCodeVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.photoVerified = null;
           				} else {
           			    	this.photoVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.scoreVerified = null;
           				} else {
           			    	this.scoreVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.uniqueVerified = null;
           				} else {
           			    	this.uniqueVerified = dis.readBoolean();
           				}
					
					this.PhotoPath = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.INAM,dos);
					
					// String
				
						writeString(this.NNI,dos);
					
					// String
				
						writeString(this.Prenom,dos);
					
					// String
				
						writeString(this.Nom_de_Famille,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Naissance,dos);
					
					// String
				
						writeString(this.Lieu_Naissance,dos);
					
					// char
				
		            	dos.writeChar(this.Genre);
					
					// String
				
						writeString(this.Num_Carte,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Deliv,dos);
					
					// String
				
						writeString(this.Num_Serie,dos);
					
					// String
				
						writeString(this.QR_code,dos);
					
					// String
				
						writeString(this.Photo,dos);
					
					// int
				
		            	dos.writeInt(this.score);
					
					// Boolean
				
						if(this.numSerieVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.numSerieVerified);
		            	}
					
					// Boolean
				
						if(this.inamVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.inamVerified);
		            	}
					
					// Boolean
				
						if(this.nniVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.nniVerified);
		            	}
					
					// Boolean
				
						if(this.prenomVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.prenomVerified);
		            	}
					
					// Boolean
				
						if(this.nomdefamilleVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.nomdefamilleVerified);
		            	}
					
					// Boolean
				
						if(this.genreVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.genreVerified);
		            	}
					
					// Boolean
				
						if(this.numcarteVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.numcarteVerified);
		            	}
					
					// Boolean
				
						if(this.qrCodeVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.qrCodeVerified);
		            	}
					
					// Boolean
				
						if(this.photoVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.photoVerified);
		            	}
					
					// Boolean
				
						if(this.scoreVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.scoreVerified);
		            	}
					
					// Boolean
				
						if(this.uniqueVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.uniqueVerified);
		            	}
					
					// String
				
						writeString(this.PhotoPath,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("INAM="+INAM);
		sb.append(",NNI="+NNI);
		sb.append(",Prenom="+Prenom);
		sb.append(",Nom_de_Famille="+Nom_de_Famille);
		sb.append(",Date_Naissance="+String.valueOf(Date_Naissance));
		sb.append(",Lieu_Naissance="+Lieu_Naissance);
		sb.append(",Genre="+String.valueOf(Genre));
		sb.append(",Num_Carte="+Num_Carte);
		sb.append(",Date_Deliv="+String.valueOf(Date_Deliv));
		sb.append(",Num_Serie="+Num_Serie);
		sb.append(",QR_code="+QR_code);
		sb.append(",Photo="+Photo);
		sb.append(",score="+String.valueOf(score));
		sb.append(",numSerieVerified="+String.valueOf(numSerieVerified));
		sb.append(",inamVerified="+String.valueOf(inamVerified));
		sb.append(",nniVerified="+String.valueOf(nniVerified));
		sb.append(",prenomVerified="+String.valueOf(prenomVerified));
		sb.append(",nomdefamilleVerified="+String.valueOf(nomdefamilleVerified));
		sb.append(",genreVerified="+String.valueOf(genreVerified));
		sb.append(",numcarteVerified="+String.valueOf(numcarteVerified));
		sb.append(",qrCodeVerified="+String.valueOf(qrCodeVerified));
		sb.append(",photoVerified="+String.valueOf(photoVerified));
		sb.append(",scoreVerified="+String.valueOf(scoreVerified));
		sb.append(",uniqueVerified="+String.valueOf(uniqueVerified));
		sb.append(",PhotoPath="+PhotoPath);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row34Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row22Struct implements routines.system.IPersistableRow<row22Struct> {
    final static byte[] commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];
    static byte[] commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];

	
			    public String INAM;

				public String getINAM () {
					return this.INAM;
				}
				
			    public String NNI;

				public String getNNI () {
					return this.NNI;
				}
				
			    public String Prenom;

				public String getPrenom () {
					return this.Prenom;
				}
				
			    public String Nom_de_Famille;

				public String getNom_de_Famille () {
					return this.Nom_de_Famille;
				}
				
			    public java.util.Date Date_Naissance;

				public java.util.Date getDate_Naissance () {
					return this.Date_Naissance;
				}
				
			    public String Lieu_Naissance;

				public String getLieu_Naissance () {
					return this.Lieu_Naissance;
				}
				
			    public char Genre = ' ';

				public char getGenre () {
					return this.Genre;
				}
				
			    public String Num_Carte;

				public String getNum_Carte () {
					return this.Num_Carte;
				}
				
			    public java.util.Date Date_Deliv;

				public java.util.Date getDate_Deliv () {
					return this.Date_Deliv;
				}
				
			    public String Num_Serie;

				public String getNum_Serie () {
					return this.Num_Serie;
				}
				
			    public String QR_code;

				public String getQR_code () {
					return this.QR_code;
				}
				
			    public String Photo;

				public String getPhoto () {
					return this.Photo;
				}
				
			    public int score;

				public int getScore () {
					return this.score;
				}
				
			    public Boolean numSerieVerified;

				public Boolean getNumSerieVerified () {
					return this.numSerieVerified;
				}
				
			    public Boolean inamVerified;

				public Boolean getInamVerified () {
					return this.inamVerified;
				}
				
			    public Boolean nniVerified;

				public Boolean getNniVerified () {
					return this.nniVerified;
				}
				
			    public Boolean prenomVerified;

				public Boolean getPrenomVerified () {
					return this.prenomVerified;
				}
				
			    public Boolean nomdefamilleVerified;

				public Boolean getNomdefamilleVerified () {
					return this.nomdefamilleVerified;
				}
				
			    public Boolean genreVerified;

				public Boolean getGenreVerified () {
					return this.genreVerified;
				}
				
			    public Boolean numcarteVerified;

				public Boolean getNumcarteVerified () {
					return this.numcarteVerified;
				}
				
			    public Boolean qrCodeVerified;

				public Boolean getQrCodeVerified () {
					return this.qrCodeVerified;
				}
				
			    public Boolean photoVerified;

				public Boolean getPhotoVerified () {
					return this.photoVerified;
				}
				
			    public Boolean scoreVerified;

				public Boolean getScoreVerified () {
					return this.scoreVerified;
				}
				
			    public Boolean uniqueVerified;

				public Boolean getUniqueVerified () {
					return this.uniqueVerified;
				}
				
			    public String PhotoPath;

				public String getPhotoPath () {
					return this.PhotoPath;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length) {
				if(length < 1024 && commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length == 0) {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[1024];
				} else {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length);
			strReturn = new String(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing) {

        	try {

        		int length = 0;
		
					this.INAM = readString(dis);
					
					this.NNI = readString(dis);
					
					this.Prenom = readString(dis);
					
					this.Nom_de_Famille = readString(dis);
					
					this.Date_Naissance = readDate(dis);
					
					this.Lieu_Naissance = readString(dis);
					
			        this.Genre = dis.readChar();
					
					this.Num_Carte = readString(dis);
					
					this.Date_Deliv = readDate(dis);
					
					this.Num_Serie = readString(dis);
					
					this.QR_code = readString(dis);
					
					this.Photo = readString(dis);
					
			        this.score = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.numSerieVerified = null;
           				} else {
           			    	this.numSerieVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.inamVerified = null;
           				} else {
           			    	this.inamVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nniVerified = null;
           				} else {
           			    	this.nniVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.prenomVerified = null;
           				} else {
           			    	this.prenomVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nomdefamilleVerified = null;
           				} else {
           			    	this.nomdefamilleVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.genreVerified = null;
           				} else {
           			    	this.genreVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.numcarteVerified = null;
           				} else {
           			    	this.numcarteVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.qrCodeVerified = null;
           				} else {
           			    	this.qrCodeVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.photoVerified = null;
           				} else {
           			    	this.photoVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.scoreVerified = null;
           				} else {
           			    	this.scoreVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.uniqueVerified = null;
           				} else {
           			    	this.uniqueVerified = dis.readBoolean();
           				}
					
					this.PhotoPath = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.INAM,dos);
					
					// String
				
						writeString(this.NNI,dos);
					
					// String
				
						writeString(this.Prenom,dos);
					
					// String
				
						writeString(this.Nom_de_Famille,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Naissance,dos);
					
					// String
				
						writeString(this.Lieu_Naissance,dos);
					
					// char
				
		            	dos.writeChar(this.Genre);
					
					// String
				
						writeString(this.Num_Carte,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Deliv,dos);
					
					// String
				
						writeString(this.Num_Serie,dos);
					
					// String
				
						writeString(this.QR_code,dos);
					
					// String
				
						writeString(this.Photo,dos);
					
					// int
				
		            	dos.writeInt(this.score);
					
					// Boolean
				
						if(this.numSerieVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.numSerieVerified);
		            	}
					
					// Boolean
				
						if(this.inamVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.inamVerified);
		            	}
					
					// Boolean
				
						if(this.nniVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.nniVerified);
		            	}
					
					// Boolean
				
						if(this.prenomVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.prenomVerified);
		            	}
					
					// Boolean
				
						if(this.nomdefamilleVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.nomdefamilleVerified);
		            	}
					
					// Boolean
				
						if(this.genreVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.genreVerified);
		            	}
					
					// Boolean
				
						if(this.numcarteVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.numcarteVerified);
		            	}
					
					// Boolean
				
						if(this.qrCodeVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.qrCodeVerified);
		            	}
					
					// Boolean
				
						if(this.photoVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.photoVerified);
		            	}
					
					// Boolean
				
						if(this.scoreVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.scoreVerified);
		            	}
					
					// Boolean
				
						if(this.uniqueVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.uniqueVerified);
		            	}
					
					// String
				
						writeString(this.PhotoPath,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("INAM="+INAM);
		sb.append(",NNI="+NNI);
		sb.append(",Prenom="+Prenom);
		sb.append(",Nom_de_Famille="+Nom_de_Famille);
		sb.append(",Date_Naissance="+String.valueOf(Date_Naissance));
		sb.append(",Lieu_Naissance="+Lieu_Naissance);
		sb.append(",Genre="+String.valueOf(Genre));
		sb.append(",Num_Carte="+Num_Carte);
		sb.append(",Date_Deliv="+String.valueOf(Date_Deliv));
		sb.append(",Num_Serie="+Num_Serie);
		sb.append(",QR_code="+QR_code);
		sb.append(",Photo="+Photo);
		sb.append(",score="+String.valueOf(score));
		sb.append(",numSerieVerified="+String.valueOf(numSerieVerified));
		sb.append(",inamVerified="+String.valueOf(inamVerified));
		sb.append(",nniVerified="+String.valueOf(nniVerified));
		sb.append(",prenomVerified="+String.valueOf(prenomVerified));
		sb.append(",nomdefamilleVerified="+String.valueOf(nomdefamilleVerified));
		sb.append(",genreVerified="+String.valueOf(genreVerified));
		sb.append(",numcarteVerified="+String.valueOf(numcarteVerified));
		sb.append(",qrCodeVerified="+String.valueOf(qrCodeVerified));
		sb.append(",photoVerified="+String.valueOf(photoVerified));
		sb.append(",scoreVerified="+String.valueOf(scoreVerified));
		sb.append(",uniqueVerified="+String.valueOf(uniqueVerified));
		sb.append(",PhotoPath="+PhotoPath);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row22Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row23Struct implements routines.system.IPersistableRow<row23Struct> {
    final static byte[] commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];
    static byte[] commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];

	
			    public String INAM;

				public String getINAM () {
					return this.INAM;
				}
				
			    public String NNI;

				public String getNNI () {
					return this.NNI;
				}
				
			    public String Prenom;

				public String getPrenom () {
					return this.Prenom;
				}
				
			    public String Nom_de_Famille;

				public String getNom_de_Famille () {
					return this.Nom_de_Famille;
				}
				
			    public java.util.Date Date_Naissance;

				public java.util.Date getDate_Naissance () {
					return this.Date_Naissance;
				}
				
			    public String Lieu_Naissance;

				public String getLieu_Naissance () {
					return this.Lieu_Naissance;
				}
				
			    public char Genre = ' ';

				public char getGenre () {
					return this.Genre;
				}
				
			    public String Num_Carte;

				public String getNum_Carte () {
					return this.Num_Carte;
				}
				
			    public java.util.Date Date_Deliv;

				public java.util.Date getDate_Deliv () {
					return this.Date_Deliv;
				}
				
			    public String Num_Serie;

				public String getNum_Serie () {
					return this.Num_Serie;
				}
				
			    public String QR_code;

				public String getQR_code () {
					return this.QR_code;
				}
				
			    public String Photo;

				public String getPhoto () {
					return this.Photo;
				}
				
			    public int score;

				public int getScore () {
					return this.score;
				}
				
			    public Boolean numSerieVerified;

				public Boolean getNumSerieVerified () {
					return this.numSerieVerified;
				}
				
			    public Boolean inamVerified;

				public Boolean getInamVerified () {
					return this.inamVerified;
				}
				
			    public Boolean nniVerified;

				public Boolean getNniVerified () {
					return this.nniVerified;
				}
				
			    public Boolean prenomVerified;

				public Boolean getPrenomVerified () {
					return this.prenomVerified;
				}
				
			    public Boolean nomdefamilleVerified;

				public Boolean getNomdefamilleVerified () {
					return this.nomdefamilleVerified;
				}
				
			    public Boolean genreVerified;

				public Boolean getGenreVerified () {
					return this.genreVerified;
				}
				
			    public Boolean numcarteVerified;

				public Boolean getNumcarteVerified () {
					return this.numcarteVerified;
				}
				
			    public Boolean qrCodeVerified;

				public Boolean getQrCodeVerified () {
					return this.qrCodeVerified;
				}
				
			    public Boolean photoVerified;

				public Boolean getPhotoVerified () {
					return this.photoVerified;
				}
				
			    public Boolean scoreVerified;

				public Boolean getScoreVerified () {
					return this.scoreVerified;
				}
				
			    public Boolean uniqueVerified;

				public Boolean getUniqueVerified () {
					return this.uniqueVerified;
				}
				
			    public String PhotoPath;

				public String getPhotoPath () {
					return this.PhotoPath;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length) {
				if(length < 1024 && commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length == 0) {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[1024];
				} else {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length);
			strReturn = new String(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing) {

        	try {

        		int length = 0;
		
					this.INAM = readString(dis);
					
					this.NNI = readString(dis);
					
					this.Prenom = readString(dis);
					
					this.Nom_de_Famille = readString(dis);
					
					this.Date_Naissance = readDate(dis);
					
					this.Lieu_Naissance = readString(dis);
					
			        this.Genre = dis.readChar();
					
					this.Num_Carte = readString(dis);
					
					this.Date_Deliv = readDate(dis);
					
					this.Num_Serie = readString(dis);
					
					this.QR_code = readString(dis);
					
					this.Photo = readString(dis);
					
			        this.score = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.numSerieVerified = null;
           				} else {
           			    	this.numSerieVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.inamVerified = null;
           				} else {
           			    	this.inamVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nniVerified = null;
           				} else {
           			    	this.nniVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.prenomVerified = null;
           				} else {
           			    	this.prenomVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nomdefamilleVerified = null;
           				} else {
           			    	this.nomdefamilleVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.genreVerified = null;
           				} else {
           			    	this.genreVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.numcarteVerified = null;
           				} else {
           			    	this.numcarteVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.qrCodeVerified = null;
           				} else {
           			    	this.qrCodeVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.photoVerified = null;
           				} else {
           			    	this.photoVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.scoreVerified = null;
           				} else {
           			    	this.scoreVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.uniqueVerified = null;
           				} else {
           			    	this.uniqueVerified = dis.readBoolean();
           				}
					
					this.PhotoPath = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.INAM,dos);
					
					// String
				
						writeString(this.NNI,dos);
					
					// String
				
						writeString(this.Prenom,dos);
					
					// String
				
						writeString(this.Nom_de_Famille,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Naissance,dos);
					
					// String
				
						writeString(this.Lieu_Naissance,dos);
					
					// char
				
		            	dos.writeChar(this.Genre);
					
					// String
				
						writeString(this.Num_Carte,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Deliv,dos);
					
					// String
				
						writeString(this.Num_Serie,dos);
					
					// String
				
						writeString(this.QR_code,dos);
					
					// String
				
						writeString(this.Photo,dos);
					
					// int
				
		            	dos.writeInt(this.score);
					
					// Boolean
				
						if(this.numSerieVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.numSerieVerified);
		            	}
					
					// Boolean
				
						if(this.inamVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.inamVerified);
		            	}
					
					// Boolean
				
						if(this.nniVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.nniVerified);
		            	}
					
					// Boolean
				
						if(this.prenomVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.prenomVerified);
		            	}
					
					// Boolean
				
						if(this.nomdefamilleVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.nomdefamilleVerified);
		            	}
					
					// Boolean
				
						if(this.genreVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.genreVerified);
		            	}
					
					// Boolean
				
						if(this.numcarteVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.numcarteVerified);
		            	}
					
					// Boolean
				
						if(this.qrCodeVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.qrCodeVerified);
		            	}
					
					// Boolean
				
						if(this.photoVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.photoVerified);
		            	}
					
					// Boolean
				
						if(this.scoreVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.scoreVerified);
		            	}
					
					// Boolean
				
						if(this.uniqueVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.uniqueVerified);
		            	}
					
					// String
				
						writeString(this.PhotoPath,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("INAM="+INAM);
		sb.append(",NNI="+NNI);
		sb.append(",Prenom="+Prenom);
		sb.append(",Nom_de_Famille="+Nom_de_Famille);
		sb.append(",Date_Naissance="+String.valueOf(Date_Naissance));
		sb.append(",Lieu_Naissance="+Lieu_Naissance);
		sb.append(",Genre="+String.valueOf(Genre));
		sb.append(",Num_Carte="+Num_Carte);
		sb.append(",Date_Deliv="+String.valueOf(Date_Deliv));
		sb.append(",Num_Serie="+Num_Serie);
		sb.append(",QR_code="+QR_code);
		sb.append(",Photo="+Photo);
		sb.append(",score="+String.valueOf(score));
		sb.append(",numSerieVerified="+String.valueOf(numSerieVerified));
		sb.append(",inamVerified="+String.valueOf(inamVerified));
		sb.append(",nniVerified="+String.valueOf(nniVerified));
		sb.append(",prenomVerified="+String.valueOf(prenomVerified));
		sb.append(",nomdefamilleVerified="+String.valueOf(nomdefamilleVerified));
		sb.append(",genreVerified="+String.valueOf(genreVerified));
		sb.append(",numcarteVerified="+String.valueOf(numcarteVerified));
		sb.append(",qrCodeVerified="+String.valueOf(qrCodeVerified));
		sb.append(",photoVerified="+String.valueOf(photoVerified));
		sb.append(",scoreVerified="+String.valueOf(scoreVerified));
		sb.append(",uniqueVerified="+String.valueOf(uniqueVerified));
		sb.append(",PhotoPath="+PhotoPath);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row23Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row33Struct implements routines.system.IPersistableRow<row33Struct> {
    final static byte[] commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];
    static byte[] commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];

	
			    public String INAM;

				public String getINAM () {
					return this.INAM;
				}
				
			    public String NNI;

				public String getNNI () {
					return this.NNI;
				}
				
			    public String Prenom;

				public String getPrenom () {
					return this.Prenom;
				}
				
			    public String Nom_de_Famille;

				public String getNom_de_Famille () {
					return this.Nom_de_Famille;
				}
				
			    public java.util.Date Date_Naissance;

				public java.util.Date getDate_Naissance () {
					return this.Date_Naissance;
				}
				
			    public String Lieu_Naissance;

				public String getLieu_Naissance () {
					return this.Lieu_Naissance;
				}
				
			    public char Genre = ' ';

				public char getGenre () {
					return this.Genre;
				}
				
			    public String Num_Carte;

				public String getNum_Carte () {
					return this.Num_Carte;
				}
				
			    public java.util.Date Date_Deliv;

				public java.util.Date getDate_Deliv () {
					return this.Date_Deliv;
				}
				
			    public String Num_Serie;

				public String getNum_Serie () {
					return this.Num_Serie;
				}
				
			    public String QR_code;

				public String getQR_code () {
					return this.QR_code;
				}
				
			    public String Photo;

				public String getPhoto () {
					return this.Photo;
				}
				
			    public int score;

				public int getScore () {
					return this.score;
				}
				
			    public Boolean numSerieVerified;

				public Boolean getNumSerieVerified () {
					return this.numSerieVerified;
				}
				
			    public Boolean inamVerified;

				public Boolean getInamVerified () {
					return this.inamVerified;
				}
				
			    public Boolean nniVerified;

				public Boolean getNniVerified () {
					return this.nniVerified;
				}
				
			    public Boolean prenomVerified;

				public Boolean getPrenomVerified () {
					return this.prenomVerified;
				}
				
			    public Boolean nomdefamilleVerified;

				public Boolean getNomdefamilleVerified () {
					return this.nomdefamilleVerified;
				}
				
			    public Boolean genreVerified;

				public Boolean getGenreVerified () {
					return this.genreVerified;
				}
				
			    public Boolean numcarteVerified;

				public Boolean getNumcarteVerified () {
					return this.numcarteVerified;
				}
				
			    public Boolean qrCodeVerified;

				public Boolean getQrCodeVerified () {
					return this.qrCodeVerified;
				}
				
			    public Boolean photoVerified;

				public Boolean getPhotoVerified () {
					return this.photoVerified;
				}
				
			    public Boolean scoreVerified;

				public Boolean getScoreVerified () {
					return this.scoreVerified;
				}
				
			    public Boolean uniqueVerified;

				public Boolean getUniqueVerified () {
					return this.uniqueVerified;
				}
				
			    public String PhotoPath;

				public String getPhotoPath () {
					return this.PhotoPath;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length) {
				if(length < 1024 && commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length == 0) {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[1024];
				} else {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length);
			strReturn = new String(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing) {

        	try {

        		int length = 0;
		
					this.INAM = readString(dis);
					
					this.NNI = readString(dis);
					
					this.Prenom = readString(dis);
					
					this.Nom_de_Famille = readString(dis);
					
					this.Date_Naissance = readDate(dis);
					
					this.Lieu_Naissance = readString(dis);
					
			        this.Genre = dis.readChar();
					
					this.Num_Carte = readString(dis);
					
					this.Date_Deliv = readDate(dis);
					
					this.Num_Serie = readString(dis);
					
					this.QR_code = readString(dis);
					
					this.Photo = readString(dis);
					
			        this.score = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.numSerieVerified = null;
           				} else {
           			    	this.numSerieVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.inamVerified = null;
           				} else {
           			    	this.inamVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nniVerified = null;
           				} else {
           			    	this.nniVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.prenomVerified = null;
           				} else {
           			    	this.prenomVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nomdefamilleVerified = null;
           				} else {
           			    	this.nomdefamilleVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.genreVerified = null;
           				} else {
           			    	this.genreVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.numcarteVerified = null;
           				} else {
           			    	this.numcarteVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.qrCodeVerified = null;
           				} else {
           			    	this.qrCodeVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.photoVerified = null;
           				} else {
           			    	this.photoVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.scoreVerified = null;
           				} else {
           			    	this.scoreVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.uniqueVerified = null;
           				} else {
           			    	this.uniqueVerified = dis.readBoolean();
           				}
					
					this.PhotoPath = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.INAM,dos);
					
					// String
				
						writeString(this.NNI,dos);
					
					// String
				
						writeString(this.Prenom,dos);
					
					// String
				
						writeString(this.Nom_de_Famille,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Naissance,dos);
					
					// String
				
						writeString(this.Lieu_Naissance,dos);
					
					// char
				
		            	dos.writeChar(this.Genre);
					
					// String
				
						writeString(this.Num_Carte,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Deliv,dos);
					
					// String
				
						writeString(this.Num_Serie,dos);
					
					// String
				
						writeString(this.QR_code,dos);
					
					// String
				
						writeString(this.Photo,dos);
					
					// int
				
		            	dos.writeInt(this.score);
					
					// Boolean
				
						if(this.numSerieVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.numSerieVerified);
		            	}
					
					// Boolean
				
						if(this.inamVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.inamVerified);
		            	}
					
					// Boolean
				
						if(this.nniVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.nniVerified);
		            	}
					
					// Boolean
				
						if(this.prenomVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.prenomVerified);
		            	}
					
					// Boolean
				
						if(this.nomdefamilleVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.nomdefamilleVerified);
		            	}
					
					// Boolean
				
						if(this.genreVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.genreVerified);
		            	}
					
					// Boolean
				
						if(this.numcarteVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.numcarteVerified);
		            	}
					
					// Boolean
				
						if(this.qrCodeVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.qrCodeVerified);
		            	}
					
					// Boolean
				
						if(this.photoVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.photoVerified);
		            	}
					
					// Boolean
				
						if(this.scoreVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.scoreVerified);
		            	}
					
					// Boolean
				
						if(this.uniqueVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.uniqueVerified);
		            	}
					
					// String
				
						writeString(this.PhotoPath,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("INAM="+INAM);
		sb.append(",NNI="+NNI);
		sb.append(",Prenom="+Prenom);
		sb.append(",Nom_de_Famille="+Nom_de_Famille);
		sb.append(",Date_Naissance="+String.valueOf(Date_Naissance));
		sb.append(",Lieu_Naissance="+Lieu_Naissance);
		sb.append(",Genre="+String.valueOf(Genre));
		sb.append(",Num_Carte="+Num_Carte);
		sb.append(",Date_Deliv="+String.valueOf(Date_Deliv));
		sb.append(",Num_Serie="+Num_Serie);
		sb.append(",QR_code="+QR_code);
		sb.append(",Photo="+Photo);
		sb.append(",score="+String.valueOf(score));
		sb.append(",numSerieVerified="+String.valueOf(numSerieVerified));
		sb.append(",inamVerified="+String.valueOf(inamVerified));
		sb.append(",nniVerified="+String.valueOf(nniVerified));
		sb.append(",prenomVerified="+String.valueOf(prenomVerified));
		sb.append(",nomdefamilleVerified="+String.valueOf(nomdefamilleVerified));
		sb.append(",genreVerified="+String.valueOf(genreVerified));
		sb.append(",numcarteVerified="+String.valueOf(numcarteVerified));
		sb.append(",qrCodeVerified="+String.valueOf(qrCodeVerified));
		sb.append(",photoVerified="+String.valueOf(photoVerified));
		sb.append(",scoreVerified="+String.valueOf(scoreVerified));
		sb.append(",uniqueVerified="+String.valueOf(uniqueVerified));
		sb.append(",PhotoPath="+PhotoPath);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row33Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row32Struct implements routines.system.IPersistableRow<row32Struct> {
    final static byte[] commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];
    static byte[] commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];

	
			    public String INAM;

				public String getINAM () {
					return this.INAM;
				}
				
			    public String NNI;

				public String getNNI () {
					return this.NNI;
				}
				
			    public String Prenom;

				public String getPrenom () {
					return this.Prenom;
				}
				
			    public String Nom_de_Famille;

				public String getNom_de_Famille () {
					return this.Nom_de_Famille;
				}
				
			    public java.util.Date Date_Naissance;

				public java.util.Date getDate_Naissance () {
					return this.Date_Naissance;
				}
				
			    public String Lieu_Naissance;

				public String getLieu_Naissance () {
					return this.Lieu_Naissance;
				}
				
			    public char Genre = ' ';

				public char getGenre () {
					return this.Genre;
				}
				
			    public String Num_Carte;

				public String getNum_Carte () {
					return this.Num_Carte;
				}
				
			    public java.util.Date Date_Deliv;

				public java.util.Date getDate_Deliv () {
					return this.Date_Deliv;
				}
				
			    public String Num_Serie;

				public String getNum_Serie () {
					return this.Num_Serie;
				}
				
			    public String QR_code;

				public String getQR_code () {
					return this.QR_code;
				}
				
			    public String Photo;

				public String getPhoto () {
					return this.Photo;
				}
				
			    public int score;

				public int getScore () {
					return this.score;
				}
				
			    public Boolean numSerieVerified;

				public Boolean getNumSerieVerified () {
					return this.numSerieVerified;
				}
				
			    public Boolean inamVerified;

				public Boolean getInamVerified () {
					return this.inamVerified;
				}
				
			    public Boolean nniVerified;

				public Boolean getNniVerified () {
					return this.nniVerified;
				}
				
			    public Boolean prenomVerified;

				public Boolean getPrenomVerified () {
					return this.prenomVerified;
				}
				
			    public Boolean nomdefamilleVerified;

				public Boolean getNomdefamilleVerified () {
					return this.nomdefamilleVerified;
				}
				
			    public Boolean genreVerified;

				public Boolean getGenreVerified () {
					return this.genreVerified;
				}
				
			    public Boolean numcarteVerified;

				public Boolean getNumcarteVerified () {
					return this.numcarteVerified;
				}
				
			    public Boolean qrCodeVerified;

				public Boolean getQrCodeVerified () {
					return this.qrCodeVerified;
				}
				
			    public Boolean photoVerified;

				public Boolean getPhotoVerified () {
					return this.photoVerified;
				}
				
			    public Boolean scoreVerified;

				public Boolean getScoreVerified () {
					return this.scoreVerified;
				}
				
			    public Boolean uniqueVerified;

				public Boolean getUniqueVerified () {
					return this.uniqueVerified;
				}
				
			    public String PhotoPath;

				public String getPhotoPath () {
					return this.PhotoPath;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length) {
				if(length < 1024 && commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length == 0) {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[1024];
				} else {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length);
			strReturn = new String(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing) {

        	try {

        		int length = 0;
		
					this.INAM = readString(dis);
					
					this.NNI = readString(dis);
					
					this.Prenom = readString(dis);
					
					this.Nom_de_Famille = readString(dis);
					
					this.Date_Naissance = readDate(dis);
					
					this.Lieu_Naissance = readString(dis);
					
			        this.Genre = dis.readChar();
					
					this.Num_Carte = readString(dis);
					
					this.Date_Deliv = readDate(dis);
					
					this.Num_Serie = readString(dis);
					
					this.QR_code = readString(dis);
					
					this.Photo = readString(dis);
					
			        this.score = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.numSerieVerified = null;
           				} else {
           			    	this.numSerieVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.inamVerified = null;
           				} else {
           			    	this.inamVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nniVerified = null;
           				} else {
           			    	this.nniVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.prenomVerified = null;
           				} else {
           			    	this.prenomVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nomdefamilleVerified = null;
           				} else {
           			    	this.nomdefamilleVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.genreVerified = null;
           				} else {
           			    	this.genreVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.numcarteVerified = null;
           				} else {
           			    	this.numcarteVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.qrCodeVerified = null;
           				} else {
           			    	this.qrCodeVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.photoVerified = null;
           				} else {
           			    	this.photoVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.scoreVerified = null;
           				} else {
           			    	this.scoreVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.uniqueVerified = null;
           				} else {
           			    	this.uniqueVerified = dis.readBoolean();
           				}
					
					this.PhotoPath = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.INAM,dos);
					
					// String
				
						writeString(this.NNI,dos);
					
					// String
				
						writeString(this.Prenom,dos);
					
					// String
				
						writeString(this.Nom_de_Famille,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Naissance,dos);
					
					// String
				
						writeString(this.Lieu_Naissance,dos);
					
					// char
				
		            	dos.writeChar(this.Genre);
					
					// String
				
						writeString(this.Num_Carte,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Deliv,dos);
					
					// String
				
						writeString(this.Num_Serie,dos);
					
					// String
				
						writeString(this.QR_code,dos);
					
					// String
				
						writeString(this.Photo,dos);
					
					// int
				
		            	dos.writeInt(this.score);
					
					// Boolean
				
						if(this.numSerieVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.numSerieVerified);
		            	}
					
					// Boolean
				
						if(this.inamVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.inamVerified);
		            	}
					
					// Boolean
				
						if(this.nniVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.nniVerified);
		            	}
					
					// Boolean
				
						if(this.prenomVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.prenomVerified);
		            	}
					
					// Boolean
				
						if(this.nomdefamilleVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.nomdefamilleVerified);
		            	}
					
					// Boolean
				
						if(this.genreVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.genreVerified);
		            	}
					
					// Boolean
				
						if(this.numcarteVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.numcarteVerified);
		            	}
					
					// Boolean
				
						if(this.qrCodeVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.qrCodeVerified);
		            	}
					
					// Boolean
				
						if(this.photoVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.photoVerified);
		            	}
					
					// Boolean
				
						if(this.scoreVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.scoreVerified);
		            	}
					
					// Boolean
				
						if(this.uniqueVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.uniqueVerified);
		            	}
					
					// String
				
						writeString(this.PhotoPath,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("INAM="+INAM);
		sb.append(",NNI="+NNI);
		sb.append(",Prenom="+Prenom);
		sb.append(",Nom_de_Famille="+Nom_de_Famille);
		sb.append(",Date_Naissance="+String.valueOf(Date_Naissance));
		sb.append(",Lieu_Naissance="+Lieu_Naissance);
		sb.append(",Genre="+String.valueOf(Genre));
		sb.append(",Num_Carte="+Num_Carte);
		sb.append(",Date_Deliv="+String.valueOf(Date_Deliv));
		sb.append(",Num_Serie="+Num_Serie);
		sb.append(",QR_code="+QR_code);
		sb.append(",Photo="+Photo);
		sb.append(",score="+String.valueOf(score));
		sb.append(",numSerieVerified="+String.valueOf(numSerieVerified));
		sb.append(",inamVerified="+String.valueOf(inamVerified));
		sb.append(",nniVerified="+String.valueOf(nniVerified));
		sb.append(",prenomVerified="+String.valueOf(prenomVerified));
		sb.append(",nomdefamilleVerified="+String.valueOf(nomdefamilleVerified));
		sb.append(",genreVerified="+String.valueOf(genreVerified));
		sb.append(",numcarteVerified="+String.valueOf(numcarteVerified));
		sb.append(",qrCodeVerified="+String.valueOf(qrCodeVerified));
		sb.append(",photoVerified="+String.valueOf(photoVerified));
		sb.append(",scoreVerified="+String.valueOf(scoreVerified));
		sb.append(",uniqueVerified="+String.valueOf(uniqueVerified));
		sb.append(",PhotoPath="+PhotoPath);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row32Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row30Struct implements routines.system.IPersistableRow<row30Struct> {
    final static byte[] commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];
    static byte[] commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];

	
			    public String INAM;

				public String getINAM () {
					return this.INAM;
				}
				
			    public String NNI;

				public String getNNI () {
					return this.NNI;
				}
				
			    public String Prenom;

				public String getPrenom () {
					return this.Prenom;
				}
				
			    public String Nom_de_Famille;

				public String getNom_de_Famille () {
					return this.Nom_de_Famille;
				}
				
			    public java.util.Date Date_Naissance;

				public java.util.Date getDate_Naissance () {
					return this.Date_Naissance;
				}
				
			    public String Lieu_Naissance;

				public String getLieu_Naissance () {
					return this.Lieu_Naissance;
				}
				
			    public char Genre = ' ';

				public char getGenre () {
					return this.Genre;
				}
				
			    public String Num_Carte;

				public String getNum_Carte () {
					return this.Num_Carte;
				}
				
			    public java.util.Date Date_Deliv;

				public java.util.Date getDate_Deliv () {
					return this.Date_Deliv;
				}
				
			    public String Num_Serie;

				public String getNum_Serie () {
					return this.Num_Serie;
				}
				
			    public String QR_code;

				public String getQR_code () {
					return this.QR_code;
				}
				
			    public String Photo;

				public String getPhoto () {
					return this.Photo;
				}
				
			    public int score;

				public int getScore () {
					return this.score;
				}
				
			    public Boolean numSerieVerified;

				public Boolean getNumSerieVerified () {
					return this.numSerieVerified;
				}
				
			    public Boolean inamVerified;

				public Boolean getInamVerified () {
					return this.inamVerified;
				}
				
			    public Boolean nniVerified;

				public Boolean getNniVerified () {
					return this.nniVerified;
				}
				
			    public Boolean prenomVerified;

				public Boolean getPrenomVerified () {
					return this.prenomVerified;
				}
				
			    public Boolean nomdefamilleVerified;

				public Boolean getNomdefamilleVerified () {
					return this.nomdefamilleVerified;
				}
				
			    public Boolean genreVerified;

				public Boolean getGenreVerified () {
					return this.genreVerified;
				}
				
			    public Boolean numcarteVerified;

				public Boolean getNumcarteVerified () {
					return this.numcarteVerified;
				}
				
			    public Boolean qrCodeVerified;

				public Boolean getQrCodeVerified () {
					return this.qrCodeVerified;
				}
				
			    public Boolean photoVerified;

				public Boolean getPhotoVerified () {
					return this.photoVerified;
				}
				
			    public Boolean scoreVerified;

				public Boolean getScoreVerified () {
					return this.scoreVerified;
				}
				
			    public Boolean uniqueVerified;

				public Boolean getUniqueVerified () {
					return this.uniqueVerified;
				}
				
			    public String PhotoPath;

				public String getPhotoPath () {
					return this.PhotoPath;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length) {
				if(length < 1024 && commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length == 0) {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[1024];
				} else {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length);
			strReturn = new String(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing) {

        	try {

        		int length = 0;
		
					this.INAM = readString(dis);
					
					this.NNI = readString(dis);
					
					this.Prenom = readString(dis);
					
					this.Nom_de_Famille = readString(dis);
					
					this.Date_Naissance = readDate(dis);
					
					this.Lieu_Naissance = readString(dis);
					
			        this.Genre = dis.readChar();
					
					this.Num_Carte = readString(dis);
					
					this.Date_Deliv = readDate(dis);
					
					this.Num_Serie = readString(dis);
					
					this.QR_code = readString(dis);
					
					this.Photo = readString(dis);
					
			        this.score = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.numSerieVerified = null;
           				} else {
           			    	this.numSerieVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.inamVerified = null;
           				} else {
           			    	this.inamVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nniVerified = null;
           				} else {
           			    	this.nniVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.prenomVerified = null;
           				} else {
           			    	this.prenomVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nomdefamilleVerified = null;
           				} else {
           			    	this.nomdefamilleVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.genreVerified = null;
           				} else {
           			    	this.genreVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.numcarteVerified = null;
           				} else {
           			    	this.numcarteVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.qrCodeVerified = null;
           				} else {
           			    	this.qrCodeVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.photoVerified = null;
           				} else {
           			    	this.photoVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.scoreVerified = null;
           				} else {
           			    	this.scoreVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.uniqueVerified = null;
           				} else {
           			    	this.uniqueVerified = dis.readBoolean();
           				}
					
					this.PhotoPath = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.INAM,dos);
					
					// String
				
						writeString(this.NNI,dos);
					
					// String
				
						writeString(this.Prenom,dos);
					
					// String
				
						writeString(this.Nom_de_Famille,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Naissance,dos);
					
					// String
				
						writeString(this.Lieu_Naissance,dos);
					
					// char
				
		            	dos.writeChar(this.Genre);
					
					// String
				
						writeString(this.Num_Carte,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Deliv,dos);
					
					// String
				
						writeString(this.Num_Serie,dos);
					
					// String
				
						writeString(this.QR_code,dos);
					
					// String
				
						writeString(this.Photo,dos);
					
					// int
				
		            	dos.writeInt(this.score);
					
					// Boolean
				
						if(this.numSerieVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.numSerieVerified);
		            	}
					
					// Boolean
				
						if(this.inamVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.inamVerified);
		            	}
					
					// Boolean
				
						if(this.nniVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.nniVerified);
		            	}
					
					// Boolean
				
						if(this.prenomVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.prenomVerified);
		            	}
					
					// Boolean
				
						if(this.nomdefamilleVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.nomdefamilleVerified);
		            	}
					
					// Boolean
				
						if(this.genreVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.genreVerified);
		            	}
					
					// Boolean
				
						if(this.numcarteVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.numcarteVerified);
		            	}
					
					// Boolean
				
						if(this.qrCodeVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.qrCodeVerified);
		            	}
					
					// Boolean
				
						if(this.photoVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.photoVerified);
		            	}
					
					// Boolean
				
						if(this.scoreVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.scoreVerified);
		            	}
					
					// Boolean
				
						if(this.uniqueVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.uniqueVerified);
		            	}
					
					// String
				
						writeString(this.PhotoPath,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("INAM="+INAM);
		sb.append(",NNI="+NNI);
		sb.append(",Prenom="+Prenom);
		sb.append(",Nom_de_Famille="+Nom_de_Famille);
		sb.append(",Date_Naissance="+String.valueOf(Date_Naissance));
		sb.append(",Lieu_Naissance="+Lieu_Naissance);
		sb.append(",Genre="+String.valueOf(Genre));
		sb.append(",Num_Carte="+Num_Carte);
		sb.append(",Date_Deliv="+String.valueOf(Date_Deliv));
		sb.append(",Num_Serie="+Num_Serie);
		sb.append(",QR_code="+QR_code);
		sb.append(",Photo="+Photo);
		sb.append(",score="+String.valueOf(score));
		sb.append(",numSerieVerified="+String.valueOf(numSerieVerified));
		sb.append(",inamVerified="+String.valueOf(inamVerified));
		sb.append(",nniVerified="+String.valueOf(nniVerified));
		sb.append(",prenomVerified="+String.valueOf(prenomVerified));
		sb.append(",nomdefamilleVerified="+String.valueOf(nomdefamilleVerified));
		sb.append(",genreVerified="+String.valueOf(genreVerified));
		sb.append(",numcarteVerified="+String.valueOf(numcarteVerified));
		sb.append(",qrCodeVerified="+String.valueOf(qrCodeVerified));
		sb.append(",photoVerified="+String.valueOf(photoVerified));
		sb.append(",scoreVerified="+String.valueOf(scoreVerified));
		sb.append(",uniqueVerified="+String.valueOf(uniqueVerified));
		sb.append(",PhotoPath="+PhotoPath);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row30Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row31Struct implements routines.system.IPersistableRow<row31Struct> {
    final static byte[] commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];
    static byte[] commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];

	
			    public String INAM;

				public String getINAM () {
					return this.INAM;
				}
				
			    public String NNI;

				public String getNNI () {
					return this.NNI;
				}
				
			    public String Prenom;

				public String getPrenom () {
					return this.Prenom;
				}
				
			    public String Nom_de_Famille;

				public String getNom_de_Famille () {
					return this.Nom_de_Famille;
				}
				
			    public java.util.Date Date_Naissance;

				public java.util.Date getDate_Naissance () {
					return this.Date_Naissance;
				}
				
			    public String Lieu_Naissance;

				public String getLieu_Naissance () {
					return this.Lieu_Naissance;
				}
				
			    public char Genre = ' ';

				public char getGenre () {
					return this.Genre;
				}
				
			    public String Num_Carte;

				public String getNum_Carte () {
					return this.Num_Carte;
				}
				
			    public java.util.Date Date_Deliv;

				public java.util.Date getDate_Deliv () {
					return this.Date_Deliv;
				}
				
			    public String Num_Serie;

				public String getNum_Serie () {
					return this.Num_Serie;
				}
				
			    public String QR_code;

				public String getQR_code () {
					return this.QR_code;
				}
				
			    public String Photo;

				public String getPhoto () {
					return this.Photo;
				}
				
			    public int score;

				public int getScore () {
					return this.score;
				}
				
			    public Boolean numSerieVerified;

				public Boolean getNumSerieVerified () {
					return this.numSerieVerified;
				}
				
			    public Boolean inamVerified;

				public Boolean getInamVerified () {
					return this.inamVerified;
				}
				
			    public Boolean nniVerified;

				public Boolean getNniVerified () {
					return this.nniVerified;
				}
				
			    public Boolean prenomVerified;

				public Boolean getPrenomVerified () {
					return this.prenomVerified;
				}
				
			    public Boolean nomdefamilleVerified;

				public Boolean getNomdefamilleVerified () {
					return this.nomdefamilleVerified;
				}
				
			    public Boolean genreVerified;

				public Boolean getGenreVerified () {
					return this.genreVerified;
				}
				
			    public Boolean numcarteVerified;

				public Boolean getNumcarteVerified () {
					return this.numcarteVerified;
				}
				
			    public Boolean qrCodeVerified;

				public Boolean getQrCodeVerified () {
					return this.qrCodeVerified;
				}
				
			    public Boolean photoVerified;

				public Boolean getPhotoVerified () {
					return this.photoVerified;
				}
				
			    public Boolean scoreVerified;

				public Boolean getScoreVerified () {
					return this.scoreVerified;
				}
				
			    public Boolean uniqueVerified;

				public Boolean getUniqueVerified () {
					return this.uniqueVerified;
				}
				
			    public String PhotoPath;

				public String getPhotoPath () {
					return this.PhotoPath;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length) {
				if(length < 1024 && commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length == 0) {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[1024];
				} else {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length);
			strReturn = new String(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing) {

        	try {

        		int length = 0;
		
					this.INAM = readString(dis);
					
					this.NNI = readString(dis);
					
					this.Prenom = readString(dis);
					
					this.Nom_de_Famille = readString(dis);
					
					this.Date_Naissance = readDate(dis);
					
					this.Lieu_Naissance = readString(dis);
					
			        this.Genre = dis.readChar();
					
					this.Num_Carte = readString(dis);
					
					this.Date_Deliv = readDate(dis);
					
					this.Num_Serie = readString(dis);
					
					this.QR_code = readString(dis);
					
					this.Photo = readString(dis);
					
			        this.score = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.numSerieVerified = null;
           				} else {
           			    	this.numSerieVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.inamVerified = null;
           				} else {
           			    	this.inamVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nniVerified = null;
           				} else {
           			    	this.nniVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.prenomVerified = null;
           				} else {
           			    	this.prenomVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nomdefamilleVerified = null;
           				} else {
           			    	this.nomdefamilleVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.genreVerified = null;
           				} else {
           			    	this.genreVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.numcarteVerified = null;
           				} else {
           			    	this.numcarteVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.qrCodeVerified = null;
           				} else {
           			    	this.qrCodeVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.photoVerified = null;
           				} else {
           			    	this.photoVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.scoreVerified = null;
           				} else {
           			    	this.scoreVerified = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.uniqueVerified = null;
           				} else {
           			    	this.uniqueVerified = dis.readBoolean();
           				}
					
					this.PhotoPath = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.INAM,dos);
					
					// String
				
						writeString(this.NNI,dos);
					
					// String
				
						writeString(this.Prenom,dos);
					
					// String
				
						writeString(this.Nom_de_Famille,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Naissance,dos);
					
					// String
				
						writeString(this.Lieu_Naissance,dos);
					
					// char
				
		            	dos.writeChar(this.Genre);
					
					// String
				
						writeString(this.Num_Carte,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Deliv,dos);
					
					// String
				
						writeString(this.Num_Serie,dos);
					
					// String
				
						writeString(this.QR_code,dos);
					
					// String
				
						writeString(this.Photo,dos);
					
					// int
				
		            	dos.writeInt(this.score);
					
					// Boolean
				
						if(this.numSerieVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.numSerieVerified);
		            	}
					
					// Boolean
				
						if(this.inamVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.inamVerified);
		            	}
					
					// Boolean
				
						if(this.nniVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.nniVerified);
		            	}
					
					// Boolean
				
						if(this.prenomVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.prenomVerified);
		            	}
					
					// Boolean
				
						if(this.nomdefamilleVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.nomdefamilleVerified);
		            	}
					
					// Boolean
				
						if(this.genreVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.genreVerified);
		            	}
					
					// Boolean
				
						if(this.numcarteVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.numcarteVerified);
		            	}
					
					// Boolean
				
						if(this.qrCodeVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.qrCodeVerified);
		            	}
					
					// Boolean
				
						if(this.photoVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.photoVerified);
		            	}
					
					// Boolean
				
						if(this.scoreVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.scoreVerified);
		            	}
					
					// Boolean
				
						if(this.uniqueVerified == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.uniqueVerified);
		            	}
					
					// String
				
						writeString(this.PhotoPath,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("INAM="+INAM);
		sb.append(",NNI="+NNI);
		sb.append(",Prenom="+Prenom);
		sb.append(",Nom_de_Famille="+Nom_de_Famille);
		sb.append(",Date_Naissance="+String.valueOf(Date_Naissance));
		sb.append(",Lieu_Naissance="+Lieu_Naissance);
		sb.append(",Genre="+String.valueOf(Genre));
		sb.append(",Num_Carte="+Num_Carte);
		sb.append(",Date_Deliv="+String.valueOf(Date_Deliv));
		sb.append(",Num_Serie="+Num_Serie);
		sb.append(",QR_code="+QR_code);
		sb.append(",Photo="+Photo);
		sb.append(",score="+String.valueOf(score));
		sb.append(",numSerieVerified="+String.valueOf(numSerieVerified));
		sb.append(",inamVerified="+String.valueOf(inamVerified));
		sb.append(",nniVerified="+String.valueOf(nniVerified));
		sb.append(",prenomVerified="+String.valueOf(prenomVerified));
		sb.append(",nomdefamilleVerified="+String.valueOf(nomdefamilleVerified));
		sb.append(",genreVerified="+String.valueOf(genreVerified));
		sb.append(",numcarteVerified="+String.valueOf(numcarteVerified));
		sb.append(",qrCodeVerified="+String.valueOf(qrCodeVerified));
		sb.append(",photoVerified="+String.valueOf(photoVerified));
		sb.append(",scoreVerified="+String.valueOf(scoreVerified));
		sb.append(",uniqueVerified="+String.valueOf(uniqueVerified));
		sb.append(",PhotoPath="+PhotoPath);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row31Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tHashInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row30Struct row30 = new row30Struct();

		row31Struct row31 = new row31Struct();

			row32Struct row32 = new row32Struct();
row32Struct row33 = row32;
row22Struct row22 = new row22Struct();
row22Struct row34 = row22;
out1Struct out1 = new out1Struct();
out2Struct out2 = new out2Struct();
row23Struct row23 = new row23Struct();
row23Struct row35 = row23;
out3Struct out3 = new out3Struct();
out4Struct out4 = new out4Struct();








	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out1");
					}
				
		int tos_count_tFileOutputDelimited_1 = 0;
		

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File(context.validcsvpath)).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */"@"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
                        if(fileToDelete_tFileOutputDelimited_1.exists()) {
                            fileToDelete_tFileOutputDelimited_1.delete();
                        }
                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, false),"UTF-8"));
                                    if(filetFileOutputDelimited_1.length()==0){
                                        outtFileOutputDelimited_1.write("INAM");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("NNI");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("Prenom");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("Nom_de_Famille");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("Date_Naissance");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("Lieu_Naissance");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("Genre");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("Num_Carte");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("Date_Deliv");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("Num_Serie");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("QR_code");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("Photo");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("PhotoPath");
                                        outtFileOutputDelimited_1.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);
    resourceMap.put("isFileGenerated_tFileOutputDelimited_1", isFileGenerated_tFileOutputDelimited_1);
        resourceMap.put("filetFileOutputDelimited_1", filetFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */




	
	/**
	 * [tFileOutputExcel_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_1", false);
		start_Hash.put("tFileOutputExcel_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out2");
					}
				
		int tos_count_tFileOutputExcel_1 = 0;
		


		int columnIndex_tFileOutputExcel_1 = 0;
		
		String fileName_tFileOutputExcel_1=context.validexcelpath;
		int nb_line_tFileOutputExcel_1 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_1 = new org.talend.ExcelTool();
		
		xlsxTool_tFileOutputExcel_1.setSheet("Sheet1");
		xlsxTool_tFileOutputExcel_1.setAppend(false,false);
		xlsxTool_tFileOutputExcel_1.setRecalculateFormula(false);
		xlsxTool_tFileOutputExcel_1.setXY(false,0,0,false);
		
		java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_1 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap.get("concurrentHashMap");
		java.lang.Object lockObj_tFileOutputExcel_1 = chm_tFileOutputExcel_1.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_1", k -> new Object());
		synchronized (lockObj_tFileOutputExcel_1) {
			
				xlsxTool_tFileOutputExcel_1.prepareXlsxFile(fileName_tFileOutputExcel_1);
			
		}
		
		xlsxTool_tFileOutputExcel_1.setFont("");
		
		if (xlsxTool_tFileOutputExcel_1.getStartRow() == 0){
		
		xlsxTool_tFileOutputExcel_1.addRow();
		
		xlsxTool_tFileOutputExcel_1.addCellValue("INAM");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("NNI");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("Prenom");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("Nom_de_Famille");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("Date_Naissance");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("Lieu_Naissance");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("Genre");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("Num_Carte");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("Date_Deliv");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("Num_Serie");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("QR_code");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("Photo");
		
		nb_line_tFileOutputExcel_1++; 
		
	}
		

 



/**
 * [tFileOutputExcel_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row34");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
out1Struct out1_tmp = new out1Struct();
out2Struct out2_tmp = new out2Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tLogRow_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_14", false);
		start_Hash.put("tLogRow_14", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_14";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row22");
					}
				
		int tos_count_tLogRow_14 = 0;
		

 



/**
 * [tLogRow_14 begin ] stop
 */






	
	/**
	 * [tFileOutputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_2", false);
		start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out3");
					}
				
		int tos_count_tFileOutputDelimited_2 = 0;
		

String fileName_tFileOutputDelimited_2 = "";
    fileName_tFileOutputDelimited_2 = (new java.io.File(context.rejectcsvpath)).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_2 = null;
    String extension_tFileOutputDelimited_2 = null;
    String directory_tFileOutputDelimited_2 = null;
    if((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        }
        directory_tFileOutputDelimited_2 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_2 = true;
    java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
    globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
            int nb_line_tFileOutputDelimited_2 = 0;
            int splitedFileNo_tFileOutputDelimited_2 = 0;
            int currentRow_tFileOutputDelimited_2 = 0;

            final String OUT_DELIM_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:FIELDSEPARATOR */"@"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
                        if(!dir_tFileOutputDelimited_2.exists()) {
                            dir_tFileOutputDelimited_2.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_2 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
                        if(fileToDelete_tFileOutputDelimited_2.exists()) {
                            fileToDelete_tFileOutputDelimited_2.delete();
                        }
                        outtFileOutputDelimited_2 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, false),"UTF-8"));
                                    if(filetFileOutputDelimited_2.length()==0){
                                        outtFileOutputDelimited_2.write("INAM");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("NNI");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("Prenom");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("Nom_de_Famille");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("Date_Naissance");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("Lieu_Naissance");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("Genre");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("Num_Carte");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("Date_Deliv");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("Num_Serie");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("QR_code");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("Photo");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("PhotoPath");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("errorMessage");
                                        outtFileOutputDelimited_2.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_2", outtFileOutputDelimited_2);
resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);
    resourceMap.put("isFileGenerated_tFileOutputDelimited_2", isFileGenerated_tFileOutputDelimited_2);
        resourceMap.put("filetFileOutputDelimited_2", filetFileOutputDelimited_2);

 



/**
 * [tFileOutputDelimited_2 begin ] stop
 */




	
	/**
	 * [tFileOutputExcel_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_2", false);
		start_Hash.put("tFileOutputExcel_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out4");
					}
				
		int tos_count_tFileOutputExcel_2 = 0;
		


		int columnIndex_tFileOutputExcel_2 = 0;
		
		String fileName_tFileOutputExcel_2=context.rejectexcelpath;
		int nb_line_tFileOutputExcel_2 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_2 = new org.talend.ExcelTool();
		
		xlsxTool_tFileOutputExcel_2.setSheet("Sheet1");
		xlsxTool_tFileOutputExcel_2.setAppend(false,false);
		xlsxTool_tFileOutputExcel_2.setRecalculateFormula(false);
		xlsxTool_tFileOutputExcel_2.setXY(false,0,0,false);
		
		java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_2 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap.get("concurrentHashMap");
		java.lang.Object lockObj_tFileOutputExcel_2 = chm_tFileOutputExcel_2.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_2", k -> new Object());
		synchronized (lockObj_tFileOutputExcel_2) {
			
				xlsxTool_tFileOutputExcel_2.prepareXlsxFile(fileName_tFileOutputExcel_2);
			
		}
		
		xlsxTool_tFileOutputExcel_2.setFont("");
		
		if (xlsxTool_tFileOutputExcel_2.getStartRow() == 0){
		
		xlsxTool_tFileOutputExcel_2.addRow();
		
		xlsxTool_tFileOutputExcel_2.addCellValue("INAM");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("NNI");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("Prenom");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("Nom_de_Famille");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("Date_Naissance");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("Lieu_Naissance");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("Genre");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("Num_Carte");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("Date_Deliv");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("Num_Serie");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("QR_code");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("Photo");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("errorMessage");
		
		nb_line_tFileOutputExcel_2++; 
		
	}
		

 



/**
 * [tFileOutputExcel_2 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row35");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
out3Struct out3_tmp = new out3Struct();
out4Struct out4_tmp = new out4Struct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tLogRow_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_15", false);
		start_Hash.put("tLogRow_15", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_15";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row23");
					}
				
		int tos_count_tLogRow_15 = 0;
		

 



/**
 * [tLogRow_15 begin ] stop
 */



	
	/**
	 * [tFilterRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_1", false);
		start_Hash.put("tFilterRow_1", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row33");
					}
				
		int tos_count_tFilterRow_1 = 0;
		
    int nb_line_tFilterRow_1 = 0;
    int nb_line_ok_tFilterRow_1 = 0;
    int nb_line_reject_tFilterRow_1 = 0;

    class Operator_tFilterRow_1 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_1(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_1 begin ] stop
 */



	
	/**
	 * [tLogRow_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_13", false);
		start_Hash.put("tLogRow_13", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_13";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row32");
					}
				
		int tos_count_tLogRow_13 = 0;
		

 



/**
 * [tLogRow_13 begin ] stop
 */



	
	/**
	 * [tUnite_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tUnite_1", false);
		start_Hash.put("tUnite_1", System.currentTimeMillis());
		
	
	currentComponent="tUnite_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row30","row31");
					}
				
		int tos_count_tUnite_1 = 0;
		

int nb_line_tUnite_1 = 0;

 



/**
 * [tUnite_1 begin ] stop
 */
	
	/**
	 * [tHashInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_2", false);
		start_Hash.put("tHashInput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_2";

	
		int tos_count_tHashInput_2 = 0;
		


int nb_line_tHashInput_2 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row28Struct> tHashFile_tHashInput_2 = mf_tHashInput_2.getAdvancedMemoryHashFile("tHashFile_cnam_bulk_data_processing_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_2==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row28Struct> iterator_tHashInput_2 = tHashFile_tHashInput_2.iterator();
while (iterator_tHashInput_2.hasNext()) {
    row28Struct next_tHashInput_2 = iterator_tHashInput_2.next();

	row30.INAM = next_tHashInput_2.INAM;
	row30.NNI = next_tHashInput_2.NNI;
	row30.Prenom = next_tHashInput_2.Prenom;
	row30.Nom_de_Famille = next_tHashInput_2.Nom_de_Famille;
	row30.Date_Naissance = next_tHashInput_2.Date_Naissance;
	row30.Lieu_Naissance = next_tHashInput_2.Lieu_Naissance;
	row30.Genre = next_tHashInput_2.Genre;
	row30.Num_Carte = next_tHashInput_2.Num_Carte;
	row30.Date_Deliv = next_tHashInput_2.Date_Deliv;
	row30.Num_Serie = next_tHashInput_2.Num_Serie;
	row30.QR_code = next_tHashInput_2.QR_code;
	row30.Photo = next_tHashInput_2.Photo;
	row30.score = next_tHashInput_2.score;
	row30.numSerieVerified = next_tHashInput_2.numSerieVerified;
	row30.inamVerified = next_tHashInput_2.inamVerified;
	row30.nniVerified = next_tHashInput_2.nniVerified;
	row30.prenomVerified = next_tHashInput_2.prenomVerified;
	row30.nomdefamilleVerified = next_tHashInput_2.nomdefamilleVerified;
	row30.genreVerified = next_tHashInput_2.genreVerified;
	row30.numcarteVerified = next_tHashInput_2.numcarteVerified;
	row30.qrCodeVerified = next_tHashInput_2.qrCodeVerified;
	row30.photoVerified = next_tHashInput_2.photoVerified;
	row30.scoreVerified = next_tHashInput_2.scoreVerified;
	row30.uniqueVerified = next_tHashInput_2.uniqueVerified;
	row30.PhotoPath = next_tHashInput_2.PhotoPath;
 



/**
 * [tHashInput_2 begin ] stop
 */
	
	/**
	 * [tHashInput_2 main ] start
	 */

	

	
	
	currentComponent="tHashInput_2";

	

 


	tos_count_tHashInput_2++;

/**
 * [tHashInput_2 main ] stop
 */
	
	/**
	 * [tHashInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_2";

	

 



/**
 * [tHashInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_1 main ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1,"row30");
						}
						
//////////
 

// for output
			row32 = new row32Struct();
								
			row32.INAM = row30.INAM;								
			row32.NNI = row30.NNI;								
			row32.Prenom = row30.Prenom;								
			row32.Nom_de_Famille = row30.Nom_de_Famille;								
			row32.Date_Naissance = row30.Date_Naissance;								
			row32.Lieu_Naissance = row30.Lieu_Naissance;								
			row32.Genre = row30.Genre;								
			row32.Num_Carte = row30.Num_Carte;								
			row32.Date_Deliv = row30.Date_Deliv;								
			row32.Num_Serie = row30.Num_Serie;								
			row32.QR_code = row30.QR_code;								
			row32.Photo = row30.Photo;								
			row32.score = row30.score;								
			row32.numSerieVerified = row30.numSerieVerified;								
			row32.inamVerified = row30.inamVerified;								
			row32.nniVerified = row30.nniVerified;								
			row32.prenomVerified = row30.prenomVerified;								
			row32.nomdefamilleVerified = row30.nomdefamilleVerified;								
			row32.genreVerified = row30.genreVerified;								
			row32.numcarteVerified = row30.numcarteVerified;								
			row32.qrCodeVerified = row30.qrCodeVerified;								
			row32.photoVerified = row30.photoVerified;								
			row32.scoreVerified = row30.scoreVerified;								
			row32.uniqueVerified = row30.uniqueVerified;								
			row32.PhotoPath = row30.PhotoPath;			

			nb_line_tUnite_1++;

//////////
 


	tos_count_tUnite_1++;

/**
 * [tUnite_1 main ] stop
 */
	
	/**
	 * [tUnite_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_begin ] stop
 */

	
	/**
	 * [tLogRow_13 main ] start
	 */

	

	
	
	currentComponent="tLogRow_13";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row32");
					}
					

 
     row33 = row32;


	tos_count_tLogRow_13++;

/**
 * [tLogRow_13 main ] stop
 */
	
	/**
	 * [tLogRow_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_13";

	

 



/**
 * [tLogRow_13 process_data_begin ] stop
 */

	
	/**
	 * [tFilterRow_1 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row33");
					}
					

          row23 = null;
          row22 = null;
    Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1("&&");
            ope_tFilterRow_1.matches((row33.numSerieVerified == null? false : row33.numSerieVerified.compareTo(true) == 0)
                           , "numSerieVerified.compareTo(true) == 0 failed");
            ope_tFilterRow_1.matches((row33.inamVerified == null? false : row33.inamVerified.compareTo(true) == 0)
                           , "inamVerified.compareTo(true) == 0 failed");
            ope_tFilterRow_1.matches((row33.nniVerified == null? false : row33.nniVerified.compareTo(true) == 0)
                           , "nniVerified.compareTo(true) == 0 failed");
            ope_tFilterRow_1.matches((row33.prenomVerified == null? false : row33.prenomVerified.compareTo(true) == 0)
                           , "prenomVerified.compareTo(true) == 0 failed");
            ope_tFilterRow_1.matches((row33.nomdefamilleVerified == null? false : row33.nomdefamilleVerified.compareTo(true) == 0)
                           , "nomdefamilleVerified.compareTo(true) == 0 failed");
            ope_tFilterRow_1.matches((row33.genreVerified == null? false : row33.genreVerified.compareTo(true) == 0)
                           , "genreVerified.compareTo(true) == 0 failed");
            ope_tFilterRow_1.matches((row33.numcarteVerified == null? false : row33.numcarteVerified.compareTo(true) == 0)
                           , "numcarteVerified.compareTo(true) == 0 failed");
            ope_tFilterRow_1.matches((row33.qrCodeVerified == null? false : row33.qrCodeVerified.compareTo(true) == 0)
                           , "qrCodeVerified.compareTo(true) == 0 failed");
            ope_tFilterRow_1.matches((row33.photoVerified == null? false : row33.photoVerified.compareTo(true) == 0)
                           , "photoVerified.compareTo(true) == 0 failed");
            ope_tFilterRow_1.matches((row33.scoreVerified == null? false : row33.scoreVerified.compareTo(true) == 0)
                           , "scoreVerified.compareTo(true) == 0 failed");
            ope_tFilterRow_1.matches((row33.uniqueVerified == null? false : row33.uniqueVerified.compareTo(true) == 0)
                           , "uniqueVerified.compareTo(true) == 0 failed");
    
    if (ope_tFilterRow_1.getMatchFlag()) {
              if(row22 == null){ 
                row22 = new row22Struct();
              }
               row22.INAM = row33.INAM;
               row22.NNI = row33.NNI;
               row22.Prenom = row33.Prenom;
               row22.Nom_de_Famille = row33.Nom_de_Famille;
               row22.Date_Naissance = row33.Date_Naissance;
               row22.Lieu_Naissance = row33.Lieu_Naissance;
               row22.Genre = row33.Genre;
               row22.Num_Carte = row33.Num_Carte;
               row22.Date_Deliv = row33.Date_Deliv;
               row22.Num_Serie = row33.Num_Serie;
               row22.QR_code = row33.QR_code;
               row22.Photo = row33.Photo;
               row22.score = row33.score;
               row22.numSerieVerified = row33.numSerieVerified;
               row22.inamVerified = row33.inamVerified;
               row22.nniVerified = row33.nniVerified;
               row22.prenomVerified = row33.prenomVerified;
               row22.nomdefamilleVerified = row33.nomdefamilleVerified;
               row22.genreVerified = row33.genreVerified;
               row22.numcarteVerified = row33.numcarteVerified;
               row22.qrCodeVerified = row33.qrCodeVerified;
               row22.photoVerified = row33.photoVerified;
               row22.scoreVerified = row33.scoreVerified;
               row22.uniqueVerified = row33.uniqueVerified;
               row22.PhotoPath = row33.PhotoPath;    
      nb_line_ok_tFilterRow_1++;
    } else {
            if (row23 == null){
              row23 = new row23Struct();
            }
                row23.INAM = row33.INAM;
                row23.NNI = row33.NNI;
                row23.Prenom = row33.Prenom;
                row23.Nom_de_Famille = row33.Nom_de_Famille;
                row23.Date_Naissance = row33.Date_Naissance;
                row23.Lieu_Naissance = row33.Lieu_Naissance;
                row23.Genre = row33.Genre;
                row23.Num_Carte = row33.Num_Carte;
                row23.Date_Deliv = row33.Date_Deliv;
                row23.Num_Serie = row33.Num_Serie;
                row23.QR_code = row33.QR_code;
                row23.Photo = row33.Photo;
                row23.score = row33.score;
                row23.numSerieVerified = row33.numSerieVerified;
                row23.inamVerified = row33.inamVerified;
                row23.nniVerified = row33.nniVerified;
                row23.prenomVerified = row33.prenomVerified;
                row23.nomdefamilleVerified = row33.nomdefamilleVerified;
                row23.genreVerified = row33.genreVerified;
                row23.numcarteVerified = row33.numcarteVerified;
                row23.qrCodeVerified = row33.qrCodeVerified;
                row23.photoVerified = row33.photoVerified;
                row23.scoreVerified = row33.scoreVerified;
                row23.uniqueVerified = row33.uniqueVerified;
                row23.PhotoPath = row33.PhotoPath;
	            row23.errorMessage = ope_tFilterRow_1.getErrorMsg();
      nb_line_reject_tFilterRow_1++;
    }

nb_line_tFilterRow_1++;

 


	tos_count_tFilterRow_1++;

/**
 * [tFilterRow_1 main ] stop
 */
	
	/**
	 * [tFilterRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 process_data_begin ] stop
 */
// Start of branch "row22"
if(row22 != null) { 



	
	/**
	 * [tLogRow_14 main ] start
	 */

	

	
	
	currentComponent="tLogRow_14";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row22");
					}
					

 
     row34 = row22;


	tos_count_tLogRow_14++;

/**
 * [tLogRow_14 main ] stop
 */
	
	/**
	 * [tLogRow_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_14";

	

 



/**
 * [tLogRow_14 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row34");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

out1 = null;
out2 = null;


// # Output table : 'out1'
out1_tmp.INAM = row34.INAM ;
out1_tmp.NNI = row34.NNI ;
out1_tmp.Prenom = row34.Prenom ;
out1_tmp.Nom_de_Famille = row34.Nom_de_Famille ;
out1_tmp.Date_Naissance = row34.Date_Naissance ;
out1_tmp.Lieu_Naissance = row34.Lieu_Naissance ;
out1_tmp.Genre = row34.Genre ;
out1_tmp.Num_Carte = row34.Num_Carte ;
out1_tmp.Date_Deliv = row34.Date_Deliv ;
out1_tmp.Num_Serie = row34.Num_Serie ;
out1_tmp.QR_code = row34.QR_code ;
out1_tmp.Photo = row34.Photo ;
out1_tmp.PhotoPath = row34.PhotoPath ;
out1 = out1_tmp;

// # Output table : 'out2'
out2_tmp.INAM = row34.INAM ;
out2_tmp.NNI = row34.NNI ;
out2_tmp.Prenom = row34.Prenom ;
out2_tmp.Nom_de_Famille = row34.Nom_de_Famille ;
out2_tmp.Date_Naissance = row34.Date_Naissance ;
out2_tmp.Lieu_Naissance = row34.Lieu_Naissance ;
out2_tmp.Genre = row34.Genre ;
out2_tmp.Num_Carte = row34.Num_Carte ;
out2_tmp.Date_Deliv = row34.Date_Deliv ;
out2_tmp.Num_Serie = row34.Num_Serie ;
out2_tmp.QR_code = row34.QR_code ;
out2_tmp.Photo = row34.Photo ;
out2 = out2_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "out1"
if(out1 != null) { 



	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out1");
					}
					


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            if(out1.INAM != null) {
                        sb_tFileOutputDelimited_1.append(
                            out1.INAM
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out1.NNI != null) {
                        sb_tFileOutputDelimited_1.append(
                            out1.NNI
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out1.Prenom != null) {
                        sb_tFileOutputDelimited_1.append(
                            out1.Prenom
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out1.Nom_de_Famille != null) {
                        sb_tFileOutputDelimited_1.append(
                            out1.Nom_de_Famille
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out1.Date_Naissance != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(out1.Date_Naissance, "dd/MM/yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out1.Lieu_Naissance != null) {
                        sb_tFileOutputDelimited_1.append(
                            out1.Lieu_Naissance
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                        sb_tFileOutputDelimited_1.append(
                            out1.Genre
                        );
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out1.Num_Carte != null) {
                        sb_tFileOutputDelimited_1.append(
                            out1.Num_Carte
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out1.Date_Deliv != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(out1.Date_Deliv, "dd/MM/yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out1.Num_Serie != null) {
                        sb_tFileOutputDelimited_1.append(
                            out1.Num_Serie
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out1.QR_code != null) {
                        sb_tFileOutputDelimited_1.append(
                            out1.QR_code
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out1.Photo != null) {
                        sb_tFileOutputDelimited_1.append(
                            out1.Photo
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out1.PhotoPath != null) {
                        sb_tFileOutputDelimited_1.append(
                            out1.PhotoPath
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());




 


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */

} // End of branch "out1"




// Start of branch "out2"
if(out2 != null) { 



	
	/**
	 * [tFileOutputExcel_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out2");
					}
					

				xlsxTool_tFileOutputExcel_1.addRow();
									   				
	    				if(out2.INAM != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.INAM));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.NNI != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.NNI));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.Prenom != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.Prenom));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.Nom_de_Famille != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.Nom_de_Famille));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.Date_Naissance != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(out2.Date_Naissance, "dd/MM/yyyy");
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.Lieu_Naissance != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.Lieu_Naissance));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.Genre));
									   				
	    				if(out2.Num_Carte != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.Num_Carte));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.Date_Deliv != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(out2.Date_Deliv, "dd/MM/yyyy");
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.Num_Serie != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.Num_Serie));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.QR_code != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.QR_code));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.Photo != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.Photo));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_1++;
				
 


	tos_count_tFileOutputExcel_1++;

/**
 * [tFileOutputExcel_1 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

 



/**
 * [tFileOutputExcel_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

 



/**
 * [tFileOutputExcel_1 process_data_end ] stop
 */

} // End of branch "out2"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_14";

	

 



/**
 * [tLogRow_14 process_data_end ] stop
 */

} // End of branch "row22"




// Start of branch "row23"
if(row23 != null) { 



	
	/**
	 * [tLogRow_15 main ] start
	 */

	

	
	
	currentComponent="tLogRow_15";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row23");
					}
					

 
     row35 = row23;


	tos_count_tLogRow_15++;

/**
 * [tLogRow_15 main ] stop
 */
	
	/**
	 * [tLogRow_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_15";

	

 



/**
 * [tLogRow_15 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row35");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

out3 = null;
out4 = null;


// # Output table : 'out3'
out3_tmp.INAM = row35.INAM ;
out3_tmp.NNI = row35.NNI ;
out3_tmp.Prenom = row35.Prenom ;
out3_tmp.Nom_de_Famille = row35.Nom_de_Famille ;
out3_tmp.Date_Naissance = row35.Date_Naissance ;
out3_tmp.Lieu_Naissance = row35.Lieu_Naissance ;
out3_tmp.Genre = row35.Genre ;
out3_tmp.Num_Carte = row35.Num_Carte ;
out3_tmp.Date_Deliv = row35.Date_Deliv ;
out3_tmp.Num_Serie = row35.Num_Serie ;
out3_tmp.QR_code = row35.QR_code ;
out3_tmp.Photo = row35.Photo ;
out3_tmp.PhotoPath = row35.PhotoPath ;
out3_tmp.errorMessage = row35.errorMessage ;
out3 = out3_tmp;

// # Output table : 'out4'
out4_tmp.INAM = row35.INAM ;
out4_tmp.NNI = row35.NNI ;
out4_tmp.Prenom = row35.Prenom ;
out4_tmp.Nom_de_Famille = row35.Nom_de_Famille ;
out4_tmp.Date_Naissance = row35.Date_Naissance ;
out4_tmp.Lieu_Naissance = row35.Lieu_Naissance ;
out4_tmp.Genre = row35.Genre ;
out4_tmp.Num_Carte = row35.Num_Carte ;
out4_tmp.Date_Deliv = row35.Date_Deliv ;
out4_tmp.Num_Serie = row35.Num_Serie ;
out4_tmp.QR_code = row35.QR_code ;
out4_tmp.Photo = row35.Photo ;
out4_tmp.errorMessage = row35.errorMessage ;
out4 = out4_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "out3"
if(out3 != null) { 



	
	/**
	 * [tFileOutputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out3");
					}
					


                    StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
                            if(out3.INAM != null) {
                        sb_tFileOutputDelimited_2.append(
                            out3.INAM
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out3.NNI != null) {
                        sb_tFileOutputDelimited_2.append(
                            out3.NNI
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out3.Prenom != null) {
                        sb_tFileOutputDelimited_2.append(
                            out3.Prenom
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out3.Nom_de_Famille != null) {
                        sb_tFileOutputDelimited_2.append(
                            out3.Nom_de_Famille
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out3.Date_Naissance != null) {
                        sb_tFileOutputDelimited_2.append(
                            FormatterUtils.format_Date(out3.Date_Naissance, "dd/MM/yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out3.Lieu_Naissance != null) {
                        sb_tFileOutputDelimited_2.append(
                            out3.Lieu_Naissance
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                        sb_tFileOutputDelimited_2.append(
                            out3.Genre
                        );
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out3.Num_Carte != null) {
                        sb_tFileOutputDelimited_2.append(
                            out3.Num_Carte
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out3.Date_Deliv != null) {
                        sb_tFileOutputDelimited_2.append(
                            FormatterUtils.format_Date(out3.Date_Deliv, "dd/MM/yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out3.Num_Serie != null) {
                        sb_tFileOutputDelimited_2.append(
                            out3.Num_Serie
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out3.QR_code != null) {
                        sb_tFileOutputDelimited_2.append(
                            out3.QR_code
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out3.Photo != null) {
                        sb_tFileOutputDelimited_2.append(
                            out3.Photo
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out3.PhotoPath != null) {
                        sb_tFileOutputDelimited_2.append(
                            out3.PhotoPath
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out3.errorMessage != null) {
                        sb_tFileOutputDelimited_2.append(
                            out3.errorMessage
                        );
                            }
                    sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);


                    nb_line_tFileOutputDelimited_2++;
                    resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

                        outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());




 


	tos_count_tFileOutputDelimited_2++;

/**
 * [tFileOutputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	

 



/**
 * [tFileOutputDelimited_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	

 



/**
 * [tFileOutputDelimited_2 process_data_end ] stop
 */

} // End of branch "out3"




// Start of branch "out4"
if(out4 != null) { 



	
	/**
	 * [tFileOutputExcel_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out4");
					}
					

				xlsxTool_tFileOutputExcel_2.addRow();
									   				
	    				if(out4.INAM != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(out4.INAM));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(out4.NNI != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(out4.NNI));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(out4.Prenom != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(out4.Prenom));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(out4.Nom_de_Famille != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(out4.Nom_de_Famille));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(out4.Date_Naissance != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(out4.Date_Naissance, "dd/MM/yyyy");
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(out4.Lieu_Naissance != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(out4.Lieu_Naissance));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(out4.Genre));
									   				
	    				if(out4.Num_Carte != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(out4.Num_Carte));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(out4.Date_Deliv != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(out4.Date_Deliv, "dd/MM/yyyy");
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(out4.Num_Serie != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(out4.Num_Serie));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(out4.QR_code != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(out4.QR_code));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(out4.Photo != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(out4.Photo));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(out4.errorMessage != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(out4.errorMessage));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_2++;
				
 


	tos_count_tFileOutputExcel_2++;

/**
 * [tFileOutputExcel_2 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";

	

 



/**
 * [tFileOutputExcel_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";

	

 



/**
 * [tFileOutputExcel_2 process_data_end ] stop
 */

} // End of branch "out4"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_15";

	

 



/**
 * [tLogRow_15 process_data_end ] stop
 */

} // End of branch "row23"




	
	/**
	 * [tFilterRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_13";

	

 



/**
 * [tLogRow_13 process_data_end ] stop
 */



	
	/**
	 * [tUnite_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";

	

 



/**
 * [tHashInput_2 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_2 end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";

	
    

		
			nb_line_tHashInput_2++;
		}	
    		
    		mf_tHashInput_2.clearCache("tHashFile_cnam_bulk_data_processing_" + pid +"_tHashOutput_1");
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_cnam_bulk_data_processing_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_2_NB_LINE", nb_line_tHashInput_2);       

 

ok_Hash.put("tHashInput_2", true);
end_Hash.put("tHashInput_2", System.currentTimeMillis());




/**
 * [tHashInput_2 end ] stop
 */
	
	/**
	 * [tHashInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_3", false);
		start_Hash.put("tHashInput_3", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_3";

	
		int tos_count_tHashInput_3 = 0;
		


int nb_line_tHashInput_3 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_3=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row29Struct> tHashFile_tHashInput_3 = mf_tHashInput_3.getAdvancedMemoryHashFile("tHashFile_cnam_bulk_data_processing_" + pid +"_tHashOutput_2");
if(tHashFile_tHashInput_3==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row29Struct> iterator_tHashInput_3 = tHashFile_tHashInput_3.iterator();
while (iterator_tHashInput_3.hasNext()) {
    row29Struct next_tHashInput_3 = iterator_tHashInput_3.next();

	row31.INAM = next_tHashInput_3.INAM;
	row31.NNI = next_tHashInput_3.NNI;
	row31.Prenom = next_tHashInput_3.Prenom;
	row31.Nom_de_Famille = next_tHashInput_3.Nom_de_Famille;
	row31.Date_Naissance = next_tHashInput_3.Date_Naissance;
	row31.Lieu_Naissance = next_tHashInput_3.Lieu_Naissance;
	row31.Genre = next_tHashInput_3.Genre;
	row31.Num_Carte = next_tHashInput_3.Num_Carte;
	row31.Date_Deliv = next_tHashInput_3.Date_Deliv;
	row31.Num_Serie = next_tHashInput_3.Num_Serie;
	row31.QR_code = next_tHashInput_3.QR_code;
	row31.Photo = next_tHashInput_3.Photo;
	row31.score = next_tHashInput_3.score;
	row31.numSerieVerified = next_tHashInput_3.numSerieVerified;
	row31.inamVerified = next_tHashInput_3.inamVerified;
	row31.nniVerified = next_tHashInput_3.nniVerified;
	row31.prenomVerified = next_tHashInput_3.prenomVerified;
	row31.nomdefamilleVerified = next_tHashInput_3.nomdefamilleVerified;
	row31.genreVerified = next_tHashInput_3.genreVerified;
	row31.numcarteVerified = next_tHashInput_3.numcarteVerified;
	row31.qrCodeVerified = next_tHashInput_3.qrCodeVerified;
	row31.photoVerified = next_tHashInput_3.photoVerified;
	row31.scoreVerified = next_tHashInput_3.scoreVerified;
	row31.uniqueVerified = next_tHashInput_3.uniqueVerified;
	row31.PhotoPath = next_tHashInput_3.PhotoPath;
 



/**
 * [tHashInput_3 begin ] stop
 */
	
	/**
	 * [tHashInput_3 main ] start
	 */

	

	
	
	currentComponent="tHashInput_3";

	

 


	tos_count_tHashInput_3++;

/**
 * [tHashInput_3 main ] stop
 */
	
	/**
	 * [tHashInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_3";

	

 



/**
 * [tHashInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_1 main ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1,"row31");
						}
						
//////////
 

// for output
			row32 = new row32Struct();
								
			row32.INAM = row31.INAM;								
			row32.NNI = row31.NNI;								
			row32.Prenom = row31.Prenom;								
			row32.Nom_de_Famille = row31.Nom_de_Famille;								
			row32.Date_Naissance = row31.Date_Naissance;								
			row32.Lieu_Naissance = row31.Lieu_Naissance;								
			row32.Genre = row31.Genre;								
			row32.Num_Carte = row31.Num_Carte;								
			row32.Date_Deliv = row31.Date_Deliv;								
			row32.Num_Serie = row31.Num_Serie;								
			row32.QR_code = row31.QR_code;								
			row32.Photo = row31.Photo;								
			row32.score = row31.score;								
			row32.numSerieVerified = row31.numSerieVerified;								
			row32.inamVerified = row31.inamVerified;								
			row32.nniVerified = row31.nniVerified;								
			row32.prenomVerified = row31.prenomVerified;								
			row32.nomdefamilleVerified = row31.nomdefamilleVerified;								
			row32.genreVerified = row31.genreVerified;								
			row32.numcarteVerified = row31.numcarteVerified;								
			row32.qrCodeVerified = row31.qrCodeVerified;								
			row32.photoVerified = row31.photoVerified;								
			row32.scoreVerified = row31.scoreVerified;								
			row32.uniqueVerified = row31.uniqueVerified;								
			row32.PhotoPath = row31.PhotoPath;			

			nb_line_tUnite_1++;

//////////
 


	tos_count_tUnite_1++;

/**
 * [tUnite_1 main ] stop
 */
	
	/**
	 * [tUnite_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_begin ] stop
 */

	
	/**
	 * [tLogRow_13 main ] start
	 */

	

	
	
	currentComponent="tLogRow_13";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row32");
					}
					

 
     row33 = row32;


	tos_count_tLogRow_13++;

/**
 * [tLogRow_13 main ] stop
 */
	
	/**
	 * [tLogRow_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_13";

	

 



/**
 * [tLogRow_13 process_data_begin ] stop
 */

	
	/**
	 * [tFilterRow_1 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row33");
					}
					

          row23 = null;
          row22 = null;
    Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1("&&");
            ope_tFilterRow_1.matches((row33.numSerieVerified == null? false : row33.numSerieVerified.compareTo(true) == 0)
                           , "numSerieVerified.compareTo(true) == 0 failed");
            ope_tFilterRow_1.matches((row33.inamVerified == null? false : row33.inamVerified.compareTo(true) == 0)
                           , "inamVerified.compareTo(true) == 0 failed");
            ope_tFilterRow_1.matches((row33.nniVerified == null? false : row33.nniVerified.compareTo(true) == 0)
                           , "nniVerified.compareTo(true) == 0 failed");
            ope_tFilterRow_1.matches((row33.prenomVerified == null? false : row33.prenomVerified.compareTo(true) == 0)
                           , "prenomVerified.compareTo(true) == 0 failed");
            ope_tFilterRow_1.matches((row33.nomdefamilleVerified == null? false : row33.nomdefamilleVerified.compareTo(true) == 0)
                           , "nomdefamilleVerified.compareTo(true) == 0 failed");
            ope_tFilterRow_1.matches((row33.genreVerified == null? false : row33.genreVerified.compareTo(true) == 0)
                           , "genreVerified.compareTo(true) == 0 failed");
            ope_tFilterRow_1.matches((row33.numcarteVerified == null? false : row33.numcarteVerified.compareTo(true) == 0)
                           , "numcarteVerified.compareTo(true) == 0 failed");
            ope_tFilterRow_1.matches((row33.qrCodeVerified == null? false : row33.qrCodeVerified.compareTo(true) == 0)
                           , "qrCodeVerified.compareTo(true) == 0 failed");
            ope_tFilterRow_1.matches((row33.photoVerified == null? false : row33.photoVerified.compareTo(true) == 0)
                           , "photoVerified.compareTo(true) == 0 failed");
            ope_tFilterRow_1.matches((row33.scoreVerified == null? false : row33.scoreVerified.compareTo(true) == 0)
                           , "scoreVerified.compareTo(true) == 0 failed");
            ope_tFilterRow_1.matches((row33.uniqueVerified == null? false : row33.uniqueVerified.compareTo(true) == 0)
                           , "uniqueVerified.compareTo(true) == 0 failed");
    
    if (ope_tFilterRow_1.getMatchFlag()) {
              if(row22 == null){ 
                row22 = new row22Struct();
              }
               row22.INAM = row33.INAM;
               row22.NNI = row33.NNI;
               row22.Prenom = row33.Prenom;
               row22.Nom_de_Famille = row33.Nom_de_Famille;
               row22.Date_Naissance = row33.Date_Naissance;
               row22.Lieu_Naissance = row33.Lieu_Naissance;
               row22.Genre = row33.Genre;
               row22.Num_Carte = row33.Num_Carte;
               row22.Date_Deliv = row33.Date_Deliv;
               row22.Num_Serie = row33.Num_Serie;
               row22.QR_code = row33.QR_code;
               row22.Photo = row33.Photo;
               row22.score = row33.score;
               row22.numSerieVerified = row33.numSerieVerified;
               row22.inamVerified = row33.inamVerified;
               row22.nniVerified = row33.nniVerified;
               row22.prenomVerified = row33.prenomVerified;
               row22.nomdefamilleVerified = row33.nomdefamilleVerified;
               row22.genreVerified = row33.genreVerified;
               row22.numcarteVerified = row33.numcarteVerified;
               row22.qrCodeVerified = row33.qrCodeVerified;
               row22.photoVerified = row33.photoVerified;
               row22.scoreVerified = row33.scoreVerified;
               row22.uniqueVerified = row33.uniqueVerified;
               row22.PhotoPath = row33.PhotoPath;    
      nb_line_ok_tFilterRow_1++;
    } else {
            if (row23 == null){
              row23 = new row23Struct();
            }
                row23.INAM = row33.INAM;
                row23.NNI = row33.NNI;
                row23.Prenom = row33.Prenom;
                row23.Nom_de_Famille = row33.Nom_de_Famille;
                row23.Date_Naissance = row33.Date_Naissance;
                row23.Lieu_Naissance = row33.Lieu_Naissance;
                row23.Genre = row33.Genre;
                row23.Num_Carte = row33.Num_Carte;
                row23.Date_Deliv = row33.Date_Deliv;
                row23.Num_Serie = row33.Num_Serie;
                row23.QR_code = row33.QR_code;
                row23.Photo = row33.Photo;
                row23.score = row33.score;
                row23.numSerieVerified = row33.numSerieVerified;
                row23.inamVerified = row33.inamVerified;
                row23.nniVerified = row33.nniVerified;
                row23.prenomVerified = row33.prenomVerified;
                row23.nomdefamilleVerified = row33.nomdefamilleVerified;
                row23.genreVerified = row33.genreVerified;
                row23.numcarteVerified = row33.numcarteVerified;
                row23.qrCodeVerified = row33.qrCodeVerified;
                row23.photoVerified = row33.photoVerified;
                row23.scoreVerified = row33.scoreVerified;
                row23.uniqueVerified = row33.uniqueVerified;
                row23.PhotoPath = row33.PhotoPath;
	            row23.errorMessage = ope_tFilterRow_1.getErrorMsg();
      nb_line_reject_tFilterRow_1++;
    }

nb_line_tFilterRow_1++;

 


	tos_count_tFilterRow_1++;

/**
 * [tFilterRow_1 main ] stop
 */
	
	/**
	 * [tFilterRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 process_data_begin ] stop
 */
// Start of branch "row22"
if(row22 != null) { 



	
	/**
	 * [tLogRow_14 main ] start
	 */

	

	
	
	currentComponent="tLogRow_14";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row22");
					}
					

 
     row34 = row22;


	tos_count_tLogRow_14++;

/**
 * [tLogRow_14 main ] stop
 */
	
	/**
	 * [tLogRow_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_14";

	

 



/**
 * [tLogRow_14 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row34");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

out1 = null;
out2 = null;


// # Output table : 'out1'
out1_tmp.INAM = row34.INAM ;
out1_tmp.NNI = row34.NNI ;
out1_tmp.Prenom = row34.Prenom ;
out1_tmp.Nom_de_Famille = row34.Nom_de_Famille ;
out1_tmp.Date_Naissance = row34.Date_Naissance ;
out1_tmp.Lieu_Naissance = row34.Lieu_Naissance ;
out1_tmp.Genre = row34.Genre ;
out1_tmp.Num_Carte = row34.Num_Carte ;
out1_tmp.Date_Deliv = row34.Date_Deliv ;
out1_tmp.Num_Serie = row34.Num_Serie ;
out1_tmp.QR_code = row34.QR_code ;
out1_tmp.Photo = row34.Photo ;
out1_tmp.PhotoPath = row34.PhotoPath ;
out1 = out1_tmp;

// # Output table : 'out2'
out2_tmp.INAM = row34.INAM ;
out2_tmp.NNI = row34.NNI ;
out2_tmp.Prenom = row34.Prenom ;
out2_tmp.Nom_de_Famille = row34.Nom_de_Famille ;
out2_tmp.Date_Naissance = row34.Date_Naissance ;
out2_tmp.Lieu_Naissance = row34.Lieu_Naissance ;
out2_tmp.Genre = row34.Genre ;
out2_tmp.Num_Carte = row34.Num_Carte ;
out2_tmp.Date_Deliv = row34.Date_Deliv ;
out2_tmp.Num_Serie = row34.Num_Serie ;
out2_tmp.QR_code = row34.QR_code ;
out2_tmp.Photo = row34.Photo ;
out2 = out2_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "out1"
if(out1 != null) { 



	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out1");
					}
					


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            if(out1.INAM != null) {
                        sb_tFileOutputDelimited_1.append(
                            out1.INAM
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out1.NNI != null) {
                        sb_tFileOutputDelimited_1.append(
                            out1.NNI
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out1.Prenom != null) {
                        sb_tFileOutputDelimited_1.append(
                            out1.Prenom
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out1.Nom_de_Famille != null) {
                        sb_tFileOutputDelimited_1.append(
                            out1.Nom_de_Famille
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out1.Date_Naissance != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(out1.Date_Naissance, "dd/MM/yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out1.Lieu_Naissance != null) {
                        sb_tFileOutputDelimited_1.append(
                            out1.Lieu_Naissance
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                        sb_tFileOutputDelimited_1.append(
                            out1.Genre
                        );
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out1.Num_Carte != null) {
                        sb_tFileOutputDelimited_1.append(
                            out1.Num_Carte
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out1.Date_Deliv != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(out1.Date_Deliv, "dd/MM/yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out1.Num_Serie != null) {
                        sb_tFileOutputDelimited_1.append(
                            out1.Num_Serie
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out1.QR_code != null) {
                        sb_tFileOutputDelimited_1.append(
                            out1.QR_code
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out1.Photo != null) {
                        sb_tFileOutputDelimited_1.append(
                            out1.Photo
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out1.PhotoPath != null) {
                        sb_tFileOutputDelimited_1.append(
                            out1.PhotoPath
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());




 


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */

} // End of branch "out1"




// Start of branch "out2"
if(out2 != null) { 



	
	/**
	 * [tFileOutputExcel_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out2");
					}
					

				xlsxTool_tFileOutputExcel_1.addRow();
									   				
	    				if(out2.INAM != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.INAM));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.NNI != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.NNI));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.Prenom != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.Prenom));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.Nom_de_Famille != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.Nom_de_Famille));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.Date_Naissance != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(out2.Date_Naissance, "dd/MM/yyyy");
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.Lieu_Naissance != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.Lieu_Naissance));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.Genre));
									   				
	    				if(out2.Num_Carte != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.Num_Carte));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.Date_Deliv != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(out2.Date_Deliv, "dd/MM/yyyy");
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.Num_Serie != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.Num_Serie));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.QR_code != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.QR_code));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.Photo != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.Photo));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_1++;
				
 


	tos_count_tFileOutputExcel_1++;

/**
 * [tFileOutputExcel_1 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

 



/**
 * [tFileOutputExcel_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

 



/**
 * [tFileOutputExcel_1 process_data_end ] stop
 */

} // End of branch "out2"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_14";

	

 



/**
 * [tLogRow_14 process_data_end ] stop
 */

} // End of branch "row22"




// Start of branch "row23"
if(row23 != null) { 



	
	/**
	 * [tLogRow_15 main ] start
	 */

	

	
	
	currentComponent="tLogRow_15";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row23");
					}
					

 
     row35 = row23;


	tos_count_tLogRow_15++;

/**
 * [tLogRow_15 main ] stop
 */
	
	/**
	 * [tLogRow_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_15";

	

 



/**
 * [tLogRow_15 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row35");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

out3 = null;
out4 = null;


// # Output table : 'out3'
out3_tmp.INAM = row35.INAM ;
out3_tmp.NNI = row35.NNI ;
out3_tmp.Prenom = row35.Prenom ;
out3_tmp.Nom_de_Famille = row35.Nom_de_Famille ;
out3_tmp.Date_Naissance = row35.Date_Naissance ;
out3_tmp.Lieu_Naissance = row35.Lieu_Naissance ;
out3_tmp.Genre = row35.Genre ;
out3_tmp.Num_Carte = row35.Num_Carte ;
out3_tmp.Date_Deliv = row35.Date_Deliv ;
out3_tmp.Num_Serie = row35.Num_Serie ;
out3_tmp.QR_code = row35.QR_code ;
out3_tmp.Photo = row35.Photo ;
out3_tmp.PhotoPath = row35.PhotoPath ;
out3_tmp.errorMessage = row35.errorMessage ;
out3 = out3_tmp;

// # Output table : 'out4'
out4_tmp.INAM = row35.INAM ;
out4_tmp.NNI = row35.NNI ;
out4_tmp.Prenom = row35.Prenom ;
out4_tmp.Nom_de_Famille = row35.Nom_de_Famille ;
out4_tmp.Date_Naissance = row35.Date_Naissance ;
out4_tmp.Lieu_Naissance = row35.Lieu_Naissance ;
out4_tmp.Genre = row35.Genre ;
out4_tmp.Num_Carte = row35.Num_Carte ;
out4_tmp.Date_Deliv = row35.Date_Deliv ;
out4_tmp.Num_Serie = row35.Num_Serie ;
out4_tmp.QR_code = row35.QR_code ;
out4_tmp.Photo = row35.Photo ;
out4_tmp.errorMessage = row35.errorMessage ;
out4 = out4_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "out3"
if(out3 != null) { 



	
	/**
	 * [tFileOutputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out3");
					}
					


                    StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
                            if(out3.INAM != null) {
                        sb_tFileOutputDelimited_2.append(
                            out3.INAM
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out3.NNI != null) {
                        sb_tFileOutputDelimited_2.append(
                            out3.NNI
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out3.Prenom != null) {
                        sb_tFileOutputDelimited_2.append(
                            out3.Prenom
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out3.Nom_de_Famille != null) {
                        sb_tFileOutputDelimited_2.append(
                            out3.Nom_de_Famille
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out3.Date_Naissance != null) {
                        sb_tFileOutputDelimited_2.append(
                            FormatterUtils.format_Date(out3.Date_Naissance, "dd/MM/yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out3.Lieu_Naissance != null) {
                        sb_tFileOutputDelimited_2.append(
                            out3.Lieu_Naissance
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                        sb_tFileOutputDelimited_2.append(
                            out3.Genre
                        );
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out3.Num_Carte != null) {
                        sb_tFileOutputDelimited_2.append(
                            out3.Num_Carte
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out3.Date_Deliv != null) {
                        sb_tFileOutputDelimited_2.append(
                            FormatterUtils.format_Date(out3.Date_Deliv, "dd/MM/yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out3.Num_Serie != null) {
                        sb_tFileOutputDelimited_2.append(
                            out3.Num_Serie
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out3.QR_code != null) {
                        sb_tFileOutputDelimited_2.append(
                            out3.QR_code
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out3.Photo != null) {
                        sb_tFileOutputDelimited_2.append(
                            out3.Photo
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out3.PhotoPath != null) {
                        sb_tFileOutputDelimited_2.append(
                            out3.PhotoPath
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out3.errorMessage != null) {
                        sb_tFileOutputDelimited_2.append(
                            out3.errorMessage
                        );
                            }
                    sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);


                    nb_line_tFileOutputDelimited_2++;
                    resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

                        outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());




 


	tos_count_tFileOutputDelimited_2++;

/**
 * [tFileOutputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	

 



/**
 * [tFileOutputDelimited_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	

 



/**
 * [tFileOutputDelimited_2 process_data_end ] stop
 */

} // End of branch "out3"




// Start of branch "out4"
if(out4 != null) { 



	
	/**
	 * [tFileOutputExcel_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out4");
					}
					

				xlsxTool_tFileOutputExcel_2.addRow();
									   				
	    				if(out4.INAM != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(out4.INAM));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(out4.NNI != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(out4.NNI));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(out4.Prenom != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(out4.Prenom));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(out4.Nom_de_Famille != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(out4.Nom_de_Famille));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(out4.Date_Naissance != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(out4.Date_Naissance, "dd/MM/yyyy");
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(out4.Lieu_Naissance != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(out4.Lieu_Naissance));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(out4.Genre));
									   				
	    				if(out4.Num_Carte != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(out4.Num_Carte));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(out4.Date_Deliv != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(out4.Date_Deliv, "dd/MM/yyyy");
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(out4.Num_Serie != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(out4.Num_Serie));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(out4.QR_code != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(out4.QR_code));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(out4.Photo != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(out4.Photo));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(out4.errorMessage != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(out4.errorMessage));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_2++;
				
 


	tos_count_tFileOutputExcel_2++;

/**
 * [tFileOutputExcel_2 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";

	

 



/**
 * [tFileOutputExcel_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";

	

 



/**
 * [tFileOutputExcel_2 process_data_end ] stop
 */

} // End of branch "out4"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_15";

	

 



/**
 * [tLogRow_15 process_data_end ] stop
 */

} // End of branch "row23"




	
	/**
	 * [tFilterRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_13";

	

 



/**
 * [tLogRow_13 process_data_end ] stop
 */



	
	/**
	 * [tUnite_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_3";

	

 



/**
 * [tHashInput_3 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_3 end ] start
	 */

	

	
	
	currentComponent="tHashInput_3";

	
    

		
			nb_line_tHashInput_3++;
		}	
    		
    		mf_tHashInput_3.clearCache("tHashFile_cnam_bulk_data_processing_" + pid +"_tHashOutput_2");
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_cnam_bulk_data_processing_" + pid +"_tHashOutput_2");
	


	globalMap.put("tHashInput_3_NB_LINE", nb_line_tHashInput_3);       

 

ok_Hash.put("tHashInput_3", true);
end_Hash.put("tHashInput_3", System.currentTimeMillis());




/**
 * [tHashInput_3 end ] stop
 */
	
	/**
	 * [tUnite_1 end ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

globalMap.put("tUnite_1_NB_LINE", nb_line_tUnite_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row30","row31");
			  	}
			  	
 

ok_Hash.put("tUnite_1", true);
end_Hash.put("tUnite_1", System.currentTimeMillis());




/**
 * [tUnite_1 end ] stop
 */

	
	/**
	 * [tLogRow_13 end ] start
	 */

	

	
	
	currentComponent="tLogRow_13";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row32");
			  	}
			  	
 

ok_Hash.put("tLogRow_13", true);
end_Hash.put("tLogRow_13", System.currentTimeMillis());




/**
 * [tLogRow_13 end ] stop
 */

	
	/**
	 * [tFilterRow_1 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	
    globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
    globalMap.put("tFilterRow_1_NB_LINE_OK", nb_line_ok_tFilterRow_1);
    globalMap.put("tFilterRow_1_NB_LINE_REJECT", nb_line_reject_tFilterRow_1);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row33");
			  	}
			  	
 

ok_Hash.put("tFilterRow_1", true);
end_Hash.put("tFilterRow_1", System.currentTimeMillis());




/**
 * [tFilterRow_1 end ] stop
 */

	
	/**
	 * [tLogRow_14 end ] start
	 */

	

	
	
	currentComponent="tLogRow_14";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row22");
			  	}
			  	
 

ok_Hash.put("tLogRow_14", true);
end_Hash.put("tLogRow_14", System.currentTimeMillis());




/**
 * [tLogRow_14 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row34");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	



		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
		
			if(isFileGenerated_tFileOutputDelimited_1 && nb_line_tFileOutputDelimited_1 == 0){
				
					filetFileOutputDelimited_1.delete();
				
			}		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out1");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_1 end ] stop
 */




	
	/**
	 * [tFileOutputExcel_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

	
	
	
			xlsxTool_tFileOutputExcel_1.writeExcel(fileName_tFileOutputExcel_1,true);
	
		
			nb_line_tFileOutputExcel_1 = nb_line_tFileOutputExcel_1 -1;
		
		globalMap.put("tFileOutputExcel_1_NB_LINE",nb_line_tFileOutputExcel_1);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out2");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_1", true);
end_Hash.put("tFileOutputExcel_1", System.currentTimeMillis());




/**
 * [tFileOutputExcel_1 end ] stop
 */










	
	/**
	 * [tLogRow_15 end ] start
	 */

	

	
	
	currentComponent="tLogRow_15";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row23");
			  	}
			  	
 

ok_Hash.put("tLogRow_15", true);
end_Hash.put("tLogRow_15", System.currentTimeMillis());




/**
 * [tLogRow_15 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row35");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	



		
			
					if(outtFileOutputDelimited_2!=null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}
				
				globalMap.put("tFileOutputDelimited_2_NB_LINE",nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
			
		
		
			if(isFileGenerated_tFileOutputDelimited_2 && nb_line_tFileOutputDelimited_2 == 0){
				
					filetFileOutputDelimited_2.delete();
				
			}		
		
		resourceMap.put("finish_tFileOutputDelimited_2", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out3");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_2", true);
end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_2 end ] stop
 */




	
	/**
	 * [tFileOutputExcel_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";

	

	
	
	
			xlsxTool_tFileOutputExcel_2.writeExcel(fileName_tFileOutputExcel_2,true);
	
		
			nb_line_tFileOutputExcel_2 = nb_line_tFileOutputExcel_2 -1;
		
		globalMap.put("tFileOutputExcel_2_NB_LINE",nb_line_tFileOutputExcel_2);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out4");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_2", true);
end_Hash.put("tFileOutputExcel_2", System.currentTimeMillis());




/**
 * [tFileOutputExcel_2 end ] stop
 */















				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_2";

	

 



/**
 * [tHashInput_2 finally ] stop
 */
	
	/**
	 * [tHashInput_3 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_3";

	

 



/**
 * [tHashInput_3 finally ] stop
 */
	
	/**
	 * [tUnite_1 finally ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 finally ] stop
 */

	
	/**
	 * [tLogRow_13 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_13";

	

 



/**
 * [tLogRow_13 finally ] stop
 */

	
	/**
	 * [tFilterRow_1 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 finally ] stop
 */

	
	/**
	 * [tLogRow_14 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_14";

	

 



/**
 * [tLogRow_14 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
			
				if(Boolean.valueOf(String.valueOf(resourceMap.get("isFileGenerated_tFileOutputDelimited_1"))) && Integer.valueOf(String.valueOf(resourceMap.get("nb_line_tFileOutputDelimited_1"))) == 0){
					
						((java.io.File)resourceMap.get("filetFileOutputDelimited_1")).delete();
					
				}		
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */




	
	/**
	 * [tFileOutputExcel_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

 



/**
 * [tFileOutputExcel_1 finally ] stop
 */










	
	/**
	 * [tLogRow_15 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_15";

	

 



/**
 * [tLogRow_15 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	


		if(resourceMap.get("finish_tFileOutputDelimited_2") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_2");
						if(outtFileOutputDelimited_2!=null) {
							outtFileOutputDelimited_2.flush();
							outtFileOutputDelimited_2.close();
						}
					
				
			
				if(Boolean.valueOf(String.valueOf(resourceMap.get("isFileGenerated_tFileOutputDelimited_2"))) && Integer.valueOf(String.valueOf(resourceMap.get("nb_line_tFileOutputDelimited_2"))) == 0){
					
						((java.io.File)resourceMap.get("filetFileOutputDelimited_2")).delete();
					
				}		
			
		}
	

 



/**
 * [tFileOutputDelimited_2 finally ] stop
 */




	
	/**
	 * [tFileOutputExcel_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";

	

 



/**
 * [tFileOutputExcel_2 finally ] stop
 */















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_2_SUBPROCESS_STATE", 1);
	}
	

public void tDie_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_2", false);
		start_Hash.put("tDie_2", System.currentTimeMillis());
		
	
	currentComponent="tDie_2";

	
		int tos_count_tDie_2 = 0;
		

 



/**
 * [tDie_2 begin ] stop
 */
	
	/**
	 * [tDie_2 main ] start
	 */

	

	
	
	currentComponent="tDie_2";

	

	try {
				tLogCatcher_1.addMessage("tDie", "tDie_2", 5, "Something went wrong in step 2", 4);
				tLogCatcher_1Process(globalMap);
				
	globalMap.put("tDie_2_DIE_PRIORITY", 5);
	System.err.println("Something went wrong in step 2");
	
	globalMap.put("tDie_2_DIE_MESSAGE", "Something went wrong in step 2");
	globalMap.put("tDie_2_DIE_MESSAGES", "Something went wrong in step 2");
	
	} catch (Exception | Error e_tDie_2) {
		logIgnoredError(String.format("tDie_2 - tDie failed to log message due to internal error: %s", e_tDie_2), e_tDie_2);
	}
	
	currentComponent = "tDie_2";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_2_DIE_CODE", errorCode);        
    
	if(true){	
	    throw new TDieException();
	}

 


	tos_count_tDie_2++;

/**
 * [tDie_2 main ] stop
 */
	
	/**
	 * [tDie_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_2";

	

 



/**
 * [tDie_2 process_data_begin ] stop
 */
	
	/**
	 * [tDie_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_2";

	

 



/**
 * [tDie_2 process_data_end ] stop
 */
	
	/**
	 * [tDie_2 end ] start
	 */

	

	
	
	currentComponent="tDie_2";

	

 

ok_Hash.put("tDie_2", true);
end_Hash.put("tDie_2", System.currentTimeMillis());




/**
 * [tDie_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_2 finally ] start
	 */

	

	
	
	currentComponent="tDie_2";

	

 



/**
 * [tDie_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_2_SUBPROCESS_STATE", 1);
	}
	

public void tDie_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_1", false);
		start_Hash.put("tDie_1", System.currentTimeMillis());
		
	
	currentComponent="tDie_1";

	
		int tos_count_tDie_1 = 0;
		

 



/**
 * [tDie_1 begin ] stop
 */
	
	/**
	 * [tDie_1 main ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

	try {
				tLogCatcher_1.addMessage("tDie", "tDie_1", 5, "Something went wrong in step 1", 4);
				tLogCatcher_1Process(globalMap);
				
	globalMap.put("tDie_1_DIE_PRIORITY", 5);
	System.err.println("Something went wrong in step 1");
	
	globalMap.put("tDie_1_DIE_MESSAGE", "Something went wrong in step 1");
	globalMap.put("tDie_1_DIE_MESSAGES", "Something went wrong in step 1");
	
	} catch (Exception | Error e_tDie_1) {
		logIgnoredError(String.format("tDie_1 - tDie failed to log message due to internal error: %s", e_tDie_1), e_tDie_1);
	}
	
	currentComponent = "tDie_1";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_1_DIE_CODE", errorCode);        
    
	if(true){	
	    throw new TDieException();
	}

 


	tos_count_tDie_1++;

/**
 * [tDie_1 main ] stop
 */
	
	/**
	 * [tDie_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

 



/**
 * [tDie_1 process_data_begin ] stop
 */
	
	/**
	 * [tDie_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

 



/**
 * [tDie_1 process_data_end ] stop
 */
	
	/**
	 * [tDie_1 end ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

 

ok_Hash.put("tDie_1", true);
end_Hash.put("tDie_1", System.currentTimeMillis());




/**
 * [tDie_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_1 finally ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

 



/**
 * [tDie_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_1_SUBPROCESS_STATE", 1);
	}
	

public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";

	
		int tos_count_tJava_1 = 0;
		


globalMap.put("noLotissement", 1);
globalMap.put("noCarte", 0);
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());




/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tFileInputDelimited_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	


public static class row36Struct implements routines.system.IPersistableRow<row36Struct> {
    final static byte[] commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];
    static byte[] commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length) {
				if(length < 1024 && commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing.length == 0) {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[1024];
				} else {
   					commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length);
			strReturn = new String(commonByteArray_CNAM_PROJECT_cnam_bulk_data_processing, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CNAM_PROJECT_cnam_bulk_data_processing) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row36Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tLogCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row36Struct row36 = new row36Struct();




	
	/**
	 * [tLogRow_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_16", false);
		start_Hash.put("tLogRow_16", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_16";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row36");
					}
				
		int tos_count_tLogRow_16 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_16 = "|";
		java.io.PrintStream consoleOut_tLogRow_16 = null;	

 		StringBuilder strBuffer_tLogRow_16 = null;
		int nb_line_tLogRow_16 = 0;
///////////////////////    			



 



/**
 * [tLogRow_16 begin ] stop
 */



	
	/**
	 * [tLogCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogCatcher_1", false);
		start_Hash.put("tLogCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tLogCatcher_1";

	
		int tos_count_tLogCatcher_1 = 0;
		

try {
	for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1.getMessages()) {
		row36.type = lcm.getType();
		row36.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		row36.priority = lcm.getPriority();
		row36.message = lcm.getMessage();
		row36.code = lcm.getCode();
		
		row36.moment = java.util.Calendar.getInstance().getTime();
	
    	row36.pid = pid;
		row36.root_pid = rootPid;
		row36.father_pid = fatherPid;
	
    	row36.project = projectName;
    	row36.job = jobName;
    	row36.context = contextStr;
    		
 



/**
 * [tLogCatcher_1 begin ] stop
 */
	
	/**
	 * [tLogCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 


	tos_count_tLogCatcher_1++;

/**
 * [tLogCatcher_1 main ] stop
 */
	
	/**
	 * [tLogCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tLogRow_16 main ] start
	 */

	

	
	
	currentComponent="tLogRow_16";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row36");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_16 = new StringBuilder();




   				
	    		if(row36.moment != null) { //              
                    							
       
				strBuffer_tLogRow_16.append(
								FormatterUtils.format_Date(row36.moment, "yyyy-MM-dd HH:mm:ss")				
				);


							
	    		} //  			

    			strBuffer_tLogRow_16.append("|");
    			


   				
	    		if(row36.pid != null) { //              
                    							
       
				strBuffer_tLogRow_16.append(
				                String.valueOf(row36.pid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_16.append("|");
    			


   				
	    		if(row36.root_pid != null) { //              
                    							
       
				strBuffer_tLogRow_16.append(
				                String.valueOf(row36.root_pid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_16.append("|");
    			


   				
	    		if(row36.father_pid != null) { //              
                    							
       
				strBuffer_tLogRow_16.append(
				                String.valueOf(row36.father_pid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_16.append("|");
    			


   				
	    		if(row36.project != null) { //              
                    							
       
				strBuffer_tLogRow_16.append(
				                String.valueOf(row36.project)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_16.append("|");
    			


   				
	    		if(row36.job != null) { //              
                    							
       
				strBuffer_tLogRow_16.append(
				                String.valueOf(row36.job)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_16.append("|");
    			


   				
	    		if(row36.context != null) { //              
                    							
       
				strBuffer_tLogRow_16.append(
				                String.valueOf(row36.context)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_16.append("|");
    			


   				
	    		if(row36.priority != null) { //              
                    							
       
				strBuffer_tLogRow_16.append(
				                String.valueOf(row36.priority)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_16.append("|");
    			


   				
	    		if(row36.type != null) { //              
                    							
       
				strBuffer_tLogRow_16.append(
				                String.valueOf(row36.type)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_16.append("|");
    			


   				
	    		if(row36.origin != null) { //              
                    							
       
				strBuffer_tLogRow_16.append(
				                String.valueOf(row36.origin)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_16.append("|");
    			


   				
	    		if(row36.message != null) { //              
                    							
       
				strBuffer_tLogRow_16.append(
				                String.valueOf(row36.message)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_16.append("|");
    			


   				
	    		if(row36.code != null) { //              
                    							
       
				strBuffer_tLogRow_16.append(
				                String.valueOf(row36.code)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_16 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_16 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_16);
                    }
                    consoleOut_tLogRow_16.println(strBuffer_tLogRow_16.toString());
                    consoleOut_tLogRow_16.flush();
                    nb_line_tLogRow_16++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_16++;

/**
 * [tLogRow_16 main ] stop
 */
	
	/**
	 * [tLogRow_16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_16";

	

 



/**
 * [tLogRow_16 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_16 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_16";

	

 



/**
 * [tLogRow_16 process_data_end ] stop
 */



	
	/**
	 * [tLogCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tLogCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	
	}
} catch (Exception e_tLogCatcher_1) {
	logIgnoredError(String.format("tLogCatcher_1 - tLogCatcher failed to process log message(s) due to internal error: %s", e_tLogCatcher_1), e_tLogCatcher_1);
}

 

ok_Hash.put("tLogCatcher_1", true);
end_Hash.put("tLogCatcher_1", System.currentTimeMillis());




/**
 * [tLogCatcher_1 end ] stop
 */

	
	/**
	 * [tLogRow_16 end ] start
	 */

	

	
	
	currentComponent="tLogRow_16";

	


//////
//////
globalMap.put("tLogRow_16_NB_LINE",nb_line_tLogRow_16);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row36");
			  	}
			  	
 

ok_Hash.put("tLogRow_16", true);
end_Hash.put("tLogRow_16", System.currentTimeMillis());




/**
 * [tLogRow_16 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLogCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 finally ] stop
 */

	
	/**
	 * [tLogRow_16 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_16";

	

 



/**
 * [tLogRow_16 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "prod";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final cnam_bulk_data_processing cnam_bulk_data_processingClass = new cnam_bulk_data_processing();

        int exitCode = cnam_bulk_data_processingClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = cnam_bulk_data_processing.class.getClassLoader().getResourceAsStream("cnam_project/cnam_bulk_data_processing_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = cnam_bulk_data_processing.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("IMAGE_BMP_THRESHOLD", "id_Integer");
                            try{
                                context.IMAGE_BMP_THRESHOLD=routines.system.ParserUtils.parseTo_Integer (context.getProperty("IMAGE_BMP_THRESHOLD"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "IMAGE_BMP_THRESHOLD", e.getMessage()));
                                context.IMAGE_BMP_THRESHOLD=null;
                            }
                        context.setContextType("default_score", "id_Integer");
                            try{
                                context.default_score=routines.system.ParserUtils.parseTo_Integer (context.getProperty("default_score"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "default_score", e.getMessage()));
                                context.default_score=null;
                            }
                        context.setContextType("csvpath", "id_String");
                            context.csvpath=(String) context.getProperty("csvpath");
                        context.setContextType("IMAGE_GIF_THRESHOLD", "id_Integer");
                            try{
                                context.IMAGE_GIF_THRESHOLD=routines.system.ParserUtils.parseTo_Integer (context.getProperty("IMAGE_GIF_THRESHOLD"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "IMAGE_GIF_THRESHOLD", e.getMessage()));
                                context.IMAGE_GIF_THRESHOLD=null;
                            }
                        context.setContextType("IMAGE_JPG_THRESHOLD", "id_Integer");
                            try{
                                context.IMAGE_JPG_THRESHOLD=routines.system.ParserUtils.parseTo_Integer (context.getProperty("IMAGE_JPG_THRESHOLD"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "IMAGE_JPG_THRESHOLD", e.getMessage()));
                                context.IMAGE_JPG_THRESHOLD=null;
                            }
                        context.setContextType("IMAGE_PNG_THRESHOLD", "id_Integer");
                            try{
                                context.IMAGE_PNG_THRESHOLD=routines.system.ParserUtils.parseTo_Integer (context.getProperty("IMAGE_PNG_THRESHOLD"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "IMAGE_PNG_THRESHOLD", e.getMessage()));
                                context.IMAGE_PNG_THRESHOLD=null;
                            }
                        context.setContextType("rejectcsvpath", "id_String");
                            context.rejectcsvpath=(String) context.getProperty("rejectcsvpath");
                        context.setContextType("rejectexcelpath", "id_String");
                            context.rejectexcelpath=(String) context.getProperty("rejectexcelpath");
                        context.setContextType("validcsvpath", "id_String");
                            context.validcsvpath=(String) context.getProperty("validcsvpath");
                        context.setContextType("validexcelpath", "id_String");
                            context.validexcelpath=(String) context.getProperty("validexcelpath");
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("IMAGE_BMP_THRESHOLD")) {
                context.IMAGE_BMP_THRESHOLD = (Integer) parentContextMap.get("IMAGE_BMP_THRESHOLD");
            }if (parentContextMap.containsKey("default_score")) {
                context.default_score = (Integer) parentContextMap.get("default_score");
            }if (parentContextMap.containsKey("csvpath")) {
                context.csvpath = (String) parentContextMap.get("csvpath");
            }if (parentContextMap.containsKey("IMAGE_GIF_THRESHOLD")) {
                context.IMAGE_GIF_THRESHOLD = (Integer) parentContextMap.get("IMAGE_GIF_THRESHOLD");
            }if (parentContextMap.containsKey("IMAGE_JPG_THRESHOLD")) {
                context.IMAGE_JPG_THRESHOLD = (Integer) parentContextMap.get("IMAGE_JPG_THRESHOLD");
            }if (parentContextMap.containsKey("IMAGE_PNG_THRESHOLD")) {
                context.IMAGE_PNG_THRESHOLD = (Integer) parentContextMap.get("IMAGE_PNG_THRESHOLD");
            }if (parentContextMap.containsKey("rejectcsvpath")) {
                context.rejectcsvpath = (String) parentContextMap.get("rejectcsvpath");
            }if (parentContextMap.containsKey("rejectexcelpath")) {
                context.rejectexcelpath = (String) parentContextMap.get("rejectexcelpath");
            }if (parentContextMap.containsKey("validcsvpath")) {
                context.validcsvpath = (String) parentContextMap.get("validcsvpath");
            }if (parentContextMap.containsKey("validexcelpath")) {
                context.validexcelpath = (String) parentContextMap.get("validexcelpath");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tJava_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tJava_1) {
globalMap.put("tJava_1_SUBPROCESS_STATE", -1);

e_tJava_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : cnam_bulk_data_processing");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     724768 characters generated by Talend Open Studio for Data Integration 
 *     on the September 21, 2022 12:14:14 PM GMT
 ************************************************************************************************/